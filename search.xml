<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring传送门</title>
      <link href="2020/12/17/spring-chuan-song-men/"/>
      <url>2020/12/17/spring-chuan-song-men/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a><a href="https://www.lileiblog.top/2020/12/08/spring-shi-wu/">Spring事务</a></h2><h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a><a href="https://www.lileiblog.top/2020/12/08/spring-aop/">Spring AOP</a></h2><h2 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring IOC"></a><a href="https://www.lileiblog.top/2020/12/08/spring-ioc/">Spring IOC</a></h2><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a><a href="https://www.lileiblog.top/2020/12/07/spring/">Spring</a></h2><h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a><a href="https://www.lileiblog.top/2020/12/07/spring-mvc/">Spring MVC</a></h2><h2 id="Spring-MVC-拦截器"><a href="#Spring-MVC-拦截器" class="headerlink" title="Spring MVC 拦截器"></a><a href="https://www.lileiblog.top/2020/11/20/spring-mvc-lan-jie-qi/">Spring MVC 拦截器</a></h2>]]></content>
      
      
      <categories>
          
          <category> Portal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> portal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro安全框架</title>
      <link href="2020/12/14/shiro-an-quan-kuang-jia/"/>
      <url>2020/12/14/shiro-an-quan-kuang-jia/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>简化身份验证和授权</p><ol><li>身份认证/登录</li><li>权限认证</li><li>会话管理</li><li>加密</li><li>多线程并发验证</li><li>测试</li><li>允许假装用户身份</li><li>记住我（登录）</li></ol><hr><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol><li>添加依赖</li><li>添加过滤器<br> web.xml <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--shiro拦截器--&gt;  </span><br><span class="line">&lt;filter&gt;  </span><br><span class="line"> &lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;  </span><br><span class="line"> &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">filter</span>.<span class="title">DelegatingFilterProxy</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;  </span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>&gt;  </span></span><br><span class="line"><span class="class">  </span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;  </span></span><br><span class="line"><span class="class"> &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">shiroFilter</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;  </span></span><br><span class="line"><span class="class"> &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;  </span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>spring配置文件 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--shiro的web过滤器<span class="number">1</span>--&gt;  </span><br><span class="line">&lt;!--登录验证--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;shiroFilter&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;</span>&gt;  </span><br><span class="line"> &lt;property name=<span class="string">&quot;securityManager&quot;</span> ref=<span class="string">&quot;securityManager&quot;</span>/&gt;  </span><br><span class="line"> &lt;property name=<span class="string">&quot;loginUrl&quot;</span> value=<span class="string">&quot;login.html&quot;</span>/&gt;  </span><br><span class="line"> &lt;property name=<span class="string">&quot;unauthorizedUrl&quot;</span> value=<span class="string">&quot;403.html&quot;</span>/&gt;  </span><br><span class="line"> &lt;property name=<span class="string">&quot;filterChainDefinitions&quot;</span>&gt;  </span><br><span class="line"> &lt;value&gt;  &lt;!--anon表示无需验证，authc表示需要验证--&gt;  </span><br><span class="line">  /login.html = anon  </span><br><span class="line">            /sublogin = anon  </span><br><span class="line">            <span class="comment">/* = authc  </span></span><br><span class="line"><span class="comment">        &lt;/value&gt;  </span></span><br><span class="line"><span class="comment"> &lt;/property&gt;&lt;/bean&gt;  </span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">&lt;!--安全管理器--&gt;  </span></span><br><span class="line"><span class="comment">&lt;bean id=&quot;securityManager&quot; class=&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;&gt;  </span></span><br><span class="line"><span class="comment"> &lt;property name=&quot;realm&quot; ref=&quot;realm&quot;/&gt;  </span></span><br><span class="line"><span class="comment">&lt;/bean&gt;  </span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">&lt;!--自定义realm--&gt;  </span></span><br><span class="line"><span class="comment">&lt;bean id=&quot;realm&quot; class=&quot;com.imooc.realm.CustomRealm&quot;&gt;  </span></span><br><span class="line"><span class="comment"> &lt;property name=&quot;credentialsMatcher&quot; ref=&quot;hashedCredentialsMatcher&quot;/&gt;  </span></span><br><span class="line"><span class="comment">&lt;/bean&gt;  </span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">&lt;!--凭证匹配器--&gt;  </span></span><br><span class="line"><span class="comment">&lt;bean id=&quot;hashedCredentialsMatcher&quot; class=&quot;org.apache.shiro.authc.credential.HashedCredentialsMatcher&quot;&gt;  </span></span><br><span class="line"><span class="comment">  &lt;!--加密算法--&gt;  </span></span><br><span class="line"><span class="comment">  &lt;property name=&quot;hashAlgorithmName&quot; value=&quot;md5&quot;/&gt;  </span></span><br><span class="line"><span class="comment">  &lt;!--散列次数--&gt;  </span></span><br><span class="line"><span class="comment">  &lt;property name=&quot;hashIterations&quot; value=&quot;1&quot;/&gt;  </span></span><br><span class="line"><span class="comment">&lt;/bean&gt;</span></span><br></pre></td></tr></table></figure></li><li>realm层 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">  <span class="keyword">private</span> UserService userService;  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//判断是否有角色权限  </span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;  </span><br><span class="line">        String name = (String) principalCollection.getPrimaryPrincipal();  </span><br><span class="line">  <span class="comment">//通过登录的用户名获取关联的角色名  </span></span><br><span class="line">  Set&lt;String&gt; roles = getRoleByName(name);  </span><br><span class="line">  SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();  </span><br><span class="line">  simpleAuthorizationInfo.setRoles(roles);  </span><br><span class="line"> <span class="keyword">return</span> simpleAuthorizationInfo;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//获取角色  </span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Set&lt;String&gt; <span class="title">getRoleByName</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">        Set&lt;String&gt; set = userService.getRoles(name);  </span><br><span class="line"> <span class="keyword">return</span> set;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//判断是否有登陆权限  </span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;  </span><br><span class="line">        String name = (String) authenticationToken.getPrincipal();  </span><br><span class="line">  <span class="comment">//通过登录的用户名获取密码  </span></span><br><span class="line">  String password = getPassword(name);  </span><br><span class="line"> <span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">        SimpleAuthenticationInfo simpleAuthenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(name, password, <span class="string">&quot;admin&quot;</span>);  </span><br><span class="line">  <span class="comment">//加盐，暂时不需要  </span></span><br><span class="line"><span class="comment">//        simpleAuthenticationInfo.setCredentialsSalt(ByteSource.Util.bytes(name));  </span></span><br><span class="line">  <span class="keyword">return</span> simpleAuthenticationInfo;  </span><br><span class="line">  &#125;  </span><br><span class="line">    <span class="comment">//获取密码  </span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">getPassword</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">        String password=userService.getPasswordByName(name);  </span><br><span class="line"> <span class="keyword">return</span> password;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>controller层 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/sublogin&quot;,method= RequestMethod.POST,produces = &quot;application/json;charset=utf-8&quot;)</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">userLogin</span><span class="params">(User user)</span></span>&#123;  </span><br><span class="line">    <span class="comment">//生成token  </span></span><br><span class="line">  UsernamePasswordToken token=<span class="keyword">new</span> UsernamePasswordToken(user.getName(), user.getPassword());  </span><br><span class="line">  Subject subject= SecurityUtils.getSubject();  </span><br><span class="line"> <span class="keyword">try</span>&#123;  </span><br><span class="line">        <span class="comment">//验证登录  </span></span><br><span class="line">  subject.login(token);  </span><br><span class="line">  &#125;<span class="keyword">catch</span> (UnknownAccountException ex)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户名不存在&quot;</span>;  </span><br><span class="line">  &#125;<span class="keyword">catch</span> (IncorrectCredentialsException ex)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;密码错误&quot;</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">    <span class="keyword">catch</span> (Exception e)&#123;  </span><br><span class="line">        <span class="keyword">return</span> e.getMessage();  </span><br><span class="line">  &#125;  </span><br><span class="line">    <span class="keyword">if</span>(subject.hasRole(<span class="string">&quot;admin&quot;</span>))&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;权限正确&quot;</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;权限失败&quot;</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro </tag>
            
            <tag> 安全框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据加密-Bcrypt</title>
      <link href="2020/12/10/shu-ju-jia-mi-bcrypt/"/>
      <url>2020/12/10/shu-ju-jia-mi-bcrypt/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="Bcrypt"><a href="#Bcrypt" class="headerlink" title="Bcrypt"></a>Bcrypt</h2><ul><li><p>单向Hash加密算法，不可反向破解生成明文</p></li><li><p>Bcrypt有四个变量：</p><ol><li>saltRounds: 正数，代表hash杂凑次数，数值越高越安全，默认10次。</li><li>myPassword: 明文密码字符串。</li><li>salt: 盐，一个128bits随机字符串，22字符</li><li>myHash: 经过明文密码password和盐salt进行hash，个人的理解是默认10次下 ，循环加盐hash10次，得到myHash</li></ol></li><li><p>每次明文字符串myPassword过来，就通过10次循环加盐salt加密后得到myHash, 然后拼接BCrypt版本号+salt盐+myHash等到最终的bcrypt密码<br>  <img src="https://i.loli.net/2020/12/10/uJBM2vSTAbG9hzp.png" alt="Snipaste_2020-12-10_17-37-11.png"></p></li><li><p>有文章指出bcrypt一个密码出来的时间比较长，需要0.3秒，而MD5只需要一微秒（百万分之一秒），一个40秒可以穷举得到明文的MD5，在bcrypt需要12年，时间成本太高</p></li><li><p>在下次校验时，从myHash中取出salt，salt跟password进行hash；得到的结果跟保存在DB中的hash进行比对。</p></li><li><p>加密<br>  <code>BCrypt.hashpw(myPassword, BCrypt.gensalt())</code></p></li><li><p>验证<br>  <code>BCrypt.checkpw(candidatePassword, dbPassword)</code></p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Copyright (c) 2006 Damien Miller &lt;djm@mindrot.org&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Permission to use, copy, modify, and distribute this software for any</span></span><br><span class="line"><span class="comment">// purpose with or without fee is hereby granted, provided that the above</span></span><br><span class="line"><span class="comment">// copyright notice and this permission notice appear in all copies.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// THE SOFTWARE IS PROVIDED &quot;AS IS&quot; AND THE AUTHOR DISCLAIMS ALL WARRANTIES</span></span><br><span class="line"><span class="comment">// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF</span></span><br><span class="line"><span class="comment">// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR</span></span><br><span class="line"><span class="comment">// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES</span></span><br><span class="line"><span class="comment">// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN</span></span><br><span class="line"><span class="comment">// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF</span></span><br><span class="line"><span class="comment">// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.dangerwarning.tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BCrypt implements OpenBSD-style Blowfish password hashing using</span></span><br><span class="line"><span class="comment"> * the scheme described in &quot;A Future-Adaptable Password Scheme&quot; by</span></span><br><span class="line"><span class="comment"> * Niels Provos and David Mazieres.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This password hashing system tries to thwart off-line password</span></span><br><span class="line"><span class="comment"> * cracking using a computationally-intensive hashing algorithm,</span></span><br><span class="line"><span class="comment"> * based on Bruce Schneier&#x27;s Blowfish cipher. The work factor of</span></span><br><span class="line"><span class="comment"> * the algorithm is parameterised, so it can be increased as</span></span><br><span class="line"><span class="comment"> * computers get faster.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Usage is really simple. To hash a password for the first time,</span></span><br><span class="line"><span class="comment"> * call the hashpw method with a random salt, like this:</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;</span></span><br><span class="line"><span class="comment"> * String pw_hash = BCrypt.hashpw(plain_password, BCrypt.gensalt()); &lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/code&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * To check whether a plaintext password matches one that has been</span></span><br><span class="line"><span class="comment"> * hashed previously, use the checkpw method:</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;</span></span><br><span class="line"><span class="comment"> * if (BCrypt.checkpw(candidate_password, stored_hash))&lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&quot;It matches&quot;);&lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * else&lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&quot;It does not match&quot;);&lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/code&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The gensalt() method takes an optional parameter (log_rounds)</span></span><br><span class="line"><span class="comment"> * that determines the computational complexity of the hashing:</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;</span></span><br><span class="line"><span class="comment"> * String strong_salt = BCrypt.gensalt(10)&lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * String stronger_salt = BCrypt.gensalt(12)&lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/code&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The amount of work increases exponentially (2**log_rounds), so </span></span><br><span class="line"><span class="comment"> * each increment is twice as much work. The default log_rounds is</span></span><br><span class="line"><span class="comment"> * 10, and the valid range is 4 to 30.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damien Miller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BCrypt</span> </span>&#123;</span><br><span class="line"><span class="comment">// BCrypt parameters</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GENSALT_DEFAULT_LOG2_ROUNDS = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BCRYPT_SALT_LEN = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Blowfish parameters</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BLOWFISH_NUM_ROUNDS = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initial contents of key schedule</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> P_orig[] = &#123;</span><br><span class="line"><span class="number">0x243f6a88</span>, <span class="number">0x85a308d3</span>, <span class="number">0x13198a2e</span>, <span class="number">0x03707344</span>,</span><br><span class="line"><span class="number">0xa4093822</span>, <span class="number">0x299f31d0</span>, <span class="number">0x082efa98</span>, <span class="number">0xec4e6c89</span>,</span><br><span class="line"><span class="number">0x452821e6</span>, <span class="number">0x38d01377</span>, <span class="number">0xbe5466cf</span>, <span class="number">0x34e90c6c</span>,</span><br><span class="line"><span class="number">0xc0ac29b7</span>, <span class="number">0xc97c50dd</span>, <span class="number">0x3f84d5b5</span>, <span class="number">0xb5470917</span>,</span><br><span class="line"><span class="number">0x9216d5d9</span>, <span class="number">0x8979fb1b</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> S_orig[] = &#123;</span><br><span class="line"><span class="number">0xd1310ba6</span>, <span class="number">0x98dfb5ac</span>, <span class="number">0x2ffd72db</span>, <span class="number">0xd01adfb7</span>,</span><br><span class="line"><span class="number">0xb8e1afed</span>, <span class="number">0x6a267e96</span>, <span class="number">0xba7c9045</span>, <span class="number">0xf12c7f99</span>,</span><br><span class="line"><span class="number">0x24a19947</span>, <span class="number">0xb3916cf7</span>, <span class="number">0x0801f2e2</span>, <span class="number">0x858efc16</span>,</span><br><span class="line"><span class="number">0x636920d8</span>, <span class="number">0x71574e69</span>, <span class="number">0xa458fea3</span>, <span class="number">0xf4933d7e</span>,</span><br><span class="line"><span class="number">0x0d95748f</span>, <span class="number">0x728eb658</span>, <span class="number">0x718bcd58</span>, <span class="number">0x82154aee</span>,</span><br><span class="line"><span class="number">0x7b54a41d</span>, <span class="number">0xc25a59b5</span>, <span class="number">0x9c30d539</span>, <span class="number">0x2af26013</span>,</span><br><span class="line"><span class="number">0xc5d1b023</span>, <span class="number">0x286085f0</span>, <span class="number">0xca417918</span>, <span class="number">0xb8db38ef</span>,</span><br><span class="line"><span class="number">0x8e79dcb0</span>, <span class="number">0x603a180e</span>, <span class="number">0x6c9e0e8b</span>, <span class="number">0xb01e8a3e</span>,</span><br><span class="line"><span class="number">0xd71577c1</span>, <span class="number">0xbd314b27</span>, <span class="number">0x78af2fda</span>, <span class="number">0x55605c60</span>,</span><br><span class="line"><span class="number">0xe65525f3</span>, <span class="number">0xaa55ab94</span>, <span class="number">0x57489862</span>, <span class="number">0x63e81440</span>,</span><br><span class="line"><span class="number">0x55ca396a</span>, <span class="number">0x2aab10b6</span>, <span class="number">0xb4cc5c34</span>, <span class="number">0x1141e8ce</span>,</span><br><span class="line"><span class="number">0xa15486af</span>, <span class="number">0x7c72e993</span>, <span class="number">0xb3ee1411</span>, <span class="number">0x636fbc2a</span>,</span><br><span class="line"><span class="number">0x2ba9c55d</span>, <span class="number">0x741831f6</span>, <span class="number">0xce5c3e16</span>, <span class="number">0x9b87931e</span>,</span><br><span class="line"><span class="number">0xafd6ba33</span>, <span class="number">0x6c24cf5c</span>, <span class="number">0x7a325381</span>, <span class="number">0x28958677</span>,</span><br><span class="line"><span class="number">0x3b8f4898</span>, <span class="number">0x6b4bb9af</span>, <span class="number">0xc4bfe81b</span>, <span class="number">0x66282193</span>,</span><br><span class="line"><span class="number">0x61d809cc</span>, <span class="number">0xfb21a991</span>, <span class="number">0x487cac60</span>, <span class="number">0x5dec8032</span>,</span><br><span class="line"><span class="number">0xef845d5d</span>, <span class="number">0xe98575b1</span>, <span class="number">0xdc262302</span>, <span class="number">0xeb651b88</span>,</span><br><span class="line"><span class="number">0x23893e81</span>, <span class="number">0xd396acc5</span>, <span class="number">0x0f6d6ff3</span>, <span class="number">0x83f44239</span>,</span><br><span class="line"><span class="number">0x2e0b4482</span>, <span class="number">0xa4842004</span>, <span class="number">0x69c8f04a</span>, <span class="number">0x9e1f9b5e</span>,</span><br><span class="line"><span class="number">0x21c66842</span>, <span class="number">0xf6e96c9a</span>, <span class="number">0x670c9c61</span>, <span class="number">0xabd388f0</span>,</span><br><span class="line"><span class="number">0x6a51a0d2</span>, <span class="number">0xd8542f68</span>, <span class="number">0x960fa728</span>, <span class="number">0xab5133a3</span>,</span><br><span class="line"><span class="number">0x6eef0b6c</span>, <span class="number">0x137a3be4</span>, <span class="number">0xba3bf050</span>, <span class="number">0x7efb2a98</span>,</span><br><span class="line"><span class="number">0xa1f1651d</span>, <span class="number">0x39af0176</span>, <span class="number">0x66ca593e</span>, <span class="number">0x82430e88</span>,</span><br><span class="line"><span class="number">0x8cee8619</span>, <span class="number">0x456f9fb4</span>, <span class="number">0x7d84a5c3</span>, <span class="number">0x3b8b5ebe</span>,</span><br><span class="line"><span class="number">0xe06f75d8</span>, <span class="number">0x85c12073</span>, <span class="number">0x401a449f</span>, <span class="number">0x56c16aa6</span>,</span><br><span class="line"><span class="number">0x4ed3aa62</span>, <span class="number">0x363f7706</span>, <span class="number">0x1bfedf72</span>, <span class="number">0x429b023d</span>,</span><br><span class="line"><span class="number">0x37d0d724</span>, <span class="number">0xd00a1248</span>, <span class="number">0xdb0fead3</span>, <span class="number">0x49f1c09b</span>,</span><br><span class="line"><span class="number">0x075372c9</span>, <span class="number">0x80991b7b</span>, <span class="number">0x25d479d8</span>, <span class="number">0xf6e8def7</span>,</span><br><span class="line"><span class="number">0xe3fe501a</span>, <span class="number">0xb6794c3b</span>, <span class="number">0x976ce0bd</span>, <span class="number">0x04c006ba</span>,</span><br><span class="line"><span class="number">0xc1a94fb6</span>, <span class="number">0x409f60c4</span>, <span class="number">0x5e5c9ec2</span>, <span class="number">0x196a2463</span>,</span><br><span class="line"><span class="number">0x68fb6faf</span>, <span class="number">0x3e6c53b5</span>, <span class="number">0x1339b2eb</span>, <span class="number">0x3b52ec6f</span>,</span><br><span class="line"><span class="number">0x6dfc511f</span>, <span class="number">0x9b30952c</span>, <span class="number">0xcc814544</span>, <span class="number">0xaf5ebd09</span>,</span><br><span class="line"><span class="number">0xbee3d004</span>, <span class="number">0xde334afd</span>, <span class="number">0x660f2807</span>, <span class="number">0x192e4bb3</span>,</span><br><span class="line"><span class="number">0xc0cba857</span>, <span class="number">0x45c8740f</span>, <span class="number">0xd20b5f39</span>, <span class="number">0xb9d3fbdb</span>,</span><br><span class="line"><span class="number">0x5579c0bd</span>, <span class="number">0x1a60320a</span>, <span class="number">0xd6a100c6</span>, <span class="number">0x402c7279</span>,</span><br><span class="line"><span class="number">0x679f25fe</span>, <span class="number">0xfb1fa3cc</span>, <span class="number">0x8ea5e9f8</span>, <span class="number">0xdb3222f8</span>,</span><br><span class="line"><span class="number">0x3c7516df</span>, <span class="number">0xfd616b15</span>, <span class="number">0x2f501ec8</span>, <span class="number">0xad0552ab</span>,</span><br><span class="line"><span class="number">0x323db5fa</span>, <span class="number">0xfd238760</span>, <span class="number">0x53317b48</span>, <span class="number">0x3e00df82</span>,</span><br><span class="line"><span class="number">0x9e5c57bb</span>, <span class="number">0xca6f8ca0</span>, <span class="number">0x1a87562e</span>, <span class="number">0xdf1769db</span>,</span><br><span class="line"><span class="number">0xd542a8f6</span>, <span class="number">0x287effc3</span>, <span class="number">0xac6732c6</span>, <span class="number">0x8c4f5573</span>,</span><br><span class="line"><span class="number">0x695b27b0</span>, <span class="number">0xbbca58c8</span>, <span class="number">0xe1ffa35d</span>, <span class="number">0xb8f011a0</span>,</span><br><span class="line"><span class="number">0x10fa3d98</span>, <span class="number">0xfd2183b8</span>, <span class="number">0x4afcb56c</span>, <span class="number">0x2dd1d35b</span>,</span><br><span class="line"><span class="number">0x9a53e479</span>, <span class="number">0xb6f84565</span>, <span class="number">0xd28e49bc</span>, <span class="number">0x4bfb9790</span>,</span><br><span class="line"><span class="number">0xe1ddf2da</span>, <span class="number">0xa4cb7e33</span>, <span class="number">0x62fb1341</span>, <span class="number">0xcee4c6e8</span>,</span><br><span class="line"><span class="number">0xef20cada</span>, <span class="number">0x36774c01</span>, <span class="number">0xd07e9efe</span>, <span class="number">0x2bf11fb4</span>,</span><br><span class="line"><span class="number">0x95dbda4d</span>, <span class="number">0xae909198</span>, <span class="number">0xeaad8e71</span>, <span class="number">0x6b93d5a0</span>,</span><br><span class="line"><span class="number">0xd08ed1d0</span>, <span class="number">0xafc725e0</span>, <span class="number">0x8e3c5b2f</span>, <span class="number">0x8e7594b7</span>,</span><br><span class="line"><span class="number">0x8ff6e2fb</span>, <span class="number">0xf2122b64</span>, <span class="number">0x8888b812</span>, <span class="number">0x900df01c</span>,</span><br><span class="line"><span class="number">0x4fad5ea0</span>, <span class="number">0x688fc31c</span>, <span class="number">0xd1cff191</span>, <span class="number">0xb3a8c1ad</span>,</span><br><span class="line"><span class="number">0x2f2f2218</span>, <span class="number">0xbe0e1777</span>, <span class="number">0xea752dfe</span>, <span class="number">0x8b021fa1</span>,</span><br><span class="line"><span class="number">0xe5a0cc0f</span>, <span class="number">0xb56f74e8</span>, <span class="number">0x18acf3d6</span>, <span class="number">0xce89e299</span>,</span><br><span class="line"><span class="number">0xb4a84fe0</span>, <span class="number">0xfd13e0b7</span>, <span class="number">0x7cc43b81</span>, <span class="number">0xd2ada8d9</span>,</span><br><span class="line"><span class="number">0x165fa266</span>, <span class="number">0x80957705</span>, <span class="number">0x93cc7314</span>, <span class="number">0x211a1477</span>,</span><br><span class="line"><span class="number">0xe6ad2065</span>, <span class="number">0x77b5fa86</span>, <span class="number">0xc75442f5</span>, <span class="number">0xfb9d35cf</span>,</span><br><span class="line"><span class="number">0xebcdaf0c</span>, <span class="number">0x7b3e89a0</span>, <span class="number">0xd6411bd3</span>, <span class="number">0xae1e7e49</span>,</span><br><span class="line"><span class="number">0x00250e2d</span>, <span class="number">0x2071b35e</span>, <span class="number">0x226800bb</span>, <span class="number">0x57b8e0af</span>,</span><br><span class="line"><span class="number">0x2464369b</span>, <span class="number">0xf009b91e</span>, <span class="number">0x5563911d</span>, <span class="number">0x59dfa6aa</span>,</span><br><span class="line"><span class="number">0x78c14389</span>, <span class="number">0xd95a537f</span>, <span class="number">0x207d5ba2</span>, <span class="number">0x02e5b9c5</span>,</span><br><span class="line"><span class="number">0x83260376</span>, <span class="number">0x6295cfa9</span>, <span class="number">0x11c81968</span>, <span class="number">0x4e734a41</span>,</span><br><span class="line"><span class="number">0xb3472dca</span>, <span class="number">0x7b14a94a</span>, <span class="number">0x1b510052</span>, <span class="number">0x9a532915</span>,</span><br><span class="line"><span class="number">0xd60f573f</span>, <span class="number">0xbc9bc6e4</span>, <span class="number">0x2b60a476</span>, <span class="number">0x81e67400</span>,</span><br><span class="line"><span class="number">0x08ba6fb5</span>, <span class="number">0x571be91f</span>, <span class="number">0xf296ec6b</span>, <span class="number">0x2a0dd915</span>,</span><br><span class="line"><span class="number">0xb6636521</span>, <span class="number">0xe7b9f9b6</span>, <span class="number">0xff34052e</span>, <span class="number">0xc5855664</span>,</span><br><span class="line"><span class="number">0x53b02d5d</span>, <span class="number">0xa99f8fa1</span>, <span class="number">0x08ba4799</span>, <span class="number">0x6e85076a</span>,</span><br><span class="line"><span class="number">0x4b7a70e9</span>, <span class="number">0xb5b32944</span>, <span class="number">0xdb75092e</span>, <span class="number">0xc4192623</span>,</span><br><span class="line"><span class="number">0xad6ea6b0</span>, <span class="number">0x49a7df7d</span>, <span class="number">0x9cee60b8</span>, <span class="number">0x8fedb266</span>,</span><br><span class="line"><span class="number">0xecaa8c71</span>, <span class="number">0x699a17ff</span>, <span class="number">0x5664526c</span>, <span class="number">0xc2b19ee1</span>,</span><br><span class="line"><span class="number">0x193602a5</span>, <span class="number">0x75094c29</span>, <span class="number">0xa0591340</span>, <span class="number">0xe4183a3e</span>,</span><br><span class="line"><span class="number">0x3f54989a</span>, <span class="number">0x5b429d65</span>, <span class="number">0x6b8fe4d6</span>, <span class="number">0x99f73fd6</span>,</span><br><span class="line"><span class="number">0xa1d29c07</span>, <span class="number">0xefe830f5</span>, <span class="number">0x4d2d38e6</span>, <span class="number">0xf0255dc1</span>,</span><br><span class="line"><span class="number">0x4cdd2086</span>, <span class="number">0x8470eb26</span>, <span class="number">0x6382e9c6</span>, <span class="number">0x021ecc5e</span>,</span><br><span class="line"><span class="number">0x09686b3f</span>, <span class="number">0x3ebaefc9</span>, <span class="number">0x3c971814</span>, <span class="number">0x6b6a70a1</span>,</span><br><span class="line"><span class="number">0x687f3584</span>, <span class="number">0x52a0e286</span>, <span class="number">0xb79c5305</span>, <span class="number">0xaa500737</span>,</span><br><span class="line"><span class="number">0x3e07841c</span>, <span class="number">0x7fdeae5c</span>, <span class="number">0x8e7d44ec</span>, <span class="number">0x5716f2b8</span>,</span><br><span class="line"><span class="number">0xb03ada37</span>, <span class="number">0xf0500c0d</span>, <span class="number">0xf01c1f04</span>, <span class="number">0x0200b3ff</span>,</span><br><span class="line"><span class="number">0xae0cf51a</span>, <span class="number">0x3cb574b2</span>, <span class="number">0x25837a58</span>, <span class="number">0xdc0921bd</span>,</span><br><span class="line"><span class="number">0xd19113f9</span>, <span class="number">0x7ca92ff6</span>, <span class="number">0x94324773</span>, <span class="number">0x22f54701</span>,</span><br><span class="line"><span class="number">0x3ae5e581</span>, <span class="number">0x37c2dadc</span>, <span class="number">0xc8b57634</span>, <span class="number">0x9af3dda7</span>,</span><br><span class="line"><span class="number">0xa9446146</span>, <span class="number">0x0fd0030e</span>, <span class="number">0xecc8c73e</span>, <span class="number">0xa4751e41</span>,</span><br><span class="line"><span class="number">0xe238cd99</span>, <span class="number">0x3bea0e2f</span>, <span class="number">0x3280bba1</span>, <span class="number">0x183eb331</span>,</span><br><span class="line"><span class="number">0x4e548b38</span>, <span class="number">0x4f6db908</span>, <span class="number">0x6f420d03</span>, <span class="number">0xf60a04bf</span>,</span><br><span class="line"><span class="number">0x2cb81290</span>, <span class="number">0x24977c79</span>, <span class="number">0x5679b072</span>, <span class="number">0xbcaf89af</span>,</span><br><span class="line"><span class="number">0xde9a771f</span>, <span class="number">0xd9930810</span>, <span class="number">0xb38bae12</span>, <span class="number">0xdccf3f2e</span>,</span><br><span class="line"><span class="number">0x5512721f</span>, <span class="number">0x2e6b7124</span>, <span class="number">0x501adde6</span>, <span class="number">0x9f84cd87</span>,</span><br><span class="line"><span class="number">0x7a584718</span>, <span class="number">0x7408da17</span>, <span class="number">0xbc9f9abc</span>, <span class="number">0xe94b7d8c</span>,</span><br><span class="line"><span class="number">0xec7aec3a</span>, <span class="number">0xdb851dfa</span>, <span class="number">0x63094366</span>, <span class="number">0xc464c3d2</span>,</span><br><span class="line"><span class="number">0xef1c1847</span>, <span class="number">0x3215d908</span>, <span class="number">0xdd433b37</span>, <span class="number">0x24c2ba16</span>,</span><br><span class="line"><span class="number">0x12a14d43</span>, <span class="number">0x2a65c451</span>, <span class="number">0x50940002</span>, <span class="number">0x133ae4dd</span>,</span><br><span class="line"><span class="number">0x71dff89e</span>, <span class="number">0x10314e55</span>, <span class="number">0x81ac77d6</span>, <span class="number">0x5f11199b</span>,</span><br><span class="line"><span class="number">0x043556f1</span>, <span class="number">0xd7a3c76b</span>, <span class="number">0x3c11183b</span>, <span class="number">0x5924a509</span>,</span><br><span class="line"><span class="number">0xf28fe6ed</span>, <span class="number">0x97f1fbfa</span>, <span class="number">0x9ebabf2c</span>, <span class="number">0x1e153c6e</span>,</span><br><span class="line"><span class="number">0x86e34570</span>, <span class="number">0xeae96fb1</span>, <span class="number">0x860e5e0a</span>, <span class="number">0x5a3e2ab3</span>,</span><br><span class="line"><span class="number">0x771fe71c</span>, <span class="number">0x4e3d06fa</span>, <span class="number">0x2965dcb9</span>, <span class="number">0x99e71d0f</span>,</span><br><span class="line"><span class="number">0x803e89d6</span>, <span class="number">0x5266c825</span>, <span class="number">0x2e4cc978</span>, <span class="number">0x9c10b36a</span>,</span><br><span class="line"><span class="number">0xc6150eba</span>, <span class="number">0x94e2ea78</span>, <span class="number">0xa5fc3c53</span>, <span class="number">0x1e0a2df4</span>,</span><br><span class="line"><span class="number">0xf2f74ea7</span>, <span class="number">0x361d2b3d</span>, <span class="number">0x1939260f</span>, <span class="number">0x19c27960</span>,</span><br><span class="line"><span class="number">0x5223a708</span>, <span class="number">0xf71312b6</span>, <span class="number">0xebadfe6e</span>, <span class="number">0xeac31f66</span>,</span><br><span class="line"><span class="number">0xe3bc4595</span>, <span class="number">0xa67bc883</span>, <span class="number">0xb17f37d1</span>, <span class="number">0x018cff28</span>,</span><br><span class="line"><span class="number">0xc332ddef</span>, <span class="number">0xbe6c5aa5</span>, <span class="number">0x65582185</span>, <span class="number">0x68ab9802</span>,</span><br><span class="line"><span class="number">0xeecea50f</span>, <span class="number">0xdb2f953b</span>, <span class="number">0x2aef7dad</span>, <span class="number">0x5b6e2f84</span>,</span><br><span class="line"><span class="number">0x1521b628</span>, <span class="number">0x29076170</span>, <span class="number">0xecdd4775</span>, <span class="number">0x619f1510</span>,</span><br><span class="line"><span class="number">0x13cca830</span>, <span class="number">0xeb61bd96</span>, <span class="number">0x0334fe1e</span>, <span class="number">0xaa0363cf</span>,</span><br><span class="line"><span class="number">0xb5735c90</span>, <span class="number">0x4c70a239</span>, <span class="number">0xd59e9e0b</span>, <span class="number">0xcbaade14</span>,</span><br><span class="line"><span class="number">0xeecc86bc</span>, <span class="number">0x60622ca7</span>, <span class="number">0x9cab5cab</span>, <span class="number">0xb2f3846e</span>,</span><br><span class="line"><span class="number">0x648b1eaf</span>, <span class="number">0x19bdf0ca</span>, <span class="number">0xa02369b9</span>, <span class="number">0x655abb50</span>,</span><br><span class="line"><span class="number">0x40685a32</span>, <span class="number">0x3c2ab4b3</span>, <span class="number">0x319ee9d5</span>, <span class="number">0xc021b8f7</span>,</span><br><span class="line"><span class="number">0x9b540b19</span>, <span class="number">0x875fa099</span>, <span class="number">0x95f7997e</span>, <span class="number">0x623d7da8</span>,</span><br><span class="line"><span class="number">0xf837889a</span>, <span class="number">0x97e32d77</span>, <span class="number">0x11ed935f</span>, <span class="number">0x16681281</span>,</span><br><span class="line"><span class="number">0x0e358829</span>, <span class="number">0xc7e61fd6</span>, <span class="number">0x96dedfa1</span>, <span class="number">0x7858ba99</span>,</span><br><span class="line"><span class="number">0x57f584a5</span>, <span class="number">0x1b227263</span>, <span class="number">0x9b83c3ff</span>, <span class="number">0x1ac24696</span>,</span><br><span class="line"><span class="number">0xcdb30aeb</span>, <span class="number">0x532e3054</span>, <span class="number">0x8fd948e4</span>, <span class="number">0x6dbc3128</span>,</span><br><span class="line"><span class="number">0x58ebf2ef</span>, <span class="number">0x34c6ffea</span>, <span class="number">0xfe28ed61</span>, <span class="number">0xee7c3c73</span>,</span><br><span class="line"><span class="number">0x5d4a14d9</span>, <span class="number">0xe864b7e3</span>, <span class="number">0x42105d14</span>, <span class="number">0x203e13e0</span>,</span><br><span class="line"><span class="number">0x45eee2b6</span>, <span class="number">0xa3aaabea</span>, <span class="number">0xdb6c4f15</span>, <span class="number">0xfacb4fd0</span>,</span><br><span class="line"><span class="number">0xc742f442</span>, <span class="number">0xef6abbb5</span>, <span class="number">0x654f3b1d</span>, <span class="number">0x41cd2105</span>,</span><br><span class="line"><span class="number">0xd81e799e</span>, <span class="number">0x86854dc7</span>, <span class="number">0xe44b476a</span>, <span class="number">0x3d816250</span>,</span><br><span class="line"><span class="number">0xcf62a1f2</span>, <span class="number">0x5b8d2646</span>, <span class="number">0xfc8883a0</span>, <span class="number">0xc1c7b6a3</span>,</span><br><span class="line"><span class="number">0x7f1524c3</span>, <span class="number">0x69cb7492</span>, <span class="number">0x47848a0b</span>, <span class="number">0x5692b285</span>,</span><br><span class="line"><span class="number">0x095bbf00</span>, <span class="number">0xad19489d</span>, <span class="number">0x1462b174</span>, <span class="number">0x23820e00</span>,</span><br><span class="line"><span class="number">0x58428d2a</span>, <span class="number">0x0c55f5ea</span>, <span class="number">0x1dadf43e</span>, <span class="number">0x233f7061</span>,</span><br><span class="line"><span class="number">0x3372f092</span>, <span class="number">0x8d937e41</span>, <span class="number">0xd65fecf1</span>, <span class="number">0x6c223bdb</span>,</span><br><span class="line"><span class="number">0x7cde3759</span>, <span class="number">0xcbee7460</span>, <span class="number">0x4085f2a7</span>, <span class="number">0xce77326e</span>,</span><br><span class="line"><span class="number">0xa6078084</span>, <span class="number">0x19f8509e</span>, <span class="number">0xe8efd855</span>, <span class="number">0x61d99735</span>,</span><br><span class="line"><span class="number">0xa969a7aa</span>, <span class="number">0xc50c06c2</span>, <span class="number">0x5a04abfc</span>, <span class="number">0x800bcadc</span>,</span><br><span class="line"><span class="number">0x9e447a2e</span>, <span class="number">0xc3453484</span>, <span class="number">0xfdd56705</span>, <span class="number">0x0e1e9ec9</span>,</span><br><span class="line"><span class="number">0xdb73dbd3</span>, <span class="number">0x105588cd</span>, <span class="number">0x675fda79</span>, <span class="number">0xe3674340</span>,</span><br><span class="line"><span class="number">0xc5c43465</span>, <span class="number">0x713e38d8</span>, <span class="number">0x3d28f89e</span>, <span class="number">0xf16dff20</span>,</span><br><span class="line"><span class="number">0x153e21e7</span>, <span class="number">0x8fb03d4a</span>, <span class="number">0xe6e39f2b</span>, <span class="number">0xdb83adf7</span>,</span><br><span class="line"><span class="number">0xe93d5a68</span>, <span class="number">0x948140f7</span>, <span class="number">0xf64c261c</span>, <span class="number">0x94692934</span>,</span><br><span class="line"><span class="number">0x411520f7</span>, <span class="number">0x7602d4f7</span>, <span class="number">0xbcf46b2e</span>, <span class="number">0xd4a20068</span>,</span><br><span class="line"><span class="number">0xd4082471</span>, <span class="number">0x3320f46a</span>, <span class="number">0x43b7d4b7</span>, <span class="number">0x500061af</span>,</span><br><span class="line"><span class="number">0x1e39f62e</span>, <span class="number">0x97244546</span>, <span class="number">0x14214f74</span>, <span class="number">0xbf8b8840</span>,</span><br><span class="line"><span class="number">0x4d95fc1d</span>, <span class="number">0x96b591af</span>, <span class="number">0x70f4ddd3</span>, <span class="number">0x66a02f45</span>,</span><br><span class="line"><span class="number">0xbfbc09ec</span>, <span class="number">0x03bd9785</span>, <span class="number">0x7fac6dd0</span>, <span class="number">0x31cb8504</span>,</span><br><span class="line"><span class="number">0x96eb27b3</span>, <span class="number">0x55fd3941</span>, <span class="number">0xda2547e6</span>, <span class="number">0xabca0a9a</span>,</span><br><span class="line"><span class="number">0x28507825</span>, <span class="number">0x530429f4</span>, <span class="number">0x0a2c86da</span>, <span class="number">0xe9b66dfb</span>,</span><br><span class="line"><span class="number">0x68dc1462</span>, <span class="number">0xd7486900</span>, <span class="number">0x680ec0a4</span>, <span class="number">0x27a18dee</span>,</span><br><span class="line"><span class="number">0x4f3ffea2</span>, <span class="number">0xe887ad8c</span>, <span class="number">0xb58ce006</span>, <span class="number">0x7af4d6b6</span>,</span><br><span class="line"><span class="number">0xaace1e7c</span>, <span class="number">0xd3375fec</span>, <span class="number">0xce78a399</span>, <span class="number">0x406b2a42</span>,</span><br><span class="line"><span class="number">0x20fe9e35</span>, <span class="number">0xd9f385b9</span>, <span class="number">0xee39d7ab</span>, <span class="number">0x3b124e8b</span>,</span><br><span class="line"><span class="number">0x1dc9faf7</span>, <span class="number">0x4b6d1856</span>, <span class="number">0x26a36631</span>, <span class="number">0xeae397b2</span>,</span><br><span class="line"><span class="number">0x3a6efa74</span>, <span class="number">0xdd5b4332</span>, <span class="number">0x6841e7f7</span>, <span class="number">0xca7820fb</span>,</span><br><span class="line"><span class="number">0xfb0af54e</span>, <span class="number">0xd8feb397</span>, <span class="number">0x454056ac</span>, <span class="number">0xba489527</span>,</span><br><span class="line"><span class="number">0x55533a3a</span>, <span class="number">0x20838d87</span>, <span class="number">0xfe6ba9b7</span>, <span class="number">0xd096954b</span>,</span><br><span class="line"><span class="number">0x55a867bc</span>, <span class="number">0xa1159a58</span>, <span class="number">0xcca92963</span>, <span class="number">0x99e1db33</span>,</span><br><span class="line"><span class="number">0xa62a4a56</span>, <span class="number">0x3f3125f9</span>, <span class="number">0x5ef47e1c</span>, <span class="number">0x9029317c</span>,</span><br><span class="line"><span class="number">0xfdf8e802</span>, <span class="number">0x04272f70</span>, <span class="number">0x80bb155c</span>, <span class="number">0x05282ce3</span>,</span><br><span class="line"><span class="number">0x95c11548</span>, <span class="number">0xe4c66d22</span>, <span class="number">0x48c1133f</span>, <span class="number">0xc70f86dc</span>,</span><br><span class="line"><span class="number">0x07f9c9ee</span>, <span class="number">0x41041f0f</span>, <span class="number">0x404779a4</span>, <span class="number">0x5d886e17</span>,</span><br><span class="line"><span class="number">0x325f51eb</span>, <span class="number">0xd59bc0d1</span>, <span class="number">0xf2bcc18f</span>, <span class="number">0x41113564</span>,</span><br><span class="line"><span class="number">0x257b7834</span>, <span class="number">0x602a9c60</span>, <span class="number">0xdff8e8a3</span>, <span class="number">0x1f636c1b</span>,</span><br><span class="line"><span class="number">0x0e12b4c2</span>, <span class="number">0x02e1329e</span>, <span class="number">0xaf664fd1</span>, <span class="number">0xcad18115</span>,</span><br><span class="line"><span class="number">0x6b2395e0</span>, <span class="number">0x333e92e1</span>, <span class="number">0x3b240b62</span>, <span class="number">0xeebeb922</span>,</span><br><span class="line"><span class="number">0x85b2a20e</span>, <span class="number">0xe6ba0d99</span>, <span class="number">0xde720c8c</span>, <span class="number">0x2da2f728</span>,</span><br><span class="line"><span class="number">0xd0127845</span>, <span class="number">0x95b794fd</span>, <span class="number">0x647d0862</span>, <span class="number">0xe7ccf5f0</span>,</span><br><span class="line"><span class="number">0x5449a36f</span>, <span class="number">0x877d48fa</span>, <span class="number">0xc39dfd27</span>, <span class="number">0xf33e8d1e</span>,</span><br><span class="line"><span class="number">0x0a476341</span>, <span class="number">0x992eff74</span>, <span class="number">0x3a6f6eab</span>, <span class="number">0xf4f8fd37</span>,</span><br><span class="line"><span class="number">0xa812dc60</span>, <span class="number">0xa1ebddf8</span>, <span class="number">0x991be14c</span>, <span class="number">0xdb6e6b0d</span>,</span><br><span class="line"><span class="number">0xc67b5510</span>, <span class="number">0x6d672c37</span>, <span class="number">0x2765d43b</span>, <span class="number">0xdcd0e804</span>,</span><br><span class="line"><span class="number">0xf1290dc7</span>, <span class="number">0xcc00ffa3</span>, <span class="number">0xb5390f92</span>, <span class="number">0x690fed0b</span>,</span><br><span class="line"><span class="number">0x667b9ffb</span>, <span class="number">0xcedb7d9c</span>, <span class="number">0xa091cf0b</span>, <span class="number">0xd9155ea3</span>,</span><br><span class="line"><span class="number">0xbb132f88</span>, <span class="number">0x515bad24</span>, <span class="number">0x7b9479bf</span>, <span class="number">0x763bd6eb</span>,</span><br><span class="line"><span class="number">0x37392eb3</span>, <span class="number">0xcc115979</span>, <span class="number">0x8026e297</span>, <span class="number">0xf42e312d</span>,</span><br><span class="line"><span class="number">0x6842ada7</span>, <span class="number">0xc66a2b3b</span>, <span class="number">0x12754ccc</span>, <span class="number">0x782ef11c</span>,</span><br><span class="line"><span class="number">0x6a124237</span>, <span class="number">0xb79251e7</span>, <span class="number">0x06a1bbe6</span>, <span class="number">0x4bfb6350</span>,</span><br><span class="line"><span class="number">0x1a6b1018</span>, <span class="number">0x11caedfa</span>, <span class="number">0x3d25bdd8</span>, <span class="number">0xe2e1c3c9</span>,</span><br><span class="line"><span class="number">0x44421659</span>, <span class="number">0x0a121386</span>, <span class="number">0xd90cec6e</span>, <span class="number">0xd5abea2a</span>,</span><br><span class="line"><span class="number">0x64af674e</span>, <span class="number">0xda86a85f</span>, <span class="number">0xbebfe988</span>, <span class="number">0x64e4c3fe</span>,</span><br><span class="line"><span class="number">0x9dbc8057</span>, <span class="number">0xf0f7c086</span>, <span class="number">0x60787bf8</span>, <span class="number">0x6003604d</span>,</span><br><span class="line"><span class="number">0xd1fd8346</span>, <span class="number">0xf6381fb0</span>, <span class="number">0x7745ae04</span>, <span class="number">0xd736fccc</span>,</span><br><span class="line"><span class="number">0x83426b33</span>, <span class="number">0xf01eab71</span>, <span class="number">0xb0804187</span>, <span class="number">0x3c005e5f</span>,</span><br><span class="line"><span class="number">0x77a057be</span>, <span class="number">0xbde8ae24</span>, <span class="number">0x55464299</span>, <span class="number">0xbf582e61</span>,</span><br><span class="line"><span class="number">0x4e58f48f</span>, <span class="number">0xf2ddfda2</span>, <span class="number">0xf474ef38</span>, <span class="number">0x8789bdc2</span>,</span><br><span class="line"><span class="number">0x5366f9c3</span>, <span class="number">0xc8b38e74</span>, <span class="number">0xb475f255</span>, <span class="number">0x46fcd9b9</span>,</span><br><span class="line"><span class="number">0x7aeb2661</span>, <span class="number">0x8b1ddf84</span>, <span class="number">0x846a0e79</span>, <span class="number">0x915f95e2</span>,</span><br><span class="line"><span class="number">0x466e598e</span>, <span class="number">0x20b45770</span>, <span class="number">0x8cd55591</span>, <span class="number">0xc902de4c</span>,</span><br><span class="line"><span class="number">0xb90bace1</span>, <span class="number">0xbb8205d0</span>, <span class="number">0x11a86248</span>, <span class="number">0x7574a99e</span>,</span><br><span class="line"><span class="number">0xb77f19b6</span>, <span class="number">0xe0a9dc09</span>, <span class="number">0x662d09a1</span>, <span class="number">0xc4324633</span>,</span><br><span class="line"><span class="number">0xe85a1f02</span>, <span class="number">0x09f0be8c</span>, <span class="number">0x4a99a025</span>, <span class="number">0x1d6efe10</span>,</span><br><span class="line"><span class="number">0x1ab93d1d</span>, <span class="number">0x0ba5a4df</span>, <span class="number">0xa186f20f</span>, <span class="number">0x2868f169</span>,</span><br><span class="line"><span class="number">0xdcb7da83</span>, <span class="number">0x573906fe</span>, <span class="number">0xa1e2ce9b</span>, <span class="number">0x4fcd7f52</span>,</span><br><span class="line"><span class="number">0x50115e01</span>, <span class="number">0xa70683fa</span>, <span class="number">0xa002b5c4</span>, <span class="number">0x0de6d027</span>,</span><br><span class="line"><span class="number">0x9af88c27</span>, <span class="number">0x773f8641</span>, <span class="number">0xc3604c06</span>, <span class="number">0x61a806b5</span>,</span><br><span class="line"><span class="number">0xf0177a28</span>, <span class="number">0xc0f586e0</span>, <span class="number">0x006058aa</span>, <span class="number">0x30dc7d62</span>,</span><br><span class="line"><span class="number">0x11e69ed7</span>, <span class="number">0x2338ea63</span>, <span class="number">0x53c2dd94</span>, <span class="number">0xc2c21634</span>,</span><br><span class="line"><span class="number">0xbbcbee56</span>, <span class="number">0x90bcb6de</span>, <span class="number">0xebfc7da1</span>, <span class="number">0xce591d76</span>,</span><br><span class="line"><span class="number">0x6f05e409</span>, <span class="number">0x4b7c0188</span>, <span class="number">0x39720a3d</span>, <span class="number">0x7c927c24</span>,</span><br><span class="line"><span class="number">0x86e3725f</span>, <span class="number">0x724d9db9</span>, <span class="number">0x1ac15bb4</span>, <span class="number">0xd39eb8fc</span>,</span><br><span class="line"><span class="number">0xed545578</span>, <span class="number">0x08fca5b5</span>, <span class="number">0xd83d7cd3</span>, <span class="number">0x4dad0fc4</span>,</span><br><span class="line"><span class="number">0x1e50ef5e</span>, <span class="number">0xb161e6f8</span>, <span class="number">0xa28514d9</span>, <span class="number">0x6c51133c</span>,</span><br><span class="line"><span class="number">0x6fd5c7e7</span>, <span class="number">0x56e14ec4</span>, <span class="number">0x362abfce</span>, <span class="number">0xddc6c837</span>,</span><br><span class="line"><span class="number">0xd79a3234</span>, <span class="number">0x92638212</span>, <span class="number">0x670efa8e</span>, <span class="number">0x406000e0</span>,</span><br><span class="line"><span class="number">0x3a39ce37</span>, <span class="number">0xd3faf5cf</span>, <span class="number">0xabc27737</span>, <span class="number">0x5ac52d1b</span>,</span><br><span class="line"><span class="number">0x5cb0679e</span>, <span class="number">0x4fa33742</span>, <span class="number">0xd3822740</span>, <span class="number">0x99bc9bbe</span>,</span><br><span class="line"><span class="number">0xd5118e9d</span>, <span class="number">0xbf0f7315</span>, <span class="number">0xd62d1c7e</span>, <span class="number">0xc700c47b</span>,</span><br><span class="line"><span class="number">0xb78c1b6b</span>, <span class="number">0x21a19045</span>, <span class="number">0xb26eb1be</span>, <span class="number">0x6a366eb4</span>,</span><br><span class="line"><span class="number">0x5748ab2f</span>, <span class="number">0xbc946e79</span>, <span class="number">0xc6a376d2</span>, <span class="number">0x6549c2c8</span>,</span><br><span class="line"><span class="number">0x530ff8ee</span>, <span class="number">0x468dde7d</span>, <span class="number">0xd5730a1d</span>, <span class="number">0x4cd04dc6</span>,</span><br><span class="line"><span class="number">0x2939bbdb</span>, <span class="number">0xa9ba4650</span>, <span class="number">0xac9526e8</span>, <span class="number">0xbe5ee304</span>,</span><br><span class="line"><span class="number">0xa1fad5f0</span>, <span class="number">0x6a2d519a</span>, <span class="number">0x63ef8ce2</span>, <span class="number">0x9a86ee22</span>,</span><br><span class="line"><span class="number">0xc089c2b8</span>, <span class="number">0x43242ef6</span>, <span class="number">0xa51e03aa</span>, <span class="number">0x9cf2d0a4</span>,</span><br><span class="line"><span class="number">0x83c061ba</span>, <span class="number">0x9be96a4d</span>, <span class="number">0x8fe51550</span>, <span class="number">0xba645bd6</span>,</span><br><span class="line"><span class="number">0x2826a2f9</span>, <span class="number">0xa73a3ae1</span>, <span class="number">0x4ba99586</span>, <span class="number">0xef5562e9</span>,</span><br><span class="line"><span class="number">0xc72fefd3</span>, <span class="number">0xf752f7da</span>, <span class="number">0x3f046f69</span>, <span class="number">0x77fa0a59</span>,</span><br><span class="line"><span class="number">0x80e4a915</span>, <span class="number">0x87b08601</span>, <span class="number">0x9b09e6ad</span>, <span class="number">0x3b3ee593</span>,</span><br><span class="line"><span class="number">0xe990fd5a</span>, <span class="number">0x9e34d797</span>, <span class="number">0x2cf0b7d9</span>, <span class="number">0x022b8b51</span>,</span><br><span class="line"><span class="number">0x96d5ac3a</span>, <span class="number">0x017da67d</span>, <span class="number">0xd1cf3ed6</span>, <span class="number">0x7c7d2d28</span>,</span><br><span class="line"><span class="number">0x1f9f25cf</span>, <span class="number">0xadf2b89b</span>, <span class="number">0x5ad6b472</span>, <span class="number">0x5a88f54c</span>,</span><br><span class="line"><span class="number">0xe029ac71</span>, <span class="number">0xe019a5e6</span>, <span class="number">0x47b0acfd</span>, <span class="number">0xed93fa9b</span>,</span><br><span class="line"><span class="number">0xe8d3c48d</span>, <span class="number">0x283b57cc</span>, <span class="number">0xf8d56629</span>, <span class="number">0x79132e28</span>,</span><br><span class="line"><span class="number">0x785f0191</span>, <span class="number">0xed756055</span>, <span class="number">0xf7960e44</span>, <span class="number">0xe3d35e8c</span>,</span><br><span class="line"><span class="number">0x15056dd4</span>, <span class="number">0x88f46dba</span>, <span class="number">0x03a16125</span>, <span class="number">0x0564f0bd</span>,</span><br><span class="line"><span class="number">0xc3eb9e15</span>, <span class="number">0x3c9057a2</span>, <span class="number">0x97271aec</span>, <span class="number">0xa93a072a</span>,</span><br><span class="line"><span class="number">0x1b3f6d9b</span>, <span class="number">0x1e6321f5</span>, <span class="number">0xf59c66fb</span>, <span class="number">0x26dcf319</span>,</span><br><span class="line"><span class="number">0x7533d928</span>, <span class="number">0xb155fdf5</span>, <span class="number">0x03563482</span>, <span class="number">0x8aba3cbb</span>,</span><br><span class="line"><span class="number">0x28517711</span>, <span class="number">0xc20ad9f8</span>, <span class="number">0xabcc5167</span>, <span class="number">0xccad925f</span>,</span><br><span class="line"><span class="number">0x4de81751</span>, <span class="number">0x3830dc8e</span>, <span class="number">0x379d5862</span>, <span class="number">0x9320f991</span>,</span><br><span class="line"><span class="number">0xea7a90c2</span>, <span class="number">0xfb3e7bce</span>, <span class="number">0x5121ce64</span>, <span class="number">0x774fbe32</span>,</span><br><span class="line"><span class="number">0xa8b6e37e</span>, <span class="number">0xc3293d46</span>, <span class="number">0x48de5369</span>, <span class="number">0x6413e680</span>,</span><br><span class="line"><span class="number">0xa2ae0810</span>, <span class="number">0xdd6db224</span>, <span class="number">0x69852dfd</span>, <span class="number">0x09072166</span>,</span><br><span class="line"><span class="number">0xb39a460a</span>, <span class="number">0x6445c0dd</span>, <span class="number">0x586cdecf</span>, <span class="number">0x1c20c8ae</span>,</span><br><span class="line"><span class="number">0x5bbef7dd</span>, <span class="number">0x1b588d40</span>, <span class="number">0xccd2017f</span>, <span class="number">0x6bb4e3bb</span>,</span><br><span class="line"><span class="number">0xdda26a7e</span>, <span class="number">0x3a59ff45</span>, <span class="number">0x3e350a44</span>, <span class="number">0xbcb4cdd5</span>,</span><br><span class="line"><span class="number">0x72eacea8</span>, <span class="number">0xfa6484bb</span>, <span class="number">0x8d6612ae</span>, <span class="number">0xbf3c6f47</span>,</span><br><span class="line"><span class="number">0xd29be463</span>, <span class="number">0x542f5d9e</span>, <span class="number">0xaec2771b</span>, <span class="number">0xf64e6370</span>,</span><br><span class="line"><span class="number">0x740e0d8d</span>, <span class="number">0xe75b1357</span>, <span class="number">0xf8721671</span>, <span class="number">0xaf537d5d</span>,</span><br><span class="line"><span class="number">0x4040cb08</span>, <span class="number">0x4eb4e2cc</span>, <span class="number">0x34d2466a</span>, <span class="number">0x0115af84</span>,</span><br><span class="line"><span class="number">0xe1b00428</span>, <span class="number">0x95983a1d</span>, <span class="number">0x06b89fb4</span>, <span class="number">0xce6ea048</span>,</span><br><span class="line"><span class="number">0x6f3f3b82</span>, <span class="number">0x3520ab82</span>, <span class="number">0x011a1d4b</span>, <span class="number">0x277227f8</span>,</span><br><span class="line"><span class="number">0x611560b1</span>, <span class="number">0xe7933fdc</span>, <span class="number">0xbb3a792b</span>, <span class="number">0x344525bd</span>,</span><br><span class="line"><span class="number">0xa08839e1</span>, <span class="number">0x51ce794b</span>, <span class="number">0x2f32c9b7</span>, <span class="number">0xa01fbac9</span>,</span><br><span class="line"><span class="number">0xe01cc87e</span>, <span class="number">0xbcc7d1f6</span>, <span class="number">0xcf0111c3</span>, <span class="number">0xa1e8aac7</span>,</span><br><span class="line"><span class="number">0x1a908749</span>, <span class="number">0xd44fbd9a</span>, <span class="number">0xd0dadecb</span>, <span class="number">0xd50ada38</span>,</span><br><span class="line"><span class="number">0x0339c32a</span>, <span class="number">0xc6913667</span>, <span class="number">0x8df9317c</span>, <span class="number">0xe0b12b4f</span>,</span><br><span class="line"><span class="number">0xf79e59b7</span>, <span class="number">0x43f5bb3a</span>, <span class="number">0xf2d519ff</span>, <span class="number">0x27d9459c</span>,</span><br><span class="line"><span class="number">0xbf97222c</span>, <span class="number">0x15e6fc2a</span>, <span class="number">0x0f91fc71</span>, <span class="number">0x9b941525</span>,</span><br><span class="line"><span class="number">0xfae59361</span>, <span class="number">0xceb69ceb</span>, <span class="number">0xc2a86459</span>, <span class="number">0x12baa8d1</span>,</span><br><span class="line"><span class="number">0xb6c1075e</span>, <span class="number">0xe3056a0c</span>, <span class="number">0x10d25065</span>, <span class="number">0xcb03a442</span>,</span><br><span class="line"><span class="number">0xe0ec6e0e</span>, <span class="number">0x1698db3b</span>, <span class="number">0x4c98a0be</span>, <span class="number">0x3278e964</span>,</span><br><span class="line"><span class="number">0x9f1f9532</span>, <span class="number">0xe0d392df</span>, <span class="number">0xd3a0342b</span>, <span class="number">0x8971f21e</span>,</span><br><span class="line"><span class="number">0x1b0a7441</span>, <span class="number">0x4ba3348c</span>, <span class="number">0xc5be7120</span>, <span class="number">0xc37632d8</span>,</span><br><span class="line"><span class="number">0xdf359f8d</span>, <span class="number">0x9b992f2e</span>, <span class="number">0xe60b6f47</span>, <span class="number">0x0fe3f11d</span>,</span><br><span class="line"><span class="number">0xe54cda54</span>, <span class="number">0x1edad891</span>, <span class="number">0xce6279cf</span>, <span class="number">0xcd3e7e6f</span>,</span><br><span class="line"><span class="number">0x1618b166</span>, <span class="number">0xfd2c1d05</span>, <span class="number">0x848fd2c5</span>, <span class="number">0xf6fb2299</span>,</span><br><span class="line"><span class="number">0xf523f357</span>, <span class="number">0xa6327623</span>, <span class="number">0x93a83531</span>, <span class="number">0x56cccd02</span>,</span><br><span class="line"><span class="number">0xacf08162</span>, <span class="number">0x5a75ebb5</span>, <span class="number">0x6e163697</span>, <span class="number">0x88d273cc</span>,</span><br><span class="line"><span class="number">0xde966292</span>, <span class="number">0x81b949d0</span>, <span class="number">0x4c50901b</span>, <span class="number">0x71c65614</span>,</span><br><span class="line"><span class="number">0xe6c6c7bd</span>, <span class="number">0x327a140a</span>, <span class="number">0x45e1d006</span>, <span class="number">0xc3f27b9a</span>,</span><br><span class="line"><span class="number">0xc9aa53fd</span>, <span class="number">0x62a80f00</span>, <span class="number">0xbb25bfe2</span>, <span class="number">0x35bdd2f6</span>,</span><br><span class="line"><span class="number">0x71126905</span>, <span class="number">0xb2040222</span>, <span class="number">0xb6cbcf7c</span>, <span class="number">0xcd769c2b</span>,</span><br><span class="line"><span class="number">0x53113ec0</span>, <span class="number">0x1640e3d3</span>, <span class="number">0x38abbd60</span>, <span class="number">0x2547adf0</span>,</span><br><span class="line"><span class="number">0xba38209c</span>, <span class="number">0xf746ce76</span>, <span class="number">0x77afa1c5</span>, <span class="number">0x20756060</span>,</span><br><span class="line"><span class="number">0x85cbfe4e</span>, <span class="number">0x8ae88dd8</span>, <span class="number">0x7aaaf9b0</span>, <span class="number">0x4cf9aa7e</span>,</span><br><span class="line"><span class="number">0x1948c25c</span>, <span class="number">0x02fb8a8c</span>, <span class="number">0x01c36ae4</span>, <span class="number">0xd6ebe1f9</span>,</span><br><span class="line"><span class="number">0x90d4f869</span>, <span class="number">0xa65cdea0</span>, <span class="number">0x3f09252d</span>, <span class="number">0xc208e69f</span>,</span><br><span class="line"><span class="number">0xb74e6132</span>, <span class="number">0xce77e25b</span>, <span class="number">0x578fdfe3</span>, <span class="number">0x3ac372e6</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bcrypt IV: &quot;OrpheanBeholderScryDoubt&quot;. The C implementation calls</span></span><br><span class="line"><span class="comment">// this &quot;ciphertext&quot;, but it is really plaintext or an IV. We keep</span></span><br><span class="line"><span class="comment">// the name to make code comparison easier.</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> bf_crypt_ciphertext[] = &#123;</span><br><span class="line"><span class="number">0x4f727068</span>, <span class="number">0x65616e42</span>, <span class="number">0x65686f6c</span>,</span><br><span class="line"><span class="number">0x64657253</span>, <span class="number">0x63727944</span>, <span class="number">0x6f756274</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Table for Base64 encoding</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> base64_code[] = &#123;</span><br><span class="line"><span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Table for Base64 decoding</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span> index_64[] = &#123;</span><br><span class="line">-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>,</span><br><span class="line">-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>,</span><br><span class="line">-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>,</span><br><span class="line">-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>,</span><br><span class="line">-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">54</span>, <span class="number">55</span>,</span><br><span class="line"><span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, -<span class="number">1</span>, -<span class="number">1</span>,</span><br><span class="line">-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,</span><br><span class="line"><span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>,</span><br><span class="line"><span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>,</span><br><span class="line">-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>,</span><br><span class="line"><span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>,</span><br><span class="line"><span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>,</span><br><span class="line"><span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Expanded Blowfish key</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> P[];</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> S[];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Encode a byte array using bcrypt&#x27;s slightly-modified base64</span></span><br><span class="line"><span class="comment"> * encoding scheme. Note that this is *not* compatible with</span></span><br><span class="line"><span class="comment"> * the standard MIME-base64 encoding.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dthe byte array to encode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> lenthe number of bytes to encode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>base64-encoded string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span> IllegalArgumentException if the length is invalid</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">encode_base64</span><span class="params">(<span class="keyword">byte</span> d[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line"><span class="keyword">int</span> off = <span class="number">0</span>;</span><br><span class="line">StringBuffer rs = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">int</span> c1, c2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (len &lt;= <span class="number">0</span> || len &gt; d.length)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException (<span class="string">&quot;Invalid len&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (off &lt; len) &#123;</span><br><span class="line">c1 = d[off++] &amp; <span class="number">0xff</span>;</span><br><span class="line">rs.append(base64_code[(c1 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3f</span>]);</span><br><span class="line">c1 = (c1 &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span> (off &gt;= len) &#123;</span><br><span class="line">rs.append(base64_code[c1 &amp; <span class="number">0x3f</span>]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">c2 = d[off++] &amp; <span class="number">0xff</span>;</span><br><span class="line">c1 |= (c2 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f</span>;</span><br><span class="line">rs.append(base64_code[c1 &amp; <span class="number">0x3f</span>]);</span><br><span class="line">c1 = (c2 &amp; <span class="number">0x0f</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (off &gt;= len) &#123;</span><br><span class="line">rs.append(base64_code[c1 &amp; <span class="number">0x3f</span>]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">c2 = d[off++] &amp; <span class="number">0xff</span>;</span><br><span class="line">c1 |= (c2 &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x03</span>;</span><br><span class="line">rs.append(base64_code[c1 &amp; <span class="number">0x3f</span>]);</span><br><span class="line">rs.append(base64_code[c2 &amp; <span class="number">0x3f</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rs.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Look up the 3 bits base64-encoded by the specified character,</span></span><br><span class="line"><span class="comment"> * range-checking againt conversion table</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> xthe base64-encoded value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>the decoded value of x</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span> <span class="title">char64</span><span class="params">(<span class="keyword">char</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">int</span>)x &lt; <span class="number">0</span> || (<span class="keyword">int</span>)x &gt; index_64.length)</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> index_64[(<span class="keyword">int</span>)x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Decode a string encoded using bcrypt&#x27;s base64 scheme to a</span></span><br><span class="line"><span class="comment"> * byte array. Note that this is *not* compatible with</span></span><br><span class="line"><span class="comment"> * the standard MIME-base64 encoding.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sthe string to decode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> maxolenthe maximum number of bytes to decode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>an array containing the decoded bytes</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if maxolen is invalid</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decode_base64(String s, <span class="keyword">int</span> maxolen)</span><br><span class="line"><span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">StringBuffer rs = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">int</span> off = <span class="number">0</span>, slen = s.length(), olen = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">byte</span> ret[];</span><br><span class="line"><span class="keyword">byte</span> c1, c2, c3, c4, o;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (maxolen &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException (<span class="string">&quot;Invalid maxolen&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (off &lt; slen - <span class="number">1</span> &amp;&amp; olen &lt; maxolen) &#123;</span><br><span class="line">c1 = char64(s.charAt(off++));</span><br><span class="line">c2 = char64(s.charAt(off++));</span><br><span class="line"><span class="keyword">if</span> (c1 == -<span class="number">1</span> || c2 == -<span class="number">1</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">o = (<span class="keyword">byte</span>)(c1 &lt;&lt; <span class="number">2</span>);</span><br><span class="line">o |= (c2 &amp; <span class="number">0x30</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">rs.append((<span class="keyword">char</span>)o);</span><br><span class="line"><span class="keyword">if</span> (++olen &gt;= maxolen || off &gt;= slen)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">c3 = char64(s.charAt(off++));</span><br><span class="line"><span class="keyword">if</span> (c3 == -<span class="number">1</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">o = (<span class="keyword">byte</span>)((c2 &amp; <span class="number">0x0f</span>) &lt;&lt; <span class="number">4</span>);</span><br><span class="line">o |= (c3 &amp; <span class="number">0x3c</span>) &gt;&gt; <span class="number">2</span>;</span><br><span class="line">rs.append((<span class="keyword">char</span>)o);</span><br><span class="line"><span class="keyword">if</span> (++olen &gt;= maxolen || off &gt;= slen)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">c4 = char64(s.charAt(off++));</span><br><span class="line">o = (<span class="keyword">byte</span>)((c3 &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">6</span>);</span><br><span class="line">o |= c4;</span><br><span class="line">rs.append((<span class="keyword">char</span>)o);</span><br><span class="line">++olen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = <span class="keyword">new</span> <span class="keyword">byte</span>[olen];</span><br><span class="line"><span class="keyword">for</span> (off = <span class="number">0</span>; off &lt; olen; off++)</span><br><span class="line">ret[off] = (<span class="keyword">byte</span>)rs.charAt(off);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Blowfish encipher a single 64-bit block encoded as</span></span><br><span class="line"><span class="comment"> * two 32-bit halves</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> lran array containing the two 32-bit half blocks</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> offthe position in the array of the blocks</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">encipher</span><span class="params">(<span class="keyword">int</span> lr[], <span class="keyword">int</span> off)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, n, l = lr[off], r = lr[off + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">l ^= P[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= BLOWFISH_NUM_ROUNDS - <span class="number">2</span>;) &#123;</span><br><span class="line"><span class="comment">// Feistel substitution on left word</span></span><br><span class="line">n = S[(l &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>];</span><br><span class="line">n += S[<span class="number">0x100</span> | ((l &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>)];</span><br><span class="line">n ^= S[<span class="number">0x200</span> | ((l &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>)];</span><br><span class="line">n += S[<span class="number">0x300</span> | (l &amp; <span class="number">0xff</span>)];</span><br><span class="line">r ^= n ^ P[++i];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Feistel substitution on right word</span></span><br><span class="line">n = S[(r &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>];</span><br><span class="line">n += S[<span class="number">0x100</span> | ((r &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>)];</span><br><span class="line">n ^= S[<span class="number">0x200</span> | ((r &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>)];</span><br><span class="line">n += S[<span class="number">0x300</span> | (r &amp; <span class="number">0xff</span>)];</span><br><span class="line">l ^= n ^ P[++i];</span><br><span class="line">&#125;</span><br><span class="line">lr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + <span class="number">1</span>];</span><br><span class="line">lr[off + <span class="number">1</span>] = l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cycically extract a word of key material</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> datathe string to extract the data from</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> offpa &quot;pointer&quot; (as a one-entry array) to the</span></span><br><span class="line"><span class="comment"> * current offset into data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>the next word of material from data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">streamtoword</span><span class="params">(<span class="keyword">byte</span> data[], <span class="keyword">int</span> offp[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> word = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> off = offp[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">word = (word &lt;&lt; <span class="number">8</span>) | (data[off] &amp; <span class="number">0xff</span>);</span><br><span class="line">off = (off + <span class="number">1</span>) % data.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">offp[<span class="number">0</span>] = off;</span><br><span class="line"><span class="keyword">return</span> word;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialise the Blowfish key schedule</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init_key</span><span class="params">()</span> </span>&#123;</span><br><span class="line">P = (<span class="keyword">int</span>[])P_orig.clone();</span><br><span class="line">S = (<span class="keyword">int</span>[])S_orig.clone();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Key the Blowfish cipher</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyan array containing the key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">key</span><span class="params">(<span class="keyword">byte</span> key[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> koffp[] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> lr[] = &#123; <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> plen = P.length, slen = S.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plen; i++)</span><br><span class="line">P[i] = P[i] ^ streamtoword(key, koffp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plen; i += <span class="number">2</span>) &#123;</span><br><span class="line">encipher(lr, <span class="number">0</span>);</span><br><span class="line">P[i] = lr[<span class="number">0</span>];</span><br><span class="line">P[i + <span class="number">1</span>] = lr[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; slen; i += <span class="number">2</span>) &#123;</span><br><span class="line">encipher(lr, <span class="number">0</span>);</span><br><span class="line">S[i] = lr[<span class="number">0</span>];</span><br><span class="line">S[i + <span class="number">1</span>] = lr[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Perform the &quot;enhanced key schedule&quot; step described by</span></span><br><span class="line"><span class="comment"> * Provos and Mazieres in &quot;A Future-Adaptable Password Scheme&quot;</span></span><br><span class="line"><span class="comment"> * http://www.openbsd.org/papers/bcrypt-paper.ps</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> datasalt information</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keypassword information</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ekskey</span><span class="params">(<span class="keyword">byte</span> data[], <span class="keyword">byte</span> key[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> koffp[] = &#123; <span class="number">0</span> &#125;, doffp[] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> lr[] = &#123; <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> plen = P.length, slen = S.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plen; i++)</span><br><span class="line">P[i] = P[i] ^ streamtoword(key, koffp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plen; i += <span class="number">2</span>) &#123;</span><br><span class="line">lr[<span class="number">0</span>] ^= streamtoword(data, doffp);</span><br><span class="line">lr[<span class="number">1</span>] ^= streamtoword(data, doffp);</span><br><span class="line">encipher(lr, <span class="number">0</span>);</span><br><span class="line">P[i] = lr[<span class="number">0</span>];</span><br><span class="line">P[i + <span class="number">1</span>] = lr[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; slen; i += <span class="number">2</span>) &#123;</span><br><span class="line">lr[<span class="number">0</span>] ^= streamtoword(data, doffp);</span><br><span class="line">lr[<span class="number">1</span>] ^= streamtoword(data, doffp);</span><br><span class="line">encipher(lr, <span class="number">0</span>);</span><br><span class="line">S[i] = lr[<span class="number">0</span>];</span><br><span class="line">S[i + <span class="number">1</span>] = lr[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Perform the central password hashing step in the</span></span><br><span class="line"><span class="comment"> * bcrypt scheme</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> passwordthe password to hash</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> saltthe binary salt to hash with the password</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> log_roundsthe binary logarithm of the number</span></span><br><span class="line"><span class="comment"> * of rounds of hashing to apply</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cdata         the plaintext to encrypt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>an array containing the binary hashed password</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] crypt_raw(<span class="keyword">byte</span> password[], <span class="keyword">byte</span> salt[], <span class="keyword">int</span> log_rounds,</span><br><span class="line">    <span class="keyword">int</span> cdata[]) &#123;</span><br><span class="line"><span class="keyword">int</span> rounds, i, j;</span><br><span class="line"><span class="keyword">int</span> clen = cdata.length;</span><br><span class="line"><span class="keyword">byte</span> ret[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (log_rounds &lt; <span class="number">4</span> || log_rounds &gt; <span class="number">30</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException (<span class="string">&quot;Bad number of rounds&quot;</span>);</span><br><span class="line">rounds = <span class="number">1</span> &lt;&lt; log_rounds;</span><br><span class="line"><span class="keyword">if</span> (salt.length != BCRYPT_SALT_LEN)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException (<span class="string">&quot;Bad salt length&quot;</span>);</span><br><span class="line"></span><br><span class="line">init_key();</span><br><span class="line">ekskey(salt, password);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i != rounds; i++) &#123;</span><br><span class="line">key(password);</span><br><span class="line">key(salt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; (clen &gt;&gt; <span class="number">1</span>); j++)</span><br><span class="line">encipher(cdata, j &lt;&lt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = <span class="keyword">new</span> <span class="keyword">byte</span>[clen * <span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; clen; i++) &#123;</span><br><span class="line">ret[j++] = (<span class="keyword">byte</span>)((cdata[i] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">ret[j++] = (<span class="keyword">byte</span>)((cdata[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">ret[j++] = (<span class="keyword">byte</span>)((cdata[i] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">ret[j++] = (<span class="keyword">byte</span>)(cdata[i] &amp; <span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hash a password using the OpenBSD bcrypt scheme</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> passwordthe password to hash</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> saltthe salt to hash with (perhaps generated</span></span><br><span class="line"><span class="comment"> * using BCrypt.gensalt)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>the hashed password</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">hashpw</span><span class="params">(String password, String salt)</span> </span>&#123;</span><br><span class="line">BCrypt B;</span><br><span class="line">String real_salt;</span><br><span class="line"><span class="keyword">byte</span> passwordb[], saltb[], hashed[];</span><br><span class="line"><span class="keyword">char</span> minor = (<span class="keyword">char</span>)<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> rounds, off = <span class="number">0</span>;</span><br><span class="line">StringBuffer rs = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (salt.charAt(<span class="number">0</span>) != <span class="string">&#x27;$&#x27;</span> || salt.charAt(<span class="number">1</span>) != <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException (<span class="string">&quot;Invalid salt version&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (salt.charAt(<span class="number">2</span>) == <span class="string">&#x27;$&#x27;</span>)</span><br><span class="line">off = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">minor = salt.charAt(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (minor != <span class="string">&#x27;a&#x27;</span> || salt.charAt(<span class="number">3</span>) != <span class="string">&#x27;$&#x27;</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException (<span class="string">&quot;Invalid salt revision&quot;</span>);</span><br><span class="line">off = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Extract number of rounds</span></span><br><span class="line"><span class="keyword">if</span> (salt.charAt(off + <span class="number">2</span>) &gt; <span class="string">&#x27;$&#x27;</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException (<span class="string">&quot;Missing salt rounds&quot;</span>);</span><br><span class="line">rounds = Integer.parseInt(salt.substring(off, off + <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">real_salt = salt.substring(off + <span class="number">3</span>, off + <span class="number">25</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">passwordb = (password + (minor &gt;= <span class="string">&#x27;a&#x27;</span> ? <span class="string">&quot;\000&quot;</span> : <span class="string">&quot;&quot;</span>)).getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException uee) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">&quot;UTF-8 is not supported&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">saltb = decode_base64(real_salt, BCRYPT_SALT_LEN);</span><br><span class="line"></span><br><span class="line">B = <span class="keyword">new</span> BCrypt();</span><br><span class="line">hashed = B.crypt_raw(passwordb, saltb, rounds,</span><br><span class="line">    (<span class="keyword">int</span>[])bf_crypt_ciphertext.clone());</span><br><span class="line"></span><br><span class="line">rs.append(<span class="string">&quot;$2&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (minor &gt;= <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">rs.append(minor);</span><br><span class="line">rs.append(<span class="string">&quot;$&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (rounds &lt; <span class="number">10</span>)</span><br><span class="line">rs.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (rounds &gt; <span class="number">30</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">    <span class="string">&quot;rounds exceeds maximum (30)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">rs.append(Integer.toString(rounds));</span><br><span class="line">rs.append(<span class="string">&quot;$&quot;</span>);</span><br><span class="line">rs.append(encode_base64(saltb, saltb.length));</span><br><span class="line">rs.append(encode_base64(hashed,</span><br><span class="line">    bf_crypt_ciphertext.length * <span class="number">4</span> - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> rs.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generate a salt for use with the BCrypt.hashpw() method</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> log_roundsthe log2 of the number of rounds of</span></span><br><span class="line"><span class="comment"> * hashing to apply - the work factor therefore increases as</span></span><br><span class="line"><span class="comment"> * 2**log_rounds.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> randoman instance of SecureRandom to use</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>an encoded salt value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">gensalt</span><span class="params">(<span class="keyword">int</span> log_rounds, SecureRandom random)</span> </span>&#123;</span><br><span class="line">StringBuffer rs = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">byte</span> rnd[] = <span class="keyword">new</span> <span class="keyword">byte</span>[BCRYPT_SALT_LEN];</span><br><span class="line"></span><br><span class="line">random.nextBytes(rnd);</span><br><span class="line"></span><br><span class="line">rs.append(<span class="string">&quot;$2a$&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (log_rounds &lt; <span class="number">10</span>)</span><br><span class="line">rs.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (log_rounds &gt; <span class="number">30</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">    <span class="string">&quot;log_rounds exceeds maximum (30)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">rs.append(Integer.toString(log_rounds));</span><br><span class="line">rs.append(<span class="string">&quot;$&quot;</span>);</span><br><span class="line">rs.append(encode_base64(rnd, rnd.length));</span><br><span class="line"><span class="keyword">return</span> rs.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generate a salt for use with the BCrypt.hashpw() method</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> log_roundsthe log2 of the number of rounds of</span></span><br><span class="line"><span class="comment"> * hashing to apply - the work factor therefore increases as</span></span><br><span class="line"><span class="comment"> * 2**log_rounds.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>an encoded salt value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">gensalt</span><span class="params">(<span class="keyword">int</span> log_rounds)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gensalt(log_rounds, <span class="keyword">new</span> SecureRandom());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generate a salt for use with the BCrypt.hashpw() method,</span></span><br><span class="line"><span class="comment"> * selecting a reasonable default for the number of hashing</span></span><br><span class="line"><span class="comment"> * rounds to apply</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>an encoded salt value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">gensalt</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gensalt(GENSALT_DEFAULT_LOG2_ROUNDS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Check that a plaintext password matches a previously hashed</span></span><br><span class="line"><span class="comment"> * one</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> plaintextthe plaintext password to verify</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hashedthe previously-hashed password</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>true if the passwords match, false otherwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkpw</span><span class="params">(String plaintext, String hashed)</span> </span>&#123;</span><br><span class="line"><span class="keyword">byte</span> hashed_bytes[];</span><br><span class="line"><span class="keyword">byte</span> try_bytes[];</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">String try_pw = hashpw(plaintext, hashed);</span><br><span class="line">hashed_bytes = hashed.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">try_bytes = try_pw.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException uee) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (hashed_bytes.length != try_bytes.length)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">byte</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; try_bytes.length; i++)</span><br><span class="line">ret |= hashed_bytes[i] ^ try_bytes[i];</span><br><span class="line"><span class="keyword">return</span> ret == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Bcrypt </tag>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="2020/12/09/mybatis/"/>
      <url>2020/12/09/mybatis/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="mybatis中sql语句需要转义的字符"><a href="#mybatis中sql语句需要转义的字符" class="headerlink" title="mybatis中sql语句需要转义的字符"></a>mybatis中sql语句需要转义的字符</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&amp;lt; &lt;  </span><br><span class="line">&amp;gt; &gt;  </span><br><span class="line">&amp;lt;&amp;gt; &lt;&gt;  </span><br><span class="line">&amp;amp; &amp;  </span><br><span class="line">&amp;apos; <span class="string">&#x27;  </span></span><br><span class="line"><span class="string">&amp;quot; &quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><ol><li><h3 id="mybatis配置文件"><a href="#mybatis配置文件" class="headerlink" title="mybatis配置文件"></a>mybatis配置文件</h3> <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;  </span><br><span class="line">&lt;!DOCTYPE configuration  </span><br><span class="line">PUBLIC <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>  </span><br><span class="line"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;  </span><br><span class="line">&lt;configuration&gt;  </span><br><span class="line">  </span><br><span class="line">  &lt;!-- <span class="keyword">default</span>=<span class="string">&quot;online&quot;</span>连接线上数据库 --&gt;  </span><br><span class="line">  &lt;environments <span class="keyword">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;  </span><br><span class="line">  &lt;!--配置数据库连接环境--&gt;  </span><br><span class="line">  &lt;environment id=<span class="string">&quot;mysql&quot;</span>&gt;  </span><br><span class="line"> &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;  </span><br><span class="line">  &lt;!--数据源：driver、url、username、password--&gt;  </span><br><span class="line">  &lt;dataSource type=<span class="string">&quot;POOLED&quot;</span>&gt;  </span><br><span class="line"> &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;  </span><br><span class="line"> &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql:///person_info&quot;&gt;&lt;/property&gt;  </span><br><span class="line"> &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;  </span><br><span class="line"> &lt;property name=&quot;password&quot; value=&quot;1234&quot;&gt;&lt;/property&gt;  </span><br><span class="line"> &lt;/dataSource&gt; </span><br><span class="line"> &lt;/environment&gt; </span><br><span class="line"> &lt;/environments&gt;  </span><br><span class="line"> &lt;mappers&gt;</span><br><span class="line">  &lt;mapper resource=&quot;com/java/dao/impl/BookDaoImpl.xml&quot;&gt;&lt;/mapper&gt;  </span><br><span class="line"> &lt;/mappers&gt;  </span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><h3 id="dao层实现类配置文件"><a href="#dao层实现类配置文件" class="headerlink" title="dao层实现类配置文件"></a>dao层实现类配置文件</h3><p> 和实现类放在同一包下</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.dao.impl;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.java.pojo.Book;  </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;  </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;  </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;  </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;  </span><br><span class="line"><span class="keyword">import</span> org.junit.After;  </span><br><span class="line"><span class="keyword">import</span> org.junit.Before;  </span><br><span class="line"><span class="keyword">import</span> org.junit.Test;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> SqlSession sqlSession = <span class="keyword">null</span>;  </span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Before</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;  </span><br><span class="line">        <span class="comment">//SqlSession----&gt;SqlSessionFactory---&gt;SqlSessionFactoryBuilder  </span></span><br><span class="line"> <span class="comment">//1、得到SqlSessionFactoryBuilder对象  </span></span><br><span class="line">  SqlSessionFactoryBuilder ssfb = <span class="keyword">new</span> SqlSessionFactoryBuilder();  </span><br><span class="line">  <span class="comment">//2、通过SqlSessionFactoryBuilder对象得到SqlSessionFactory对象  </span></span><br><span class="line">  InputStream ins = Resources.getResourceAsStream(<span class="string">&quot;mybatis.xml&quot;</span>);  </span><br><span class="line">  SqlSessionFactory ssf = ssfb.build(ins);  </span><br><span class="line">  <span class="comment">//3、得到SqlSession对象  </span></span><br><span class="line">  sqlSession = ssf.openSession();  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 查询books表中的所有数据  </span></span><br><span class="line"><span class="comment">  */</span>  </span><br><span class="line">  <span class="meta">@Test</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectBooks</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;  </span><br><span class="line">        <span class="comment">//4、执行对应的sql语句，接收结果，对结果进行遍历  </span></span><br><span class="line">  <span class="comment">//参数为dao层实现类namespace和其中的方法  </span></span><br><span class="line">  List&lt;Map&lt;String,Object&gt;&gt; bookList = sqlSession.selectList(<span class="string">&quot;com.java.dao.impl.BookDaoImpl.selectBooks&quot;</span>);  </span><br><span class="line">  bookList.forEach(temp-&gt; System.out.println(temp));  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select1</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        Map&lt;String,Object&gt; bookMap = sqlSession.selectOne(<span class="string">&quot;com.java.dao.impl.BookDaoImpl.select1&quot;</span>,<span class="number">1l</span>);  </span><br><span class="line"> <span class="keyword">if</span> (bookMap!=<span class="keyword">null</span>)  </span><br><span class="line">            bookMap.forEach((k,v)-&gt; System.out.println(k+<span class="string">&quot;,&quot;</span>+v));  </span><br><span class="line"> <span class="keyword">else</span>  System.out.println(<span class="string">&quot;亲，您在逗我玩吗？没有此记录&quot;</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select2</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">//将多个参数封装到Map集合中  </span></span><br><span class="line">  <span class="comment">/*Map&lt;String,Object&gt; paramMap = new HashMap&lt;&gt;();  </span></span><br><span class="line"><span class="comment"> paramMap.put(&quot;price&quot;,50F); paramMap.put(&quot;num&quot;,10);*/</span>  Book book = <span class="keyword">new</span> Book();  </span><br><span class="line">  book.setPrice(<span class="number">50F</span>);  </span><br><span class="line">  book.setNum(<span class="number">10</span>);  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//List&lt;Map&lt;String,Object&gt;&gt; bookList = sqlSession.selectList(&quot;com.java.dao.impl.BookDaoImpl.select2&quot;,paramMap);  </span></span><br><span class="line"> <span class="comment">//List&lt;Map&lt;String,Object&gt;&gt; bookList = sqlSession.selectList(&quot;com.java.dao.impl.BookDaoImpl.select2&quot;,book);  List&lt;Book&gt; bookList = sqlSession.selectList(&quot;com.java.dao.impl.BookDaoImpl.select2&quot;,book);  </span></span><br><span class="line">  System.out.println(bookList);  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//---------------------------添加数据-----------------------------------  </span></span><br><span class="line">  <span class="meta">@Test</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertOne</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        Map&lt;String,Object&gt; paramMap = <span class="keyword">new</span> HashMap&lt;&gt;();  </span><br><span class="line">  paramMap.put(<span class="string">&quot;price&quot;</span>,<span class="number">50F</span>);  </span><br><span class="line">  paramMap.put(<span class="string">&quot;bookName&quot;</span>,<span class="string">&quot;Mybatis-愤怒的小鸟&quot;</span>);  </span><br><span class="line">  paramMap.put(<span class="string">&quot;num&quot;</span>,<span class="number">10</span>);  </span><br><span class="line"> <span class="keyword">int</span> flag = sqlSession.insert(<span class="string">&quot;com.java.dao.impl.BookDaoImpl.insertOne&quot;</span>,paramMap);  </span><br><span class="line">  System.out.println(<span class="string">&quot;flag=&quot;</span>+flag);  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//删除数据  </span></span><br><span class="line">  <span class="meta">@Test</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteOne</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> flag = sqlSession.delete(<span class="string">&quot;com.java.dao.impl.BookDaoImpl.deleteOne&quot;</span>,<span class="number">11l</span>);  </span><br><span class="line">  System.out.println(<span class="string">&quot;flag=&quot;</span>+flag);  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//修改数据  </span></span><br><span class="line">  <span class="meta">@Test</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateById</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        Map&lt;String,Object&gt; paramMap = <span class="keyword">new</span> HashMap&lt;&gt;();  </span><br><span class="line">  paramMap.put(<span class="string">&quot;id&quot;</span>,<span class="number">10L</span>);  </span><br><span class="line">  paramMap.put(<span class="string">&quot;price&quot;</span>,<span class="number">50F</span>);  </span><br><span class="line">  paramMap.put(<span class="string">&quot;bookName&quot;</span>,<span class="string">&quot;Mybatis-不能愤怒的小鸟&quot;</span>);  </span><br><span class="line">  paramMap.put(<span class="string">&quot;num&quot;</span>,<span class="number">10</span>);  </span><br><span class="line"> <span class="keyword">int</span> flag = sqlSession.update(<span class="string">&quot;com.java.dao.impl.BookDaoImpl.updateById&quot;</span>,paramMap);  </span><br><span class="line">  System.out.println(<span class="string">&quot;flag=&quot;</span>+flag);  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//事务不提交不能增删改  </span></span><br><span class="line">  <span class="meta">@After</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">//提交事务  </span></span><br><span class="line">  sqlSession.commit();  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><p> <img src="https://i.loli.net/2020/12/09/VnaJGMHDdF2594x.png" alt="Snipaste_2020-12-09_10-12-43.png"></p></li><li><h3 id="主配置文件设置别名"><a href="#主配置文件设置别名" class="headerlink" title="主配置文件设置别名"></a>主配置文件设置别名</h3><p> 要放在文件最上方</p> <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置别名 --&gt;  </span><br><span class="line">&lt;typeAliases&gt;  </span><br><span class="line"> &lt;typeAlias type=&quot;com.java.pojo.Book&quot; alias=&quot;Book&quot;&gt;&lt;/typeAlias&gt;  </span><br><span class="line">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="和"><a href="#和" class="headerlink" title="# 和 $"></a><code># 和 $</code></h2><p><img src="https://i.loli.net/2020/12/09/oWws4IybA79nzaC.png" alt="Snipaste_2020-12-09_11-48-58.png"><br>    1.<br>    <code>SELECT * FROM books WHERE bookName LIKE &#39;%#&#123;bookName&#125;%&#39; AND num&gt;#&#123;num&#125;</code><br>    自动添加单引号，<code>&#39;%&#39;bookName&#39;%&#39;</code><br>    <code>SELECT * FROM books WHERE bookName LIKE &#39;%$&#123;bookName&#125;%&#39; AND num&gt;#&#123;num&#125;</code><br>    纯文本，<code>&#39;%bookName%&#39;</code><br>    使用#的解决办法，使用<code>CONCAT()</code><br>    <code>SELECT * FROM books WHERE bookName LIKE CONCAT(&#39;%&#39;,#&#123;bookName&#125;,&#39;%&#39;) AND num&gt;#&#123;num&#125;</code><br>    2.<br>    <code>$</code>不能防止sql注入<br>    <img src="https://i.loli.net/2020/12/09/awfZcg1k2GzVyt5.png" alt="Snipaste_2020-12-09_11-48-33.png"><br>    <img src="https://i.loli.net/2020/12/09/lfrOFVxPWtpi7we.png" alt="Snipaste_2020-12-09_11-48-20.png"></p><hr><h2 id="sql标签和include标签"><a href="#sql标签和include标签" class="headerlink" title="sql标签和include标签"></a>sql标签和include标签</h2><p>写在实现类配置文件</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--使用sql标签抽取公共字段--&gt;  </span><br><span class="line">&lt;sql id=<span class="string">&quot;commonField&quot;</span>&gt;  </span><br><span class="line">  id,bookName,price,num  </span><br><span class="line">&lt;/sql&gt;</span><br><span class="line">&lt;!-- resultType 可以是 map/Map/java.util.Map --&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;selectBooks&quot;</span> resultType=<span class="string">&quot;Map&quot;</span>&gt;  </span><br><span class="line">  SELECT &lt;include refid=&quot;commonField&quot;&gt;&lt;/include&gt; FROM books  </span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>对象关系映射<br>将数据库中的一条记录与一个实体类进行关联，使用实体类封装记录</p><hr><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><ol><li><h3 id="动态查询"><a href="#动态查询" class="headerlink" title="动态查询"></a>动态查询</h3> <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--动态查询语句--&gt;  </span><br><span class="line">&lt;select id=<span class="string">&quot;selectDynamic&quot;</span> parameterType=<span class="string">&quot;Map&quot;</span> resultType=<span class="string">&quot;Map&quot;</span>&gt;  </span><br><span class="line">  SELECT &lt;include refid=&quot;commonField2&quot;&gt;&lt;/include&gt; FROM computers  </span><br><span class="line"> &lt;where&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;brand!=null and brand!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  brand = #&#123;brand&#125;  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;startPrice!=null and startPrice!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  AND price &amp;gt; = #&#123;startPrice&#125;  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;endPrice!=null and endPrice!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  AND price %itl = #&#123;endPrice&#125;  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;runMem!=null and runMem!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  AND runMem = #&#123;runMem&#125;  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;xianKa!=null and xianKa!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  AND xianKa = #&#123;xianKa&#125;  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;cpu!=null and cpu!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  AND cpu = #&#123;cpu&#125;  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line"> &lt;/where&gt;</span><br><span class="line"> &lt;/select&gt;</span><br></pre></td></tr></table></figure></li><li><h3 id="动态修改"><a href="#动态修改" class="headerlink" title="动态修改"></a>动态修改</h3> <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--动态修改语句--&gt;  </span><br><span class="line">&lt;update id=<span class="string">&quot;updateDynamic&quot;</span> parameterType=<span class="string">&quot;Map&quot;</span>&gt;  </span><br><span class="line">  UPDATE computers  </span><br><span class="line">    &lt;set&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;brand!=null and brand!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  brand = #&#123;brand&#125;,  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;startPrice!=null and startPrice!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  price = #&#123;startPrice&#125;,  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;runMem!=null and runMem!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  runMem = #&#123;runMem&#125;,  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;xianKa!=null and xianKa!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  xianKa = #&#123;xianKa&#125;,  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;cpu!=null and cpu!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  cpu = #&#123;cpu&#125;,  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line">  <span class="comment">/*避免不修改*/</span>  </span><br><span class="line">        id=#&#123;id&#125;  </span><br><span class="line">    &lt;/set&gt;  </span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure></li><li><h3 id="动态查询，通过trim标签"><a href="#动态查询，通过trim标签" class="headerlink" title="动态查询，通过trim标签"></a>动态查询，通过<code>trim</code>标签</h3> <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--动态查询语句 通过trim标签实现--&gt;  </span><br><span class="line">&lt;select id=<span class="string">&quot;selectDynamicByTrim&quot;</span> parameterType=<span class="string">&quot;Map&quot;</span> resultType=<span class="string">&quot;Map&quot;</span>&gt;  </span><br><span class="line">  SELECT &lt;include refid=&quot;commonField2&quot;&gt;&lt;/include&gt; FROM computers  </span><br><span class="line"> &lt;trim prefix=<span class="string">&quot;where&quot;</span> prefixOverrides=<span class="string">&quot;AND&quot;</span>&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;brand!=null and brand!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  brand = #&#123;brand&#125;  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;startPrice!=null and startPrice!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  AND price &amp;gt; = #&#123;startPrice&#125;  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;endPrice!=null and endPrice!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  AND price %itl = #&#123;endPrice&#125;  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;runMem!=null and runMem!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  AND runMem = #&#123;runMem&#125;  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;xianKa!=null and xianKa!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  AND xianKa = #&#123;xianKa&#125;  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;cpu!=null and cpu!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  AND cpu = #&#123;cpu&#125;  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line"> &lt;/trim&gt;</span><br><span class="line"> &lt;/select&gt;</span><br></pre></td></tr></table></figure></li><li><p>动态修改，通过<code>trim</code>标签</p> <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--动态修改语句，通过trim标签--&gt;  </span><br><span class="line">&lt;update id=<span class="string">&quot;updateDynamic&quot;</span> parameterType=<span class="string">&quot;Map&quot;</span>&gt;  </span><br><span class="line">  UPDATE computers  </span><br><span class="line">    &lt;trim prefix=<span class="string">&quot;SET&quot;</span> suffixOverrides=<span class="string">&quot;,&quot;</span>&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;brand!=null and brand!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  brand = #&#123;brand&#125;,  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;startPrice!=null and startPrice!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  price = #&#123;startPrice&#125;,  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;runMem!=null and runMem!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  runMem = #&#123;runMem&#125;,  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;xianKa!=null and xianKa!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  xianKa = #&#123;xianKa&#125;,  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line"> &lt;<span class="keyword">if</span> test=<span class="string">&quot;cpu!=null and cpu!=&#x27;&#x27;&quot;</span>&gt;  </span><br><span class="line">  cpu = #&#123;cpu&#125;,  </span><br><span class="line">        &lt;/if&gt;  </span><br><span class="line">  <span class="comment">/*避免不修改*/</span>  </span><br><span class="line">        id=#&#123;id&#125;  </span><br><span class="line">    &lt;/trim&gt;  </span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="p6spy"><a href="#p6spy" class="headerlink" title="p6spy"></a>p6spy</h2><hr><h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--描述Husband、Wife、sql语句字段的映射关系--&gt;  </span><br><span class="line">&lt;!--column sql语字段名称--&gt;  </span><br><span class="line">&lt;resultMap id=<span class="string">&quot;Hus&quot;</span> type=<span class="string">&quot;com.java.pojo.Husband&quot;</span>&gt;  </span><br><span class="line"> &lt;result property=&quot;husid&quot; javaType=&quot;Long&quot; column=&quot;husid&quot;&gt;&lt;/result&gt;  </span><br><span class="line"> &lt;result property=&quot;age&quot; javaType=&quot;Integer&quot; column=&quot;age&quot;&gt;&lt;/result&gt;  </span><br><span class="line"> &lt;result property=&quot;gender&quot; javaType=&quot;String&quot; column=&quot;gender&quot;&gt;&lt;/result&gt;  </span><br><span class="line"> &lt;result property=&quot;husbandname&quot; javaType=&quot;String&quot; column=&quot;husbandname&quot;&gt;&lt;/result&gt;  </span><br><span class="line">  &lt;!--一对一关系--&gt;  </span><br><span class="line">  &lt;association property=<span class="string">&quot;wife&quot;</span> javaType=<span class="string">&quot;com.java.pojo.Wife&quot;</span>&gt;  </span><br><span class="line"> &lt;result property=&quot;wifeid&quot; javaType=&quot;Long&quot; column=&quot;wifeid&quot;&gt;&lt;/result&gt;  </span><br><span class="line"> &lt;result property=&quot;nianlin&quot; javaType=&quot;Integer&quot; column=&quot;nianlin&quot;&gt;&lt;/result&gt;  </span><br><span class="line"> &lt;result property=&quot;sex&quot; javaType=&quot;String&quot; column=&quot;sex&quot;&gt;&lt;/result&gt;  </span><br><span class="line"> &lt;result property=&quot;wifename&quot; javaType=&quot;String&quot; column=&quot;wifename&quot;&gt;&lt;/result&gt;  </span><br><span class="line"> &lt;result property=&quot;hid&quot; javaType=&quot;Long&quot; column=&quot;hid&quot;&gt;&lt;/result&gt;  </span><br><span class="line"> &lt;/association&gt;&lt;/resultMap&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;!--一对一的关联关系--&gt;  </span><br><span class="line">&lt;select id=<span class="string">&quot;selectByOne2One&quot;</span> parameterType=<span class="string">&quot;String&quot;</span> resultMap=<span class="string">&quot;Hus&quot;</span>&gt;  </span><br><span class="line">  SELECT * FROM husband hs INNER JOIN wife w  </span><br><span class="line">    ON hs.husid=w.hid WHERE hs.husbandname=#&#123;0&#125;  </span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;resultMap id=<span class="string">&quot;uMap&quot;</span> type=<span class="string">&quot;com.java.pojo.User&quot;</span>&gt;  </span><br><span class="line"> &lt;result property=&quot;id&quot; javaType=&quot;Long&quot; column=&quot;id&quot;&gt;&lt;/result&gt;  </span><br><span class="line"> &lt;result property=&quot;uName&quot; javaType=&quot;String&quot; column=&quot;uName&quot;&gt;&lt;/result&gt;  </span><br><span class="line"> &lt;result property=&quot;phone&quot; javaType=&quot;String&quot; column=&quot;phone&quot;&gt;&lt;/result&gt;  </span><br><span class="line"> &lt;result property=&quot;address&quot; javaType=&quot;String&quot; column=&quot;address&quot;&gt;&lt;/result&gt;  </span><br><span class="line"> &lt;collection property=<span class="string">&quot;orderList&quot;</span> ofType=<span class="string">&quot;com.java.pojo.Order&quot;</span>&gt;  </span><br><span class="line"> &lt;result property=&quot;orderId&quot; javaType=&quot;Long&quot; column=&quot;orderId&quot;&gt;&lt;/result&gt;  </span><br><span class="line"> &lt;result property=&quot;remark&quot; javaType=&quot;String&quot; column=&quot;remark&quot;&gt;&lt;/result&gt;  </span><br><span class="line"> &lt;result property=&quot;orderNo&quot; javaType=&quot;String&quot; column=&quot;orderNo&quot;&gt;&lt;/result&gt;  </span><br><span class="line"> &lt;result property=&quot;cost&quot; javaType=&quot;Float&quot; column=&quot;cost&quot;&gt;&lt;/result&gt;  </span><br><span class="line"> &lt;result property=&quot;createTime&quot; javaType=&quot;String&quot; column=&quot;createTime&quot;&gt;&lt;/result&gt;  </span><br><span class="line"> &lt;result property=&quot;userId&quot; javaType=&quot;Long&quot; column=&quot;userId&quot;&gt;&lt;/result&gt;  </span><br><span class="line"> &lt;/collection&gt;&lt;/resultMap&gt;  </span><br><span class="line">&lt;!--一对多的关联关系--&gt;  </span><br><span class="line">&lt;select id=<span class="string">&quot;selectByOne2Many&quot;</span> parameterType=<span class="string">&quot;String&quot;</span> resultMap=<span class="string">&quot;uMap&quot;</span>&gt;  </span><br><span class="line">  SELECT * FROM orders  INNER JOIN users u  </span><br><span class="line">    ON o.userId=u.id WHERE u.phone=#&#123;0&#125;  </span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h2><hr><h2 id="pageHelper分页"><a href="#pageHelper分页" class="headerlink" title="pageHelper分页"></a>pageHelper分页</h2><p><img src="https://i.loli.net/2020/12/09/7bHJOD8xvLoTgaw.png" alt="Snipaste_2020-12-09_17-25-35.png"><br>依赖：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--pagehelper所需依赖--&gt;  </span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;4.1.6&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;  </span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;com.github.jsqlparser&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;jsqlparser&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;0.9.5&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>配置拦截器：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--配置PageHelper拦截器--&gt;  </span><br><span class="line">&lt;plugins&gt;  </span><br><span class="line"> &lt;plugin interceptor=<span class="string">&quot;com.github.pagehelper.PageHelper&quot;</span>&gt;  </span><br><span class="line"> &lt;property name=&quot;dialect&quot; value=&quot;mysql&quot;&gt;&lt;/property&gt;  </span><br><span class="line"> &lt;/plugin&gt;&lt;/plugins&gt;</span><br></pre></td></tr></table></figure><p>实现类xml：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--通过pageHelper分页--&gt;  </span><br><span class="line">&lt;select id=<span class="string">&quot;selectByPageHelper&quot;</span> resultType=<span class="string">&quot;Map&quot;</span>&gt;  </span><br><span class="line">  SELECT * FROM persons  </span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByPageHelper</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> pageNum = <span class="number">1</span>;<span class="comment">//第1页  </span></span><br><span class="line">  <span class="keyword">int</span> pageSize = <span class="number">2</span>;<span class="comment">//每页显示2条数据  </span></span><br><span class="line">  <span class="comment">//分页  </span></span><br><span class="line">  PageHelper.startPage(pageNum,pageSize);  </span><br><span class="line">  <span class="comment">//查询所有  </span></span><br><span class="line">  List&lt;Map&lt;String,Object&gt;&gt; personList = sqlSession.selectList(<span class="string">&quot;com.java.dao.impl.PersonDaoImpl.selectByPageHelper&quot;</span>);  </span><br><span class="line">  <span class="comment">//将查询的所有数据包装一把  </span></span><br><span class="line">  PageInfo&lt;Map&lt;String,Object&gt;&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;Map&lt;String,Object&gt;&gt;(personList);  </span><br><span class="line">  <span class="comment">//取出分页好后的数据  </span></span><br><span class="line">  List&lt;Map&lt;String, Object&gt;&gt; list = pageInfo.getList();  </span><br><span class="line">  list.forEach(temp-&gt; System.out.println(temp));  </span><br><span class="line">  <span class="comment">//获取persons表中的总记录数  </span></span><br><span class="line">  System.out.println(<span class="string">&quot;总记录数=&quot;</span>+pageInfo.getTotal());  </span><br><span class="line">  System.out.println(<span class="string">&quot;总页数=&quot;</span>+pageInfo.getPages());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h2>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 事务</title>
      <link href="2020/12/08/spring-shi-wu/"/>
      <url>2020/12/08/spring-shi-wu/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>数据库操作最基本单元，逻辑上一组操作</li><li>整租成功或失败</li><li><h3 id="特性ACID"><a href="#特性ACID" class="headerlink" title="特性ACID"></a>特性ACID</h3><ol><li>原子性<br>过程不可分割</li><li>一致性<br>总量不变</li><li>隔离性<br>多事务之间不影响</li><li>持久性<br>提交后表中数据变化</li></ol></li></ul><hr><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ol><li>事务中注入连接池<br><img src="https://i.loli.net/2020/12/08/uhfrFsUS23a47YV.png" alt="Snipaste_2020-12-08_18-24-04.png"></li><li>dao层实现类<br> 注入事务对象 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/12/08/giXjsbRdB76CmSE.png" alt="Snipaste_2020-12-08_18-26-11.png"></li></ol><hr><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><ul><li>事务添加到Service层（业务逻辑层）</li><li>操作<ol><li>编程式事务管理<br>臃肿</li><li>声明式事务管理<br>一般用这种<br>底层使用AOP管理</li></ol></li></ul><ol><li><h3 id="配置事务管理器"><a href="#配置事务管理器" class="headerlink" title="配置事务管理器"></a>配置事务管理器</h3><p> JDBC模板的管理器<br> datasource就是上面的连接池<br><img src="https://i.loli.net/2020/12/08/sStylkq8zHreuFO.png" alt="Snipaste_2020-12-08_18-39-22.png"></p></li><li><h3 id="开启事务注解"><a href="#开启事务注解" class="headerlink" title="开启事务注解"></a>开启事务注解</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;  </span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>  </span><br><span class="line">  xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  </span><br><span class="line">  xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span>  </span><br><span class="line">  xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span>  </span><br><span class="line">  xmlns:tx=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span>  </span><br><span class="line">  xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd  </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd  </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;  </span><br><span class="line">  </span><br><span class="line">  &lt;!-- 组件扫描 --&gt;  </span><br><span class="line">  &lt;context:component-scan base-package=&quot;transaction&quot;&gt;&lt;/context:component-scan&gt;  </span><br><span class="line">  </span><br><span class="line">  &lt;!-- 数据库连接池 --&gt;  </span><br><span class="line">  &lt;bean id=<span class="string">&quot;dataSource&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> destroy-method=<span class="string">&quot;close&quot;</span>&gt;  </span><br><span class="line"> &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql:///transaction_test&quot;&gt;&lt;/property&gt;  </span><br><span class="line"> &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;  </span><br><span class="line"> &lt;property name=&quot;password&quot; value=&quot;1234&quot;&gt;&lt;/property&gt;  </span><br><span class="line"> &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;  </span><br><span class="line"> &lt;/bean&gt;  </span><br><span class="line">  &lt;!-- JdbcTemplate对象 --&gt;  </span><br><span class="line">  &lt;bean id=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;  </span><br><span class="line">  &lt;!-- 注入dataSource --&gt;  </span><br><span class="line">  &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;  </span><br><span class="line"> &lt;/bean&gt;  </span><br><span class="line">  &lt;!-- 创建事务管理器 --&gt;  </span><br><span class="line">  &lt;bean id=<span class="string">&quot;transactionManager&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;  </span><br><span class="line">  &lt;!-- 注入数据源 --&gt;  </span><br><span class="line">  &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;  </span><br><span class="line"> &lt;/bean&gt;  </span><br><span class="line">  &lt;!-- 开启事务注解 --&gt;  </span><br><span class="line">  &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;&gt;&lt;/tx:annotation-driven&gt;  </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="meta">@Transactional</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;  </span><br><span class="line">    <span class="comment">//注入dao  </span></span><br><span class="line">  <span class="meta">@Autowired</span>  </span><br><span class="line">  <span class="keyword">private</span> UserDao userDao;  </span><br><span class="line">  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accountMoney</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        userDao.reduceMoney();  </span><br><span class="line">  userDao.addMoney();  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">  <span class="keyword">private</span> JdbcTemplate jdbcTemplate;  </span><br><span class="line">  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMoney</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        String sql = <span class="string">&quot;update user set money = money-? where name = ?&quot;</span>;  </span><br><span class="line">  jdbcTemplate.update(sql,<span class="number">100</span>,<span class="string">&quot;lilei&quot;</span>);  </span><br><span class="line">  &#125;;  </span><br><span class="line">  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduceMoney</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        String sql = <span class="string">&quot;update user set money = money+? where name = ?&quot;</span>;  </span><br><span class="line">  jdbcTemplate.update(sql,<span class="number">100</span>,<span class="string">&quot;wang&quot;</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="声明式事务参数管理"><a href="#声明式事务参数管理" class="headerlink" title="声明式事务参数管理"></a>声明式事务参数管理</h2><ol><li><h3 id="propagation事务传播行为"><a href="#propagation事务传播行为" class="headerlink" title="propagation事务传播行为"></a><code>propagation</code>事务传播行为</h3><p> 事务方法：对数据库数据进行变化的行为<br> <img src="https://i.loli.net/2020/12/08/DzkMmoAX57HJ89p.png" alt="Snipaste_2020-12-08_21-43-57.png"><br> <img src="https://i.loli.net/2020/12/08/syYndB4uRcqxwDF.png" alt="Snipaste_2020-12-08_21-46-07.png"></p></li><li><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><p> 有特性成为隔离性， 多事务之间不会产生影响<br> 不考虑隔离性可能产生的问题：</p><ol><li><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>一个未提交事务读取到另一个未提交事务<br><img src="https://i.loli.net/2020/12/08/pR5gnWVQSsfLlm7.png" alt="Snipaste_2020-12-08_21-50-37.png"></p></li><li><h4 id="不可重复读（不算问题-算现象）"><a href="#不可重复读（不算问题-算现象）" class="headerlink" title="不可重复读（不算问题 算现象）"></a>不可重复读（不算问题 算现象）</h4><p>一个未提交事务读取到另一个提交事务修改数据<br><img src="https://i.loli.net/2020/12/08/KH6NIsERijMLSPo.png" alt="Snipaste_2020-12-08_21-52-37.png"></p></li><li><h4 id="虚（幻）读"><a href="#虚（幻）读" class="headerlink" title="虚（幻）读"></a>虚（幻）读</h4><p>一个未提交事务读取到另一个提交事务添加数据</p></li><li><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><p>mysql默认第三个<br><img src="https://i.loli.net/2020/12/08/EUP6q5gzwHcvWLQ.png" alt="Snipaste_2020-12-08_21-54-20.png"><br><img src="https://i.loli.net/2020/12/08/QFNRrnBAxTdthqE.png" alt="Snipaste_2020-12-08_21-55-24.png"></p></li></ol></li><li><h3 id="timeout超过时间"><a href="#timeout超过时间" class="headerlink" title="timeout超过时间"></a><code>timeout</code>超过时间</h3><p> 事务超时不提交<br> 默认值 -1 单位秒<br> <img src="https://i.loli.net/2020/12/08/ZQmU4IgBNXOSvCV.png" alt="Snipaste_2020-12-08_22-02-21.png"></p></li><li><h3 id="readyOnly-只读"><a href="#readyOnly-只读" class="headerlink" title="readyOnly 只读"></a>readyOnly 只读</h3><p> 查询操作<br> 默认值 false 可以查询 也可以增删改，设置为true 只读<br> <img src="https://i.loli.net/2020/12/08/iVStqT9Gg4DWvl1.png" alt="Snipaste_2020-12-08_22-04-04.png"></p></li><li><h3 id="rollbackFor"><a href="#rollbackFor" class="headerlink" title="rollbackFor"></a>rollbackFor</h3><p> 设置哪些异常回滚</p></li><li><h3 id="norollbackFor"><a href="#norollbackFor" class="headerlink" title="norollbackFor"></a>norollbackFor</h3><p> 设置那些异常不回滚</p></li></ol><hr><h2 id="声明式事务xml替代"><a href="#声明式事务xml替代" class="headerlink" title="声明式事务xml替代"></a>声明式事务xml替代</h2><p>配置通知<br>配置切入点 切面</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="line">       xmlns:tx=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="line"><span class="string">                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 组件扫描 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.atguigu&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 数据库连接池 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;dataSource&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span><br><span class="line">          destroy-method=<span class="string">&quot;close&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;jdbc:mysql:///user_db&quot;</span> /&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;root&quot;</span> /&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;root&quot;</span> /&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;driverClassName&quot;</span> value=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- JdbcTemplate对象 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br><span class="line">        &lt;!--注入dataSource--&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--<span class="number">1</span> 创建事务管理器--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;transactionManager&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br><span class="line">        &lt;!--注入数据源--&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--<span class="number">2</span> 配置通知--&gt;</span><br><span class="line">    &lt;tx:advice id=<span class="string">&quot;txadvice&quot;</span>&gt;</span><br><span class="line">        &lt;!--配置事务参数--&gt;</span><br><span class="line">        &lt;tx:attributes&gt;</span><br><span class="line">            &lt;!--指定哪种规则的方法上面添加事务--&gt;</span><br><span class="line">            &lt;tx:method name=<span class="string">&quot;accountMoney&quot;</span> propagation=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span><br><span class="line">            &lt;!--&lt;tx:method name=<span class="string">&quot;account*&quot;</span>/&gt;--&gt;</span><br><span class="line">        &lt;/tx:attributes&gt;</span><br><span class="line">    &lt;/tx:advice&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--<span class="number">3</span> 配置切入点和切面--&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;!--配置切入点--&gt;</span><br><span class="line">        &lt;aop:pointcut id=<span class="string">&quot;pt&quot;</span> expression=<span class="string">&quot;execution(* com.atguigu.spring5.service.UserService.*(..))&quot;</span>/&gt;</span><br><span class="line">        &lt;!--配置切面--&gt;</span><br><span class="line">        &lt;aop:advisor advice-ref=<span class="string">&quot;txadvice&quot;</span> pointcut-ref=<span class="string">&quot;pt&quot;</span>/&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="完全注解"><a href="#完全注解" class="headerlink" title="完全注解"></a>完全注解</h2><p>配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring5.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.atguigu&quot;)</span> <span class="comment">//组件扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">//开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建数据库连接池</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">getDruidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql:///user_db&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建JdbcTemplate对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//到ioc容器中根据类型找到dataSource</span></span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        <span class="comment">//注入dataSource</span></span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建事务管理器</span></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public DataSourceTransactionManager getDataSourceTransactionManager(DataSource dataSource) &#123;</span></span><br><span class="line"><span class="comment">//        DataSourceTransactionManager transactionManager = new DataSourceTransactionManager();</span></span><br><span class="line"><span class="comment">//        transactionManager.setDataSource(dataSource);</span></span><br><span class="line"><span class="comment">//        return transactionManager;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP</title>
      <link href="2020/12/08/spring-aop/"/>
      <url>2020/12/08/spring-aop/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><ul><li>面向切面编程</li><li>降低耦合</li><li>对业务逻辑分离<br>  例：在不修改源代码的前提下，模块化添加新功能<br>  <img src="https://i.loli.net/2020/12/08/cT3SxzoML8u17KY.png" alt="Snipaste_2020-12-08_16-26-09.png"></li></ul><hr><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><ul><li><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><ol><li><h4 id="有接口，JDK动态代理"><a href="#有接口，JDK动态代理" class="headerlink" title="有接口，JDK动态代理"></a>有接口，JDK动态代理</h4><p>创建接口实现类代理对象，增强类的方法<br><img src="https://i.loli.net/2020/12/08/yS7AYOsG4HgVNJL.png" alt="Snipaste_2020-12-08_16-34-52.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKProxy</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        <span class="comment">//创建接口实现类代理对象  </span></span><br><span class="line">  Class[] interfaces = &#123;UserDao.class&#125;;  </span><br><span class="line"><span class="comment">//        Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, new InvocationHandler() &#123;  </span></span><br><span class="line"><span class="comment">//            @Override  </span></span><br><span class="line"><span class="comment">//            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;  </span></span><br><span class="line"><span class="comment">//                return null;  </span></span><br><span class="line"><span class="comment">//            &#125;  </span></span><br><span class="line"><span class="comment">//        &#125;);  </span></span><br><span class="line">  UserDaoImpl userDao = <span class="keyword">new</span> UserDaoImpl();  </span><br><span class="line">  UserDao dao = (UserDao) Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, <span class="keyword">new</span> UserDaoProxy(userDao));  </span><br><span class="line">  System.out.println(dao.add(<span class="number">1</span>,<span class="number">2</span>));  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//创建代理对象代码  </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//创建的是谁的代理对象就把谁传递过来  </span></span><br><span class="line">  <span class="comment">//有参构造函数传递  </span></span><br><span class="line">  <span class="keyword">private</span> Object object;  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">UserDaoProxy</span><span class="params">(Object object)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.object = object;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//增强的逻辑  </span></span><br><span class="line">  <span class="meta">@Override</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//方法之前  </span></span><br><span class="line">  System.out.println(<span class="string">&quot;方法之前执行:&quot;</span>+method.getName()+<span class="string">&quot; 传递的参数：&quot;</span>+ Arrays.toString(args));  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//被增强方法执行  </span></span><br><span class="line">  Object res = method.invoke(object,args);  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//方法执行之后  </span></span><br><span class="line">  System.out.println(<span class="string">&quot;方法之后执行:&quot;</span>+object);  </span><br><span class="line">  </span><br><span class="line"> <span class="keyword">return</span> res;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/08/E2gjO8w5UbBRCYq.png" alt="Snipaste_2020-12-08_17-08-29.png"></p></li><li><h4 id="没有接口，CGLIB动态代理"><a href="#没有接口，CGLIB动态代理" class="headerlink" title="没有接口，CGLIB动态代理"></a>没有接口，CGLIB动态代理</h4><p>创建子类的代理对象，增强类的方法</p></li></ol></li></ul><hr><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ol><li>连接点<br> 可以被增强的方法</li><li>切入点<br> 实际被增强的方法</li><li>通知/增强<br> 实际增强的逻辑部分<br> 相对与方法的执行位置<ol><li>前置通知</li><li>后置通知</li><li>环绕通知</li><li>异常通知</li><li>最终通知</li></ol></li><li>切面<br> 把通知应用到切入点的过程</li></ol><hr><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><hr><h2 id="AspectJ"><a href="#AspectJ" class="headerlink" title="AspectJ"></a>AspectJ</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>  </span><br><span class="line">  xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  </span><br><span class="line">  xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span>  </span><br><span class="line">  xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span>  </span><br><span class="line">  xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd  </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;  </span><br><span class="line">  </span><br><span class="line">  &lt;!-- 开启注解扫描 --&gt;  </span><br><span class="line">  &lt;context:component-scan base-package=&quot;pers.lilei.test.aop&quot;&gt;&lt;/context:component-scan&gt;  </span><br><span class="line">  </span><br><span class="line">  &lt;!-- 开启AspectJ生成代理对象 --&gt;  </span><br><span class="line">  &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;  </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增强类  </span></span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//生成代理对象  </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;  </span><br><span class="line">    <span class="comment">//前置通知  </span></span><br><span class="line">  <span class="comment">//@Before注解 表示作为前置通知  </span></span><br><span class="line">  <span class="meta">@Before(value = &quot;execution(* pers.lilei.test.aop.User.add())&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;before&quot;</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;add&quot;</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/08/IADcC4PZV5m9Jfu.png" alt="Snipaste_2020-12-08_17-44-09.png"><br><img src="https://i.loli.net/2020/12/08/ZvUs26FBgi83QI9.png" alt="Snipaste_2020-12-08_17-44-17.png"></p><ul><li><h3 id="相同切入点抽取"><a href="#相同切入点抽取" class="headerlink" title="相同切入点抽取"></a>相同切入点抽取</h3><p>  <img src="https://i.loli.net/2020/12/08/SeOtUpsPjIroRMz.png" alt="Snipaste_2020-12-08_17-47-29.png"></p></li><li><h3 id="增强类优先级"><a href="#增强类优先级" class="headerlink" title="增强类优先级"></a>增强类优先级</h3><p><img src="https://i.loli.net/2020/12/08/zB7W9Mjxltgi3nF.png" alt="Snipaste_2020-12-08_17-50-02.png"></p></li><li><h3 id="xml配置方式"><a href="#xml配置方式" class="headerlink" title="xml配置方式"></a>xml配置方式</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>  </span><br><span class="line">  xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  </span><br><span class="line">  xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span>  </span><br><span class="line">  xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span>  </span><br><span class="line">  xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd  </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;  </span><br><span class="line">  </span><br><span class="line">  &lt;!-- 创建对象 --&gt;  </span><br><span class="line">  &lt;bean id=&quot;book&quot; class=&quot;pers.lilei.test.aopxml.Book&quot;&gt;&lt;/bean&gt;  </span><br><span class="line"> &lt;bean id=&quot;bookProxy&quot; class=&quot;pers.lilei.test.aopxml.BookProxy&quot;&gt;&lt;/bean&gt;  </span><br><span class="line">  &lt;!-- 配置aop增强 --&gt;  </span><br><span class="line">  &lt;aop:config&gt;  </span><br><span class="line">  &lt;!-- 切入点 --&gt;  </span><br><span class="line">  &lt;aop:pointcut id=<span class="string">&quot;p&quot;</span> expression=<span class="string">&quot;execution(* pers.lilei.test.aopxml.Book.buy(..))&quot;</span>/&gt;  </span><br><span class="line">  &lt;!-- 配置切面 --&gt;  </span><br><span class="line">  &lt;aop:aspect ref=<span class="string">&quot;bookProxy&quot;</span>&gt;  </span><br><span class="line">  &lt;!-- 配置增强作用在具体的方法上 --&gt;  </span><br><span class="line">  &lt;aop:before method=&quot;before&quot; pointcut-ref=&quot;p&quot;&gt;&lt;/aop:before&gt;  </span><br><span class="line"> &lt;/aop:aspect&gt;  </span><br><span class="line"> &lt;/aop:config&gt;  </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;pers.lilei.test.aopxml&quot;&#125;)</span>  </span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigAOP</span> </span>&#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring IOC</title>
      <link href="2020/12/08/spring-ioc/"/>
      <url>2020/12/08/spring-ioc/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><p>控制反转<br>把创建对象的过程交给Spring管理<br>IOC容器底层就是对象工厂</p><ul><li>特点：<ol><li>方便解耦</li></ol></li></ul><hr><h2 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h2><pre><code>1. ### BeanFactory     1. IOC容器基本实现，Spring内部使用的接口，不提供开发人员使用    2. 获取对象的时候创建对象2. ### ApplicationContext     1. BeanFactory 接口的子接口，提供更多更强大的功能    2. 加载配置文件的时候创建对象（耗时耗资源的活动在项目启动时实现）</code></pre><hr><h2 id="IOC操作"><a href="#IOC操作" class="headerlink" title="IOC操作"></a>IOC操作</h2><ol><li>Spring创建对象</li><li>Spring属性注入<ol><li><h3 id="set方法"><a href="#set方法" class="headerlink" title="set方法"></a><code>set</code>方法</h3> 需要有 <code>set</code>方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBname</span><span class="params">(String bname)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.bname = bname;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBauthor</span><span class="params">(String bauthor)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.bauthor = bauthor;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- set方法注入属性 --&gt;  </span><br><span class="line">&lt;bean id=<span class="string">&quot;book&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pers.lilei.test.po.Book&quot;</span>&gt;  </span><br><span class="line"> &lt;property name=&quot;bname&quot; value=&quot;金瓶梅&quot;&gt;&lt;/property&gt;  </span><br><span class="line"> &lt;property name=&quot;bauthor&quot; value=&quot;王子洋&quot;&gt;&lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><h3 id="p标签注入"><a href="#p标签注入" class="headerlink" title="p标签注入"></a>p标签注入</h3> 需要有 <code>set</code>方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBname</span><span class="params">(String bname)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.bname = bname;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBauthor</span><span class="params">(String bauthor)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.bauthor = bauthor;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 不能有构造函数<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- set方法注入属性 --&gt;  </span><br><span class="line">&lt;bean id=&quot;book&quot; class=&quot;pers.lilei.test.po.Book&quot; p:bname=&quot;西游记&quot; p:bauthor=&quot;吴承恩&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><h3 id="有参构造"><a href="#有参构造" class="headerlink" title="有参构造"></a>有参构造</h3>需要有参构造方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String bname, String bauthor)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.bname = bname;  </span><br><span class="line"> <span class="keyword">this</span>.bauthor = bauthor;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 有参构造函数注入属性 --&gt;  </span><br><span class="line">&lt;bean id=<span class="string">&quot;book&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pers.lilei.test.po.Book&quot;</span>&gt;  </span><br><span class="line"> &lt;constructor-arg name=&quot;bname&quot; value=&quot;海国图志&quot;&gt;&lt;/constructor-arg&gt;  </span><br><span class="line"> &lt;constructor-arg name=&quot;bauthor&quot; value=&quot;魏源&quot;&gt;&lt;/constructor-arg&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">&lt;!-- 有参构造函数注入属性 --&gt;  </span><br><span class="line">&lt;bean id=<span class="string">&quot;book&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pers.lilei.test.po.Book&quot;</span>&gt;  </span><br><span class="line"> &lt;constructor-arg index=&quot;0&quot; value=&quot;海国图志&quot;&gt;&lt;/constructor-arg&gt;  </span><br><span class="line"> &lt;constructor-arg index=&quot;1&quot; value=&quot;魏源&quot;&gt;&lt;/constructor-arg&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><h3 id="外部bean"><a href="#外部bean" class="headerlink" title="外部bean"></a>外部bean</h3> 可以用set方法或者有参构造<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;service&quot;</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- service和dao对象创建 --&gt;  </span><br><span class="line">&lt;bean id=<span class="string">&quot;userService&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pers.lilei.test.service.UserService&quot;</span>&gt;  </span><br><span class="line">  &lt;!-- 注入UserDao对象  </span><br><span class="line"> name属性值：类里面属性名称  </span><br><span class="line"> ref属性：创建userDao对象bean标签id值  </span><br><span class="line">  --&gt;  </span><br><span class="line">  &lt;property name=&quot;userDao&quot; ref=&quot;userDaoImpl&quot;&gt;&lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;  </span><br><span class="line">&lt;bean id=&quot;userDaoImpl&quot; class=&quot;pers.lilei.test.dao.UserDaoImpl&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><h3 id="内部bean和级联赋值"><a href="#内部bean和级联赋值" class="headerlink" title="内部bean和级联赋值"></a>内部bean和级联赋值</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> String ename;  </span><br><span class="line"> <span class="keyword">private</span> String gender;  </span><br><span class="line"> <span class="keyword">private</span> Dept dept;  </span><br><span class="line">  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(Dept dept)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.dept = dept;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.ename = ename;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.gender = gender;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sout</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(ename+<span class="string">&quot; &quot;</span>+gender+<span class="string">&quot; &quot;</span>+dept.toString());  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> String dname;  </span><br><span class="line">  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.dname = dname;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dept&#123;&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;dname=&#x27;&quot;</span> + dname + <span class="string">&#x27;\&#x27;&#x27;</span> +  </span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line">```java</span><br><span class="line">&lt;!-- 内部bean --&gt;  </span><br><span class="line">&lt;bean id=<span class="string">&quot;emp&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pers.lilei.test.po.Emp&quot;</span>&gt;  </span><br><span class="line"> &lt;property name=&quot;ename&quot; value=&quot;李雷&quot;&gt;&lt;/property&gt;  </span><br><span class="line"> &lt;property name=&quot;gender&quot; value=&quot;男&quot;&gt;&lt;/property&gt;  </span><br><span class="line">  &lt;!-- 设置对象类型属性 --&gt;  </span><br><span class="line">  &lt;property name=<span class="string">&quot;dept&quot;</span>&gt;  </span><br><span class="line"> &lt;bean id=<span class="string">&quot;dept&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pers.lilei.test.po.Dept&quot;</span>&gt;  </span><br><span class="line"> &lt;property name=&quot;dname&quot; value=&quot;研发&quot;&gt;&lt;/property&gt;  </span><br><span class="line"> &lt;/bean&gt; &lt;/property&gt;&lt;/bean&gt;</span><br><span class="line">```</span><br><span class="line">级联赋值</span><br><span class="line">```java</span><br><span class="line">&lt;!-- 内部bean --&gt;  </span><br><span class="line">&lt;bean id=<span class="string">&quot;emp&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pers.lilei.test.po.Emp&quot;</span>&gt;  </span><br><span class="line"> &lt;property name=&quot;ename&quot; value=&quot;李雷&quot;&gt;&lt;/property&gt;  </span><br><span class="line"> &lt;property name=&quot;gender&quot; value=&quot;男&quot;&gt;&lt;/property&gt;  </span><br><span class="line">  &lt;!-- 级联赋值 --&gt;  </span><br><span class="line">  &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;  </span><br><span class="line">&lt;bean id=<span class="string">&quot;dept&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pers.lilei.test.po.Dept&quot;</span>&gt;  </span><br><span class="line"> &lt;property name=&quot;dname&quot; value=&quot;财务&quot;&gt;&lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>或<br>需要<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> dept;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 内部bean --&gt;  </span><br><span class="line">&lt;bean id=<span class="string">&quot;emp&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pers.lilei.test.po.Emp&quot;</span>&gt;  </span><br><span class="line"> &lt;property name=&quot;ename&quot; value=&quot;李雷&quot;&gt;&lt;/property&gt;  </span><br><span class="line"> &lt;property name=&quot;gender&quot; value=&quot;男&quot;&gt;&lt;/property&gt;  </span><br><span class="line">  &lt;!-- 级联赋值 --&gt;  </span><br><span class="line">  &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;  </span><br><span class="line"> &lt;property name=&quot;dept.dname&quot; value=&quot;技术部&quot;&gt;&lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;  </span><br><span class="line">&lt;bean id=<span class="string">&quot;dept&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pers.lilei.test.po.Dept&quot;</span>&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><h3 id="集合类型属性注入"><a href="#集合类型属性注入" class="headerlink" title="集合类型属性注入"></a>集合类型属性注入</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] strings;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSet</span><span class="params">(Set&lt;String&gt; set)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.set = set;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrings</span><span class="params">(String[] strings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strings = strings;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(strings));</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 集合类型属性注入 --&gt;  </span><br><span class="line">&lt;bean id=<span class="string">&quot;data&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pers.lilei.test.po.Data&quot;</span>&gt;  </span><br><span class="line">  &lt;!-- 数组类型属性注入 --&gt;  </span><br><span class="line">  &lt;property name=<span class="string">&quot;strings&quot;</span>&gt;  </span><br><span class="line"> &lt;array&gt; </span><br><span class="line"> &lt;value&gt;1&lt;/value&gt;  </span><br><span class="line"> &lt;value&gt;2&lt;/value&gt;  </span><br><span class="line"> &lt;value&gt;3&lt;/value&gt;  </span><br><span class="line"> &lt;/array&gt; </span><br><span class="line"> &lt;/property&gt;  </span><br><span class="line"> &lt;!-- list类型属性注入 --&gt;  </span><br><span class="line">  &lt;property name=<span class="string">&quot;list&quot;</span>&gt;  </span><br><span class="line"> &lt;list&gt; </span><br><span class="line"> &lt;value&gt;11&lt;/value&gt;  </span><br><span class="line"> &lt;value&gt;22&lt;/value&gt;  </span><br><span class="line"> &lt;value&gt;33&lt;/value&gt;  </span><br><span class="line"> &lt;/list&gt; </span><br><span class="line"> &lt;/property&gt;  </span><br><span class="line"> &lt;!-- map类型属性注入 --&gt;  </span><br><span class="line">  &lt;property name=<span class="string">&quot;map&quot;</span>&gt;  </span><br><span class="line"> &lt;map&gt; </span><br><span class="line"> &lt;entry key=&quot;1&quot; value=&quot;1&quot;&gt;&lt;/entry&gt;  </span><br><span class="line"> &lt;entry key=&quot;2&quot; value=&quot;2&quot;&gt;&lt;/entry&gt;  </span><br><span class="line"> &lt;entry key=&quot;3&quot; value=&quot;3&quot;&gt;&lt;/entry&gt;  </span><br><span class="line"> &lt;/map&gt; </span><br><span class="line"> &lt;/property&gt;  </span><br><span class="line"> &lt;!-- set类型属性注入 --&gt;  </span><br><span class="line">  &lt;property name=<span class="string">&quot;set&quot;</span>&gt;  </span><br><span class="line"> &lt;set&gt; </span><br><span class="line"> &lt;value&gt;111&lt;/value&gt;  </span><br><span class="line"> &lt;value&gt;222&lt;/value&gt;  </span><br><span class="line"> &lt;value&gt;333&lt;/value&gt;  </span><br><span class="line"> &lt;/set&gt; </span><br><span class="line"> &lt;/property&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br></pre></td></tr></table></figure>值是对象<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- list类型属性注入 值是对象 --&gt;  </span><br><span class="line">&lt;property name=<span class="string">&quot;listData&quot;</span>&gt;  </span><br><span class="line"> &lt;list&gt; </span><br><span class="line"> &lt;ref bean=&quot;listData1&quot;&gt;&lt;/ref&gt;  </span><br><span class="line"> &lt;ref bean=&quot;listData2&quot;&gt;&lt;/ref&gt;  </span><br><span class="line"> &lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 创建多个listData对象 --&gt;  </span><br><span class="line">&lt;bean id=<span class="string">&quot;listData1&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pers.lilei.test.po.ListData&quot;</span>&gt;  </span><br><span class="line"> &lt;property name=&quot;name&quot; value=&quot;001&quot;&gt;&lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;  </span><br><span class="line">&lt;bean id=<span class="string">&quot;listData2&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pers.lilei.test.po.ListData&quot;</span>&gt;  </span><br><span class="line"> &lt;property name=&quot;name&quot; value=&quot;002&quot;&gt;&lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>集合注入部分提取出来<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 提取list集合类型属性注入 --&gt;  </span><br><span class="line">&lt;util:list id=<span class="string">&quot;list&quot;</span>&gt;  </span><br><span class="line"> &lt;value&gt;1&lt;/value&gt;  </span><br><span class="line"> &lt;value&gt;2&lt;/value&gt;  </span><br><span class="line"> &lt;value&gt;3&lt;/value&gt;  </span><br><span class="line">&lt;/util:list&gt;  </span><br><span class="line">&lt;!-- 提取list集合注入使用 --&gt;  </span><br><span class="line">&lt;bean id=<span class="string">&quot;data&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pers.lilei.test.po.Data&quot;</span>&gt;  </span><br><span class="line"> &lt;property name=&quot;list&quot; ref=&quot;list&quot;&gt;&lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><ol><li>注入null<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;property name=<span class="string">&quot;bauthor&quot;</span>&gt;  </span><br><span class="line"> &lt;null&gt;&lt;/null&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li>属性包含特殊符号<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 属性值包含特殊符号  </span><br><span class="line"> <span class="number">1.</span> 转义符 &amp;it;&amp;gt; </span><br><span class="line"> <span class="number">2.</span> CDATA --&gt;&lt;bean id=<span class="string">&quot;book&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pers.lilei.test.po.Book&quot;</span>&gt;  </span><br><span class="line"> &lt;property name=<span class="string">&quot;bname&quot;</span>&gt;  </span><br><span class="line"> &lt;value&gt;&lt;![CDATA[&lt;&lt;西游记&gt;&gt;]]&gt;&lt;/value&gt;  </span><br><span class="line"> &lt;/property&gt; &lt;property name=&quot;bauthor&quot; value=&quot;王子洋&quot;&gt;&lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/12/07/W2IoZVTPr4sREY5.png" alt="Snipaste_2020-12-07_21-20-02.png"></li></ol></li></ol></li></ol><hr><h2 id="Bean管理操作"><a href="#Bean管理操作" class="headerlink" title="Bean管理操作"></a>Bean管理操作</h2><ol><li><h3 id="两种bean"><a href="#两种bean" class="headerlink" title="两种bean"></a>两种bean</h3><ol><li>普通bean        配置中定义bean类型就是返回类型</li><li>工厂bean（<code>FactoryBean</code>）<br>配置中定义bean类型可以和返回类型不一样<br>可以定义返回类型<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Book</span>&gt; </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//定义返回bean  </span></span><br><span class="line">  <span class="meta">@Override</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> Book <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        Book book = <span class="keyword">new</span> Book();  </span><br><span class="line">  book.setBname(<span class="string">&quot;倚天屠龙记&quot;</span>);  </span><br><span class="line"> <span class="keyword">return</span> book;</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">  <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h3 id="bean作用域"><a href="#bean作用域" class="headerlink" title="bean作用域"></a>bean作用域</h3><ol><li>spring 默认情况下bean是单实例对象<br><img src="https://i.loli.net/2020/12/08/5BKloxrmMX4fyzw.png" alt="Snipaste_2020-12-08_11-25-40.png">    <img src="https://i.loli.net/2020/12/08/tKjBVAhDgiZ1lWS.png" alt="Snipaste_2020-12-08_11-24-13.png"><br>对象地址相同<br> <img src="https://i.loli.net/2020/12/08/KgsT19YWItXO2LS.png" alt="Snipaste_2020-12-08_11-24-24.png"></li><li>设置单实例/多实例  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多实例</span></span><br><span class="line">&lt;bean id=<span class="string">&quot;book&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pers.lilei.test.po.Book&quot;</span> scope=<span class="string">&quot;prototype&quot;</span>&gt;</span><br><span class="line"><span class="comment">//单实例，也是默认值</span></span><br><span class="line">&lt;bean id=<span class="string">&quot;book&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pers.lilei.test.po.Book&quot;</span> scope=<span class="string">&quot;singleton&quot;</span>&gt;</span><br><span class="line"><span class="comment">//request session属性值是作用域</span></span><br></pre></td></tr></table></figure>  <img src="https://i.loli.net/2020/12/08/nmI8R5jwYqX124e.png" alt="Snipaste_2020-12-08_11-31-39.png"></li></ol></li><li><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ol><li>通过构造器创建bean实例（无参构造）</li><li>为bean的属性设置值或对其他bean的引用（调用set方法）<br>// 把bean实例传递给bean后置处理器的方法</li><li>调用bean的初始化方法（需要进行配置）<br>// 把bean实例传递给bean后置处理器的方法</li><li>获取到对象</li><li>容器关闭时，销毁bean（需要配置销毁方法）<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Orders</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;第一步 执行无参构造 创建bean实例&quot;</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;第二步 调用set方法 设置属性值&quot;</span>);  </span><br><span class="line"> <span class="keyword">this</span>.name = name;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMethod</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;第三部 执行初始化&quot;</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destoryMethod</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;第五步 执行销毁&quot;</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;order&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pers.lilei.test.bean.Orders&quot;</span> init-method=<span class="string">&quot;initMethod&quot;</span> destroy-ethod=<span class="string">&quot;destoryMethod&quot;</span>&gt;  </span><br><span class="line"> &lt;property name=&quot;name&quot; value=&quot;手机&quot;&gt;&lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.jupiter.api.Test  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTest10</span><span class="params">()</span> </span>&#123;  </span><br><span class="line"><span class="comment">//        //加载Spring配置文件  </span></span><br><span class="line"><span class="comment">//        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beanOrders.xml&quot;);  </span></span><br><span class="line"> <span class="comment">//加载Spring配置文件  </span></span><br><span class="line">  ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beanOrders.xml&quot;</span>);  </span><br><span class="line">  <span class="comment">//获取配置创建的对象  </span></span><br><span class="line">  Orders orders = context.getBean(<span class="string">&quot;order&quot;</span>, Orders.class);  </span><br><span class="line">  System.out.println(<span class="string">&quot;第四步 获取对象&quot;</span>);  </span><br><span class="line">  System.out.println(orders);  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//手动bean销毁  </span></span><br><span class="line"><span class="comment">//        ((ClassPathXmlApplicationContext)context).close();  </span></span><br><span class="line">  context.close();  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/12/08/aU5IcTACHgQzMrx.png" alt="Snipaste_2020-12-08_11-54-21.png"><br>另外两步<br> <img src="https://i.loli.net/2020/12/08/oafZpEcQVeOYlb2.png" alt="Snipaste_2020-12-08_13-51-47.png"><br> <img src="https://i.loli.net/2020/12/08/DguwUckZCzJBLOf.png" alt="Snipaste_2020-12-08_13-51-59.png"></li></ol></li><li><h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3> <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 自动装配  </span><br><span class="line"> autowire属性  </span><br><span class="line"> byName属性名 注入值bean_id和类中的属性名称要一致  </span><br><span class="line"> byType属性类型  </span><br><span class="line">  --&gt;  </span><br><span class="line">  <span class="comment">//byName</span></span><br><span class="line">  &lt;bean id=<span class="string">&quot;emp&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pers.lilei.test.autowire.Emp&quot;</span> autowire=<span class="string">&quot;byName&quot;</span>&gt;  </span><br><span class="line">&lt;!--        &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;--&gt;  </span><br><span class="line">  &lt;/bean&gt;  </span><br><span class="line"> &lt;bean id=&quot;dept&quot; class=&quot;pers.lilei.test.autowire.Dept&quot;&gt;&lt;/bean&gt;  </span><br><span class="line">  <span class="comment">//byType</span></span><br><span class="line"> &lt;bean id=<span class="string">&quot;emp&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pers.lilei.test.autowire.Emp&quot;</span> autowire=<span class="string">&quot;byType&quot;</span>&gt;  </span><br><span class="line">  &lt;!--        &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;--&gt;  </span><br><span class="line">  &lt;/bean&gt;  </span><br><span class="line"> &lt;bean id=&quot;dept&quot; class=&quot;pers.lilei.test.autowire.Dept&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><h3 id="外部属性文件"><a href="#外部属性文件" class="headerlink" title="外部属性文件"></a>外部属性文件</h3> 需要druid jar包<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>  </span><br><span class="line">  xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  </span><br><span class="line">  xmlns:p=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span>  </span><br><span class="line">  xmlns:util=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span>  </span><br><span class="line">  xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span>  </span><br><span class="line">  xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  </span></span><br><span class="line"><span class="string"> http://www.springframework.org/schema/util http://www.springframework.org/schema/beans/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/beans/spring-context.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 引入外部属性标签 --&gt;  </span><br><span class="line">&lt;context:property-placeholder location=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;!-- 配置连接池 --&gt;  </span><br><span class="line">&lt;bean id=<span class="string">&quot;dataSource&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;  </span><br><span class="line">&lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;prop.driverClass&#125;&quot;&gt;&lt;/property&gt;  </span><br><span class="line"> &lt;property name=&quot;url&quot; value=&quot;$&#123;prop.url&#125;&quot;&gt;&lt;/property&gt;  </span><br><span class="line"> &lt;property name=&quot;username&quot; value=&quot;$&#123;prop.username&#125;&quot;&gt;&lt;/property&gt;  </span><br><span class="line"> &lt;property name=&quot;password&quot; value=&quot;$&#123;prop.password&#125;&quot;&gt;&lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>配置文件<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">prop.driverClass=com.mysql.jdbc.Driver  </span><br><span class="line">prop.url=jdbc:mysql:<span class="comment">//localhost:3306/URM  </span></span><br><span class="line">prop.username=</span><br><span class="line">prop.password=</span><br></pre></td></tr></table></figure></li><li><h3 id="基于注解"><a href="#基于注解" class="headerlink" title="基于注解"></a>基于注解</h3><ol><li>依赖<br><code>aop</code></li><li>开启组件扫描<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//value可以不写，默认是首字母小写的类名称  </span></span><br><span class="line"><span class="comment">//以下四个注解都可以 </span></span><br><span class="line"><span class="comment">//@Component  </span></span><br><span class="line"><span class="comment">//@Service  </span></span><br><span class="line"><span class="comment">//@Controller  </span></span><br><span class="line"><span class="meta">@Repository</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;service&quot;</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>  </span><br><span class="line">  xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  </span><br><span class="line">  xmlns:p=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span>  </span><br><span class="line">  xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span>  </span><br><span class="line">  xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  </span></span><br><span class="line"><span class="string"> http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;  </span><br><span class="line">  </span><br><span class="line">  &lt;!-- 开启组件扫描 多个包 --&gt;  </span><br><span class="line"> &lt;!-- 第一种 逗号隔开 --&gt;  </span><br><span class="line">&lt;!--    &lt;context:component-scan base-package=&quot;pers.lilei.test.dao,pers.lilei.test.service&quot;&gt;&lt;/context:component-scan&gt;--&gt;  </span><br><span class="line"> &lt;!-- 第二种 扫描上层目录 --&gt;  </span><br><span class="line">  &lt;context:component-scan base-package=&quot;pers.lilei.test&quot;&gt;&lt;/context:component-scan&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/12/08/tKPTZkzsbunq6x4.png" alt="Snipaste_2020-12-08_15-14-04.png"></li></ol></li><li><h3 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h3><ol><li>根据属性类型自动装配<code>@Autowired</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;  </span><br><span class="line">    <span class="comment">//不需要set方法  </span></span><br><span class="line">  <span class="comment">//根据类型注入  </span></span><br><span class="line">  <span class="meta">@Autowired</span>  </span><br><span class="line">  <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口不需要</span></span><br><span class="line"><span class="meta">@Repository</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li>根据名称，<code>@Autowired和@Qualifier</code>一起使用<br><img src="https://i.loli.net/2020/12/08/3FIew1WRkMnQ8hf.png" alt="Snipaste_2020-12-08_15-30-29.png"></li><li>可以根据名称，也可以根据类型，javax中的<code>@Resource</code><br> <img src="https://i.loli.net/2020/12/08/yvm2BbqxGiz7elO.png" alt="Snipaste_2020-12-08_15-36-32.png"></li><li>注入普通类型属性<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(value = &quot;lilei&quot;)</span>  </span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>基于xml配置文件方式<br>        <img src="https://i.loli.net/2020/12/07/wxdYXKJi5hMjlyT.png" alt="Snipaste_2020-12-07_19-02-06.png"></p><p><img src="https://i.loli.net/2020/12/07/SfPNj7hpOn9oi1C.png" alt="Snipaste_2020-12-07_18-04-06.png"><br><img src="https://i.loli.net/2020/12/07/FuDRLIBr4HVPxes.png" alt="Snipaste_2020-12-07_17-58-27.png"></p><hr><h2 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h2><ol><li><h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><p><img src="https://i.loli.net/2020/12/08/tCyU6fIusOPQ7NB.png" alt="Snipaste_2020-12-08_15-56-21.png"></p></li><li><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.jupiter.api.Test  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTest13</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="comment">//加载Spring配置文件  </span></span><br><span class="line">  ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);  </span><br><span class="line">  <span class="comment">//获取配置创建的对象  </span></span><br><span class="line">  UserService userService = context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);  </span><br><span class="line">  userService.add();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><ol><li><h3 id="变量注入"><a href="#变量注入" class="headerlink" title="变量注入"></a>变量注入</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">UserDao userDao;</span><br></pre></td></tr></table></figure></li><li><h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> UserDao userDao;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> UserDao userDao;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span> <span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>变量方式注入应该尽量避免，使用set方式注入或者构造器注入，这两种方式的选择就要看这个类是强制依赖的话就用构造器方式，选择依赖的话就用set方法注入<br>具体原因 有待学习</p>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> IOC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="2020/12/07/spring/"/>
      <url>2020/12/07/spring/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>方便解耦</li><li>AOP</li><li>方便测试，结合junit</li><li>方便和其他框架整合，例：mybatis</li><li>事务管理</li><li>封装</li></ol><hr><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><hr><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><hr><h2 id="通过Spring配置对象"><a href="#通过Spring配置对象" class="headerlink" title="通过Spring配置对象"></a>通过Spring配置对象</h2><ol><li>配置文件<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置user对象创建 --&gt;  </span><br><span class="line">&lt;bean id=<span class="string">&quot;user&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pers.lilei.test.po.User&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></li><li>测试方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.jupiter.api.Test  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTest</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">  <span class="comment">//加载Spring配置文件  </span></span><br><span class="line">  <span class="comment">//BeanFactory context = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span></span><br><span class="line">  ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);  </span><br><span class="line">  <span class="comment">//获取配置创建的对象  </span></span><br><span class="line">  User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);  </span><br><span class="line">  </span><br><span class="line">  System.out.println(user);  </span><br><span class="line">  user.add();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/12/07/qKZuxnUHIa5lGyD.png" alt="Snipaste_2020-12-07_18-29-27.png"><br>前一个是盘符路径<br>后一个是类路径</li></ol>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC</title>
      <link href="2020/12/07/spring-mvc/"/>
      <url>2020/12/07/spring-mvc/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><ul><li>model<br>  数据</li><li>view<br>  视图</li><li>controller<br>  业务<br><img src="https://i.loli.net/2020/12/07/PFsUeZLMxblpudf.png" alt="Snipaste_2020-12-07_09-13-11.png"></li></ul><hr><h2 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h2><ol><li><h3 id="HandlerMapping"><a href="#HandlerMapping" class="headerlink" title="HandlerMapping"></a>HandlerMapping</h3><ol><li><h4 id="通过bean-name访问"><a href="#通过bean-name访问" class="headerlink" title="通过bean name访问"></a>通过<code>bean name</code>访问</h4><ol><li>jar包</li><li>配置<code>web.xml</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;servlet&gt;  </span><br><span class="line"> &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;  </span><br><span class="line"> &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;  </span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt;  </span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;  </span></span><br><span class="line"><span class="class"> &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">springmvc</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;  </span></span><br><span class="line"><span class="class"> &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;*.<span class="title">do</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;  </span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>创建<code>springmvc</code>配置文件<ul><li>web-inf文件夹下</li><li>spring配置文件</li><li>命名：<code>[servletname]-servlet.xml</code><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置HandlerMapping 根据beanname找到对应Controller --&gt;  </span><br><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.mvc.support.ControllerBeanNameHandlerMapping&quot;&gt;&lt;/bean&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;!-- 配置Controller --&gt;  </span><br><span class="line">&lt;bean name=&quot;/hello.do&quot; class=&quot;pers.lilei.controller.HelloWordServlet&quot;&gt;&lt;/bean&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;!-- 配置视图解析器 --&gt;  </span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;  </span><br><span class="line">  &lt;!-- 前缀 --&gt;  </span><br><span class="line">  &lt;property name=&quot;prefix&quot; value=&quot;/views/&quot;&gt;&lt;/property&gt;  </span><br><span class="line">  &lt;!-- 后缀 --&gt;  </span><br><span class="line">  &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li>测试<br>Servlet<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldServlet</span> <span class="keyword">extends</span> <span class="title">AbstractController</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">  <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleRequestInternal</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">  </span><br><span class="line">  String hello = httpServletRequest.getParameter(<span class="string">&quot;hello&quot;</span>);  </span><br><span class="line">  System.out.println(<span class="string">&quot;hello:&quot;</span>+hello);  </span><br><span class="line">  </span><br><span class="line">  ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;message&quot;</span>);  </span><br><span class="line">  modelAndView.addObject(<span class="string">&quot;message&quot;</span>,hello);  </span><br><span class="line">  </span><br><span class="line"> <span class="keyword">return</span> modelAndView;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="通过简单URL访问"><a href="#通过简单URL访问" class="headerlink" title="通过简单URL访问"></a>通过简单URL访问</h4><ol><li>配置<code>springmvc</code><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 根据简单URL 查找Controller --&gt;  </span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;</span>&gt;  </span><br><span class="line"> &lt;property name=<span class="string">&quot;mappings&quot;</span>&gt;  </span><br><span class="line"> &lt;props&gt; &lt;prop key=&quot;/helloUrl.do&quot;&gt;HelloUrlServlet&lt;/prop&gt;  </span><br><span class="line"> &lt;/props&gt; &lt;/property&gt;&lt;/bean&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;bean id=&quot;HelloUrlServlet&quot; class=&quot;pers.lilei.test.controller.HelloUrlServlet&quot;&gt;&lt;/bean&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;!-- 配置视图解析器 --&gt;  </span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;  </span><br><span class="line">  &lt;!-- 前缀 --&gt;  </span><br><span class="line">  &lt;property name=&quot;prefix&quot; value=&quot;/views/&quot;&gt;&lt;/property&gt;  </span><br><span class="line">  &lt;!-- 后缀 --&gt;  </span><br><span class="line">  &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><code>servlet</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloUrlServlet</span> <span class="keyword">extends</span> <span class="title">AbstractController</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">  <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleRequestInternal</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;../index&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">  System.out.println(<span class="string">&quot;访问到：HelloUrlServlet&quot;</span>);  </span><br><span class="line">  </span><br><span class="line"> <span class="keyword">return</span> modelAndView;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="通过类名访问"><a href="#通过类名访问" class="headerlink" title="通过类名访问"></a>通过类名访问</h4><ol><li>配置<code>springmvc</code><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 控制类的类名访问Controller 访问时类名首字母需要小写 --&gt;  </span><br><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping&quot;&gt;&lt;/bean&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;bean class=&quot;pers.lilei.test.controller.HelloClassServlet&quot;&gt;&lt;/bean&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;!-- 配置视图解析器 --&gt;  </span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;  </span><br><span class="line">  &lt;!-- 前缀 --&gt;  </span><br><span class="line">  &lt;property name=&quot;prefix&quot; value=&quot;/views/&quot;&gt;&lt;/property&gt;  </span><br><span class="line">  &lt;!-- 后缀 --&gt;  </span><br><span class="line">  &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li>servlet<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloClassServlet</span> <span class="keyword">extends</span> <span class="title">AbstractController</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">  <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleRequestInternal</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> </span>&#123;  </span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;../index&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">  System.out.println(<span class="string">&quot;访问到：HelloClassServlet&quot;</span>);  </span><br><span class="line">  </span><br><span class="line"> <span class="keyword">return</span> modelAndView;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>页面访问<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;helloClassServlet.do&quot;</span>&gt;</span>helloClassServlet.do<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li>###注解<ol><li><h4 id="通过注解访问-Controller"><a href="#通过注解访问-Controller" class="headerlink" title="通过注解访问@Controller"></a>通过注解访问<code>@Controller</code></h4><ol><li>spring配置文件<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- springmvc 注解驱动 --&gt;  </span><br><span class="line">&lt;mvc:annotation-driven/&gt;  </span><br><span class="line">&lt;!-- 扫描器 --&gt;  </span><br><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;pers&quot;</span>/&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;!-- 配置视图解析器 --&gt;  </span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;  </span><br><span class="line">  &lt;!-- 前缀 --&gt;  </span><br><span class="line">  &lt;property name=&quot;prefix&quot; value=&quot;/views/&quot;&gt;&lt;/property&gt;  </span><br><span class="line">  &lt;!-- 后缀 --&gt;  </span><br><span class="line">  &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>注意这句：<code>xmlns:mvc=&quot;http://www.springframework.org/schema/mvc</code></li><li>配置<code>web.xml</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;servlet&gt;  </span><br><span class="line"> &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;  </span><br><span class="line"> &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;  </span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt;  </span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;  </span></span><br><span class="line"><span class="class"> &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">springmvc</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;  </span></span><br><span class="line"><span class="class"> &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;*.<span class="title">do</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;  </span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello.do&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String username, Model model)</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">        System.out.println(username);  </span><br><span class="line">  </span><br><span class="line">  model.addAttribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;hello &quot;</span>+username);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;../index&quot;</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>注意：<code>../index</code>为了访问根目录下的index</li></ol></li></ol></li><li><h3 id="请求映射"><a href="#请求映射" class="headerlink" title="请求映射"></a>请求映射</h3><ol><li>Serlvet<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/list&quot;,method = RequestMethod.GET)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;查询用户&quot;</span>);  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;user/userList&quot;</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;注册用户&quot;</span>);  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;user/userAdd&quot;</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/update.do&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;更新用户信息&quot;</span>);  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;user/userUpdate&quot;</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置<code>springmvc</code><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- springmvc 注解驱动 --&gt;  </span><br><span class="line">&lt;mvc:annotation-driven/&gt;  </span><br><span class="line">&lt;!-- 扫描器 --&gt;  </span><br><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;pers&quot;</span>/&gt;</span><br><span class="line">&lt;!-- 配置视图解析器 --&gt;  </span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;  </span><br><span class="line">  &lt;!-- 前缀 --&gt;  </span><br><span class="line">  &lt;property name=&quot;prefix&quot; value=&quot;/views/&quot;&gt;&lt;/property&gt;  </span><br><span class="line">  &lt;!-- 后缀 --&gt;  </span><br><span class="line">  &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li>访问<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/user/list.do&quot;</span>&gt;</span>查询用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/user/add.do&quot;</span>&gt;</span>注册用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/user/update.do&quot;</span>&gt;</span>更新用户信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><hr><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><ol><li><h3 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h3><ol><li><h4 id="通过HttpServletRequest获取参数"><a href="#通过HttpServletRequest获取参数" class="headerlink" title="通过HttpServletRequest获取参数"></a>通过<code>HttpServletRequest</code>获取参数</h4> 字符串类型<ol><li>Servlet<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getUserInfo2&quot;)</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserInfo2</span><span class="params">(HttpServletRequest request)</span> </span>&#123;  </span><br><span class="line">    System.out.println(request.getParameter(<span class="string">&quot;username&quot;</span>)+<span class="string">&quot; &quot;</span>+request.getParameter(<span class="string">&quot;password&quot;</span>));  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;../index&quot;</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>前端<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user/getUserInfo2.do&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;username&quot;</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;password&quot;</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4> <code>@RequestParam(value = &quot;&quot;)</code><ol><li>Servlet<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getUserInfo3&quot;)</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserInfo3</span><span class="params">(<span class="meta">@RequestParam(value = &quot;username&quot;)</span>String username,Integer password)</span> </span>&#123;  </span><br><span class="line">    System.out.println(username+<span class="string">&quot; &quot;</span>+password);  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;../index&quot;</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>前端<br>同上</li></ol></li><li><h4 id="参数直接获取"><a href="#参数直接获取" class="headerlink" title="参数直接获取"></a>参数直接获取</h4><ol><li>Servlet<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getUserInfo&quot;)</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserInfo</span><span class="params">(String username,Integer password)</span> </span>&#123;  </span><br><span class="line">    System.out.println(username+<span class="string">&quot; &quot;</span>+password);  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;../index&quot;</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>前端<br>同上</li></ol></li><li><h4 id="通过对象获取"><a href="#通过对象获取" class="headerlink" title="通过对象获取"></a>通过对象获取</h4><ol><li>Servlet<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getUserInfo4&quot;)</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserInfo3</span><span class="params">(User user)</span> </span>&#123;  </span><br><span class="line">    System.out.println(user.getUsername()+<span class="string">&quot; &quot;</span>+user.getPassword());  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;../index&quot;</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>前端<br>表单内的<code>input name</code>必须和对象属性名一致<br>不需要具备所有的属性<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user/getUserInfo4.do&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;username&quot;</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;password&quot;</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><ol><li><code>request</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setAttribute(<span class="string">&quot;message&quot;</span>,request.getParameter(<span class="string">&quot;username&quot;</span>)+<span class="string">&quot; &quot;</span>+request.getParameter(<span class="string">&quot;password&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><code>ModelAndView</code>或<code>Model</code>或<code>Map</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;getModelAndView&quot;)</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">getModelAndView</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;../index&quot;</span>);  </span><br><span class="line">  modelAndView.addObject(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;ModelAndView&quot;</span>);  </span><br><span class="line"> <span class="keyword">return</span> modelAndView;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="2020/11/24/jdbc/"/>
      <url>2020/11/24/jdbc/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol><li>反射com.mysql.jdbc.Driver类<ol><li>实例化该类的时候会执行该类内部的静态代码块</li><li>该代码块会在Java实现的DriverManager类中注册自己（DriverManager管理所有已经注册的驱动类）</li><li>当调用DriverManager.geConnection方法时会遍历这些驱动类，并尝试去连接数据库，只要有一个能连接成功，就返回Connection对象，否则则报异常</li></ol></li><li>使用DriverManager.geConnection(url,user,password)函数<ol><li>传入url，数据库用户名，数据库密码</li><li>得到数据库的Connection对象</li></ol></li></ol><hr><h2 id="驱动类"><a href="#驱动类" class="headerlink" title="驱动类"></a>驱动类</h2><ul><li>com.mysql.jdbc.Driver    mysql</li><li>oracle.jdbc.driver.OracleDriver    oracle</li></ul><hr><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><ul><li>mysql url的格式是：jdbc:mysql://<ip>:3306/<database_name></database_name></ip></li><li>oracle url的格式是：jdbc:oracle:thin:<ip>:1521:<database_name></database_name></ip></li></ul><hr><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><ol><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Util;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;  </span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;  </span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil</span> </span>&#123;  </span><br><span class="line">   <span class="keyword">private</span> Connection connection;  </span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> JDBCUtil instance = <span class="keyword">new</span> JDBCUtil();  </span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="title">JDBCUtil</span><span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">     </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JDBCUtil <span class="title">getInstance</span><span class="params">()</span></span>&#123;  </span><br><span class="line">      <span class="keyword">return</span> instance;  </span><br><span class="line">  &#125;  </span><br><span class="line">     </span><br><span class="line">   <span class="keyword">static</span>&#123;  </span><br><span class="line">      <span class="keyword">try</span> &#123;  </span><br><span class="line">         Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);  </span><br><span class="line">  &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;  </span><br><span class="line">         <span class="comment">// TODO Auto-generated catch block  </span></span><br><span class="line">  e.printStackTrace();  </span><br><span class="line">  &#125;  </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">   &#125;  </span><br><span class="line">     </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;  </span><br><span class="line">      <span class="keyword">try</span> &#123;  </span><br><span class="line">         connection = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/UserPowerControl?useUnicode=true&amp;characterEncoding=utf8&amp;useOldAliasMetadataBehavior=true&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;1234&quot;</span>);  </span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">         <span class="comment">// TODO Auto-generated catch block  </span></span><br><span class="line">  e.printStackTrace();  </span><br><span class="line">  &#125;  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">return</span> connection;  </span><br><span class="line">  &#125;  </span><br><span class="line">     </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">      System.out.println(JDBCUtil.getInstance().getConnection().toString());  </span><br><span class="line">  &#125;  </span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>maven</code>依赖</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;  </span></span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;mysql&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;5.1.47&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Util;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;  </span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;  </span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lilei  </span></span><br><span class="line"><span class="comment"> */</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtil</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> String driver = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;  </span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> String url = <span class="string">&quot;jdbc:mysql://localhost:3306/UserPowerControl?useUnicode=true&amp;characterEncoding=utf8&amp;useOldAliasMetadataBehavior=true&quot;</span>;  </span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> String user = <span class="string">&quot;root&quot;</span>;  </span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> String password = <span class="string">&quot;1234&quot;</span>;  </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> JdbcUtil INSTANCE;  </span><br><span class="line">  </span><br><span class="line"> <span class="keyword">static</span> &#123;  </span><br><span class="line">      INSTANCE = <span class="keyword">new</span> JdbcUtil();  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">JdbcUtil</span><span class="params">()</span> </span>&#123;   <span class="keyword">super</span>(); &#125;  </span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">      Connection conn = <span class="keyword">null</span>;  </span><br><span class="line"> <span class="keyword">try</span> &#123;  </span><br><span class="line">         Class.forName(driver);  </span><br><span class="line">  conn = DriverManager.getConnection(url, user, password);  </span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123; e.printStackTrace(); &#125;  </span><br><span class="line">      <span class="keyword">return</span> conn;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeConn</span><span class="params">(Connection conn)</span> </span>&#123;  </span><br><span class="line">      <span class="keyword">try</span> &#123;  </span><br><span class="line">         <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;  conn.close(); &#125;  </span><br><span class="line">      &#125; <span class="keyword">catch</span> (SQLException e) &#123;  e.printStackTrace(); &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">      System.out.println(JdbcUtil.INSTANCE.getConnection().toString());  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>maven依赖</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;  </span></span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;mysql&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;5.1.37&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> util;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;  </span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;  </span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lilei  </span></span><br><span class="line"><span class="comment"> */</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtil</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> String driver = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;  </span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> String url = <span class="string">&quot;jdbc:mysql://localhost:3306/urm?useUnicode=true&amp;characterEncoding=utf8&amp;useOldAliasMetadataBehavior=true&quot;</span>;  </span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> String user = <span class="string">&quot;root&quot;</span>;  </span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> String password = <span class="string">&quot;1234&quot;</span>;  </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> JdbcUtil INSTANCE;  </span><br><span class="line">  </span><br><span class="line"> <span class="keyword">static</span> &#123;  </span><br><span class="line">      INSTANCE = <span class="keyword">new</span> JdbcUtil();  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">JdbcUtil</span><span class="params">()</span> </span>&#123;   <span class="keyword">super</span>(); &#125;  </span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">      Connection conn = <span class="keyword">null</span>;  </span><br><span class="line"> <span class="keyword">try</span> &#123;  </span><br><span class="line">         Class.forName(driver);  </span><br><span class="line">  conn = DriverManager.getConnection(url, user, password);  </span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123; e.printStackTrace(); &#125;  </span><br><span class="line">      <span class="keyword">return</span> conn;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeConn</span><span class="params">(Connection conn)</span> </span>&#123;  </span><br><span class="line">      <span class="keyword">try</span> &#123;  </span><br><span class="line">         <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;  conn.close(); &#125;  </span><br><span class="line">      &#125; <span class="keyword">catch</span> (SQLException e) &#123;  e.printStackTrace(); &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">      System.out.println(JdbcUtil.INSTANCE.getConnection().toString());  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>maven依赖</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;  </span></span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;mysql&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;5.1.37&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS</title>
      <link href="2020/11/22/js/"/>
      <url>2020/11/22/js/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    &#125;)()  </span><br><span class="line">    </span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; ... &#125;())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring_mvc 拦截器</title>
      <link href="2020/11/20/spring-mvc-lan-jie-qi/"/>
      <url>2020/11/20/spring-mvc-lan-jie-qi/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="spring-mvc配置"><a href="#spring-mvc配置" class="headerlink" title="spring_mvc配置"></a>spring_mvc配置</h2><ul><li>配置了两个拦截器，分别拦截不同的文件夹</li><li>放开了基本所有的资源文件请求以及主页和登录页面<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置拦截器 --&gt;  </span><br><span class="line">&lt;mvc:interceptors&gt;  </span><br><span class="line"> &lt;mvc:interceptor&gt;  </span><br><span class="line">  &lt;!-- 拦截所有teacher、admin目录下面的页面 --&gt;  </span><br><span class="line">  &lt;mvc:mapping path=<span class="string">&quot;/teacher/*&quot;</span>/&gt;  </span><br><span class="line"> &lt;mvc:mapping path=<span class="string">&quot;/admin/*&quot;</span>/&gt;  </span><br><span class="line">  &lt;!-- mvc:exclude-mapping是另外一种拦截，它可以在你后来的测试中对某个页面进行不拦截，这样就不用在  </span><br><span class="line"> LoginInterceptor的preHandler方法里面获取不拦截的请求uri地址了(优选) --&gt;  </span><br><span class="line">  &lt;mvc:exclude-mapping path=<span class="string">&quot;/index.html&quot;</span> /&gt;  </span><br><span class="line"> &lt;mvc:exclude-mapping path=<span class="string">&quot;/admin/login.html&quot;</span> /&gt;  </span><br><span class="line"> &lt;mvc:exclude-mapping path=<span class="string">&quot;/**/fonts/*&quot;</span>/&gt;  </span><br><span class="line"> &lt;mvc:exclude-mapping path=<span class="string">&quot;/**/*.css&quot;</span>/&gt;  </span><br><span class="line"> &lt;mvc:exclude-mapping path=<span class="string">&quot;/**/*.js&quot;</span>/&gt;  </span><br><span class="line"> &lt;mvc:exclude-mapping path=<span class="string">&quot;/**/*.png&quot;</span>/&gt;  </span><br><span class="line"> &lt;mvc:exclude-mapping path=<span class="string">&quot;/**/*.gif&quot;</span>/&gt;  </span><br><span class="line"> &lt;mvc:exclude-mapping path=<span class="string">&quot;/**/*.jpg&quot;</span>/&gt;  </span><br><span class="line"> &lt;mvc:exclude-mapping path=<span class="string">&quot;/**/*.jpeg&quot;</span>/&gt;  </span><br><span class="line"> &lt;mvc:exclude-mapping path=<span class="string">&quot;/**/*login*&quot;</span>/&gt;  </span><br><span class="line"> &lt;mvc:exclude-mapping path=<span class="string">&quot;/**/*Login*&quot;</span>/&gt;  </span><br><span class="line"> &lt;bean class=&quot;cn.edu.imufe.interceptor.TeacherAdminInterceptor&quot;&gt;&lt;/bean&gt;         </span><br><span class="line">   &lt;/mvc:interceptor&gt;  </span><br><span class="line"> &lt;mvc:interceptor&gt;  </span><br><span class="line">  &lt;!-- 拦截所有student目录下面的页面 --&gt;  </span><br><span class="line">  &lt;mvc:mapping path=<span class="string">&quot;/student/*&quot;</span>/&gt;  </span><br><span class="line">  &lt;!-- mvc:exclude-mapping是另外一种拦截，它可以在你后来的测试中对某个页面进行不拦截，这样就不用在  </span><br><span class="line"> LoginInterceptor的preHandler方法里面获取不拦截的请求uri地址了(优选) --&gt;  </span><br><span class="line">  &lt;mvc:exclude-mapping path=<span class="string">&quot;/index.html&quot;</span> /&gt;  </span><br><span class="line"> &lt;mvc:exclude-mapping path=<span class="string">&quot;/admin/login.html&quot;</span> /&gt;  </span><br><span class="line"> &lt;mvc:exclude-mapping path=<span class="string">&quot;/**/fonts/*&quot;</span>/&gt;  </span><br><span class="line"> &lt;mvc:exclude-mapping path=<span class="string">&quot;/**/*.css&quot;</span>/&gt;  </span><br><span class="line"> &lt;mvc:exclude-mapping path=<span class="string">&quot;/**/*.js&quot;</span>/&gt;  </span><br><span class="line"> &lt;mvc:exclude-mapping path=<span class="string">&quot;/**/*.png&quot;</span>/&gt;  </span><br><span class="line"> &lt;mvc:exclude-mapping path=<span class="string">&quot;/**/*.gif&quot;</span>/&gt;  </span><br><span class="line"> &lt;mvc:exclude-mapping path=<span class="string">&quot;/**/*.jpg&quot;</span>/&gt;  </span><br><span class="line"> &lt;mvc:exclude-mapping path=<span class="string">&quot;/**/*.jpeg&quot;</span>/&gt;  </span><br><span class="line"> &lt;mvc:exclude-mapping path=<span class="string">&quot;/**/*login*&quot;</span>/&gt;  </span><br><span class="line"> &lt;mvc:exclude-mapping path=<span class="string">&quot;/**/*Login*&quot;</span>/&gt;  </span><br><span class="line"> &lt;bean class=&quot;cn.edu.imufe.interceptor.TeacherAdminInterceptor&quot;&gt;&lt;/bean&gt;         </span><br><span class="line">   &lt;/mvc:interceptor&gt;  </span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.edu.imufe.interceptor;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> cn.edu.imufe.util.UserUtil;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lilei  </span></span><br><span class="line"><span class="comment"> * * 2020年11月19日  </span></span><br><span class="line"><span class="comment">  */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherAdminInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">   <span class="meta">@Override</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)</span>  </span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">      <span class="comment">//执行完毕，返回前拦截  </span></span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">   <span class="meta">@Override</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object arg2, ModelAndView arg3)</span>  </span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">      <span class="comment">//处理过程中执行拦截  </span></span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">   <span class="meta">@Override</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object arg2)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">      <span class="comment">//在拦截点执行前拦截，如果返回true则不执行拦截点后的操作（拦截成功）  </span></span><br><span class="line">  <span class="comment">//返回false则不执行拦截  </span></span><br><span class="line">  <span class="comment">//管理员和老师可以全部访问  </span></span><br><span class="line">  <span class="keyword">if</span>(!UserUtil.TheRole(<span class="string">&quot;teacher&quot;</span>, request.getSession()) &amp;&amp; !UserUtil.TheRole(<span class="string">&quot;admin&quot;</span>, request.getSession())) &#123;  </span><br><span class="line">         <span class="comment">//角色认证失败，且未登录  </span></span><br><span class="line">  <span class="keyword">if</span>(!UserUtil.IfLogin(request.getSession())) &#123;  </span><br><span class="line">            System.out.println(<span class="string">&quot;拦截执行&quot;</span>+request.getServletPath());  </span><br><span class="line">  response.sendRedirect(request.getContextPath()+<span class="string">&quot;/admin/login.html&quot;</span>);  </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">false</span>;  &#125;  </span><br><span class="line">         <span class="keyword">else</span> &#123;  </span><br><span class="line">            System.out.println(<span class="string">&quot;拦截执行&quot;</span>+request.getServletPath());  </span><br><span class="line">  response.sendRedirect(request.getContextPath()+<span class="string">&quot;/index.html&quot;</span>);  </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">false</span>;  &#125;  </span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">         <span class="comment">//角色认证成功，不拦截  </span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="关于HandlerInterceptorAdapter-类的三个方法"><a href="#关于HandlerInterceptorAdapter-类的三个方法" class="headerlink" title="关于HandlerInterceptorAdapter 类的三个方法"></a>关于HandlerInterceptorAdapter 类的三个方法</h2><ol><li><code>preHandle</code><ul><li>在Controller处理之前进行调用</li><li>当preHandle的返回值为false的时候，controller函数不会被执行</li></ul></li><li><code>postHandle</code><ul><li>在Controller的方法调用之后执行</li><li>在DispatcherServlet进行视图的渲染之前执行</li><li>可以对ModelAndView进行操作</li></ul></li><li><code>afterCompletion</code><ul><li>在整个请求完成之后，也就是DispatcherServlet渲染了视图执行， 这个方法的主要作用是用于清理资源的</li></ul></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
            <tag> spring_mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java输入输出</title>
      <link href="2020/11/18/java-shu-ru-shu-chu/"/>
      <url>2020/11/18/java-shu-ru-shu-chu/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><ul><li><code>Scanner</code>类<ul><li><code>next和nextline</code>区别<br><img src="https://i.loli.net/2020/11/18/VTD3eUsLtgmvhR2.png" alt="Snipaste_2020-11-18_10-41-17.png"></li><li><code>next</code>方式接收<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);  </span><br><span class="line"><span class="comment">// 从键盘接收数据  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// next方式接收字符串  </span></span><br><span class="line">System.out.println(<span class="string">&quot;next方s式接收：&quot;</span>);  </span><br><span class="line"><span class="comment">// 判断是否还有输入  </span></span><br><span class="line"><span class="keyword">if</span> (scan.hasNext()) &#123;  </span><br><span class="line">    String str1 = scan.next();  </span><br><span class="line">  System.out.println(<span class="string">&quot;输入的数据为：&quot;</span> + str1);  </span><br><span class="line">&#125;  </span><br><span class="line">scan.close();</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/11/18/Fd4JDPejwWptE1q.png" alt="Snipaste_2020-11-18_10-37-43.png"></li><li><code>nextline</code>方式接收<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);  </span><br><span class="line"><span class="comment">// 从键盘接收数据  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// nextLine方式接收字符串  </span></span><br><span class="line">System.out.println(<span class="string">&quot;nextLine方式接收：&quot;</span>);  </span><br><span class="line"><span class="comment">// 判断是否还有输入  </span></span><br><span class="line"><span class="keyword">if</span> (scan.hasNextLine()) &#123;  </span><br><span class="line">    String str2 = scan.nextLine();  </span><br><span class="line">  System.out.println(<span class="string">&quot;输入的数据为：&quot;</span> + str2);  </span><br><span class="line">&#125;  </span><br><span class="line">scan.close();</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/11/18/nsgfzDIJ4BL2MaG.png" alt="Snipaste_2020-11-18_10-39-25.png"></li><li>判断具体数据类型输入<br><img src="https://i.loli.net/2020/11/18/H7oe5jJKfSuPGdp.png" alt="Snipaste_2020-11-18_10-43-23.png"></li></ul></li></ul><hr><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p><code>out</code>是<code>java.io.PrintStream</code>的对象，<code>System</code>这个类中含有<code>java.io.PrintStream</code>的对象<code>out</code></p><ul><li><code>System.out.print()</code></li><li><code>System.out.println()</code><ul><li>相当于<code>System.out.print(&quot;\n&quot;)</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> knowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 输入输出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="2020/11/17/ajax/"/>
      <url>2020/11/17/ajax/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><ul><li>HTTP GET形式</li><li>从服务器获取JSON数据，Jquery会尝试将其转为对应的JS对象</li><li>JSON 语法是 JavaScript 对象表示法语法的子集</li><li>JSON数据必须符合严格的JSON语法<ul><li>属性名称加双引号</li><li>字符串值加双引号</li><li>数组或对象的最后一个成员不加<code>,</code></li><li>数据在名称/值对中（用<code>:</code>隔开）</li><li>数据由<code>,</code>隔开</li><li><code>&#123;&#125;</code>保存对象</li><li><code>[]</code>保存数组</li></ul></li></ul><hr><h2 id="不执行回调函数"><a href="#不执行回调函数" class="headerlink" title="不执行回调函数"></a>不执行回调函数</h2><ul><li>后台<code>json</code>格式错误</li><li>建议不要<code>String</code>包装<code>json</code>，<code>String</code>格式前端使用<code>datatype=text</code>接收</li></ul>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> Jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON_Util</title>
      <link href="2020/11/17/json-util/"/>
      <url>2020/11/17/json-util/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><ol><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.json.JSONArray;</span><br><span class="line"><span class="keyword">import</span> net.sf.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> net.sf.json.JsonConfig;</span><br><span class="line"><span class="keyword">import</span> net.sf.json.processors.JsDateJsonValueProcessor;</span><br><span class="line"><span class="keyword">import</span> net.sf.json.processors.JsonValueProcessor;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义json工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lianjie</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtil</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将对象数组转化为json字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> objects</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">makeJson</span><span class="params">(Object [] objects)</span></span>&#123;</span><br><span class="line">JSONArray array = JSONArray.fromObject(objects);</span><br><span class="line">System.out.println(<span class="string">&quot;将对象数组转化为json字符串&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> makeJson(array);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将collection转化为json字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> collection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">makeJson</span><span class="params">(Collection collection)</span></span>&#123;</span><br><span class="line">JSONArray array = JSONArray.fromObject(collection);</span><br><span class="line">System.out.println(<span class="string">&quot;将collection转化为json字符串&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> array.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将单一对象转换为json字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">makeJson</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">JsonConfig jsonConfig = <span class="keyword">new</span> JsonConfig();</span><br><span class="line">jsonConfig.registerJsonValueProcessor(Date.class, <span class="keyword">new</span> JsonDateValueProcessor());</span><br><span class="line">JSONObject jsonObject = JSONObject.fromObject(object, jsonConfig);</span><br><span class="line">System.out.println(<span class="string">&quot;将单一对象转换为json字符串&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> jsonObject.toString();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将json字符串写由response写入到客户端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> json</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeJson</span><span class="params">(HttpServletResponse response,String json)</span></span>&#123;</span><br><span class="line">response.setContentType(<span class="string">&quot;application/json;character=UTF8&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">response.getWriter().write(json);</span><br><span class="line">System.out.println(<span class="string">&quot;将json字符串写由response写入到客户端&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类：用于转换以yyyy-MM-dd格式的日期</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lianjie</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonDateValueProcessor</span> <span class="keyword">implements</span> <span class="title">JsonValueProcessor</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span>  String datePattern = <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JsonDateValueProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JsonDateValueProcessor</span><span class="params">(String datePattern)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.datePattern = datePattern;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">processArrayValue</span><span class="params">(Object value, JsonConfig jsonConfig)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(value <span class="keyword">instanceof</span> Date)&#123;</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(datePattern);</span><br><span class="line">Date date = (Date)value;</span><br><span class="line"><span class="keyword">return</span> sdf.format(date);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> value == <span class="keyword">null</span> ? <span class="keyword">null</span> : value.toString();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">processObjectValue</span><span class="params">(String key, Object value, JsonConfig jsonConfig)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> processArrayValue(value, jsonConfig);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDatePattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> datePattern;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDatePattern</span><span class="params">(String datePattern)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.datePattern = datePattern;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tools;</span><br><span class="line"><span class="keyword">import</span> java.beans.IntrospectionException;</span><br><span class="line"><span class="keyword">import</span> java.beans.Introspector;</span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyDescriptor;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.json.JSONArray;</span><br><span class="line"><span class="keyword">import</span> net.sf.json.JSONObject;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtil_lilei_01</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  一个String字符串转换为json格式</span></span><br><span class="line"><span class="comment">  *<span class="doctag">@descript</span></span></span><br><span class="line"><span class="comment">  *<span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">  *<span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  *<span class="doctag">@author</span> Jacky</span></span><br><span class="line"><span class="comment">  *<span class="doctag">@date</span> 2015年6月15日</span></span><br><span class="line"><span class="comment">  *<span class="doctag">@version</span> 1.0v</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">stringToJson</span><span class="params">(String s)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> nullToJson(); </span><br><span class="line">        &#125; </span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(); </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123; </span><br><span class="line">            <span class="keyword">char</span> ch = s.charAt(i); </span><br><span class="line">            <span class="keyword">switch</span> (ch) &#123; </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&quot;&#x27;</span>: </span><br><span class="line">                sb.append(<span class="string">&quot;\\\&quot;&quot;</span>); </span><br><span class="line">                <span class="keyword">break</span>; </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;\\&#x27;</span>: </span><br><span class="line">                sb.append(<span class="string">&quot;\\\\&quot;</span>); </span><br><span class="line">                <span class="keyword">break</span>; </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;\b&#x27;</span>: </span><br><span class="line">                sb.append(<span class="string">&quot;\\b&quot;</span>); </span><br><span class="line">                <span class="keyword">break</span>; </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;\f&#x27;</span>: </span><br><span class="line">                sb.append(<span class="string">&quot;\\f&quot;</span>); </span><br><span class="line">                <span class="keyword">break</span>; </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;\n&#x27;</span>: </span><br><span class="line">                sb.append(<span class="string">&quot;\\n&quot;</span>); </span><br><span class="line">                <span class="keyword">break</span>; </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;\r&#x27;</span>: </span><br><span class="line">                sb.append(<span class="string">&quot;\\r&quot;</span>); </span><br><span class="line">                <span class="keyword">break</span>; </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;\t&#x27;</span>: </span><br><span class="line">                sb.append(<span class="string">&quot;\\t&quot;</span>); </span><br><span class="line">                <span class="keyword">break</span>; </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: </span><br><span class="line">                sb.append(<span class="string">&quot;\\/&quot;</span>); </span><br><span class="line">                <span class="keyword">break</span>; </span><br><span class="line">            <span class="keyword">default</span>: </span><br><span class="line">                <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;\u0000&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;\u001F&#x27;</span>) &#123; </span><br><span class="line">                    String ss = Integer.toHexString(ch); </span><br><span class="line">                    sb.append(<span class="string">&quot;\\u&quot;</span>); </span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span> - ss.length(); k++) &#123; </span><br><span class="line">                        sb.append(<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">                    &#125; </span><br><span class="line">                    sb.append(ss.toUpperCase()); </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                    sb.append(ch); </span><br><span class="line">                &#125; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> sb.toString(); </span><br><span class="line">    &#125; </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">nullToJson</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一个obj对象转换为json格式</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@descript</span></span></span><br><span class="line"><span class="comment">     *<span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     *<span class="doctag">@author</span> lijianning</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@date</span> 2015年6月15日</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@version</span> 1.0v</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">objectToJson</span><span class="params">(Object obj)</span> </span>&#123; </span><br><span class="line">        StringBuilder json = <span class="keyword">new</span> StringBuilder(); </span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123; </span><br><span class="line">            json.append(<span class="string">&quot;\&quot;\&quot;&quot;</span>); </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Number) &#123; </span><br><span class="line">            json.append(numberToJson((Number) obj)); </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Boolean) &#123; </span><br><span class="line">            json.append(booleanToJson((Boolean) obj)); </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123; </span><br><span class="line">            json.append(<span class="string">&quot;\&quot;&quot;</span>).append(stringToJson(obj.toString())).append(<span class="string">&quot;\&quot;&quot;</span>); </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Object[]) &#123; </span><br><span class="line">            json.append(arrayToJson((Object[]) obj)); </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> List) &#123; </span><br><span class="line">            json.append(listToJson((List&lt;?&gt;) obj)); </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Map) &#123; </span><br><span class="line">            json.append(mapToJson((Map&lt;?, ?&gt;) obj)); </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Set) &#123; </span><br><span class="line">            json.append(setToJson((Set&lt;?&gt;) obj)); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            json.append(beanToJson(obj)); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> json.toString(); </span><br><span class="line">    &#125; </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">numberToJson</span><span class="params">(Number number)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> number.toString(); </span><br><span class="line">    &#125; </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">booleanToJson</span><span class="params">(Boolean bool)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> bool.toString(); </span><br><span class="line">    &#125; </span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *  一个bean对象转换为json格式</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@descript</span></span></span><br><span class="line"><span class="comment">    *<span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    *<span class="doctag">@author</span> lijianning</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@date</span> 2015年6月15日</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@version</span> 1.0v</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">beanToJson</span><span class="params">(Object bean)</span> </span>&#123; </span><br><span class="line">        StringBuilder json = <span class="keyword">new</span> StringBuilder(); </span><br><span class="line">        json.append(<span class="string">&quot;&#123;&quot;</span>); </span><br><span class="line">        PropertyDescriptor[] props = <span class="keyword">null</span>; </span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            props = Introspector.getBeanInfo(bean.getClass(), Object.class) </span><br><span class="line">                    .getPropertyDescriptors(); </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IntrospectionException e) &#123; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> (props != <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; props.length; i++) &#123; </span><br><span class="line">                <span class="keyword">try</span> &#123; </span><br><span class="line">                    String name = objectToJson(props[i].getName()); </span><br><span class="line">                    String value = objectToJson(props[i].getReadMethod() </span><br><span class="line">                            .invoke(bean)); </span><br><span class="line">                    json.append(name); </span><br><span class="line">                    json.append(<span class="string">&quot;:&quot;</span>); </span><br><span class="line">                    json.append(value); </span><br><span class="line">                    json.append(<span class="string">&quot;,&quot;</span>); </span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">                &#125; </span><br><span class="line">            &#125; </span><br><span class="line">            json.setCharAt(json.length() - <span class="number">1</span>, <span class="string">&#x27;&#125;&#x27;</span>); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            json.append(<span class="string">&quot;&#125;&quot;</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> json.toString(); </span><br><span class="line">    &#125; </span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     *<span class="doctag">@descript</span></span></span><br><span class="line"><span class="comment">     *<span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     *<span class="doctag">@author</span> lijianning</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@date</span> 2015年6月15日</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@version</span> 1.0v</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">listToJson</span><span class="params">(List&lt;?&gt; list)</span> </span>&#123; </span><br><span class="line">        StringBuilder json = <span class="keyword">new</span> StringBuilder(); </span><br><span class="line">        json.append(<span class="string">&quot;[&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span>) &#123; </span><br><span class="line">            <span class="keyword">for</span> (Object obj : list) &#123; </span><br><span class="line">                json.append(objectToJson(obj)); </span><br><span class="line">                json.append(<span class="string">&quot;,&quot;</span>); </span><br><span class="line">            &#125; </span><br><span class="line">            json.setCharAt(json.length() - <span class="number">1</span>, <span class="string">&#x27;]&#x27;</span>); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            json.append(<span class="string">&quot;]&quot;</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> json.toString(); </span><br><span class="line">    &#125; </span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  一个数组集合转换为json格式</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@descript</span></span></span><br><span class="line"><span class="comment">     *<span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     *<span class="doctag">@author</span> lijianning</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@date</span> 2015年6月15日</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@version</span> 1.0v</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">arrayToJson</span><span class="params">(Object[] array)</span> </span>&#123; </span><br><span class="line">        StringBuilder json = <span class="keyword">new</span> StringBuilder(); </span><br><span class="line">        json.append(<span class="string">&quot;[&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span> (array != <span class="keyword">null</span> &amp;&amp; array.length &gt; <span class="number">0</span>) &#123; </span><br><span class="line">            <span class="keyword">for</span> (Object obj : array) &#123; </span><br><span class="line">                json.append(objectToJson(obj)); </span><br><span class="line">                json.append(<span class="string">&quot;,&quot;</span>); </span><br><span class="line">            &#125; </span><br><span class="line">            json.setCharAt(json.length() - <span class="number">1</span>, <span class="string">&#x27;]&#x27;</span>); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            json.append(<span class="string">&quot;]&quot;</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> json.toString(); </span><br><span class="line">    &#125; </span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 一个Map集合转换为json格式</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@descript</span></span></span><br><span class="line"><span class="comment">    *<span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    *<span class="doctag">@author</span> lijianning</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@date</span> 2015年6月15日</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@version</span> 1.0v</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">mapToJson</span><span class="params">(Map&lt;?, ?&gt; map)</span> </span>&#123; </span><br><span class="line">        StringBuilder json = <span class="keyword">new</span> StringBuilder(); </span><br><span class="line">        json.append(<span class="string">&quot;&#123;&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span> &amp;&amp; map.size() &gt; <span class="number">0</span>) &#123; </span><br><span class="line">            <span class="keyword">for</span> (Object key : map.keySet()) &#123; </span><br><span class="line">                json.append(objectToJson(key)); </span><br><span class="line">                json.append(<span class="string">&quot;:&quot;</span>); </span><br><span class="line">                json.append(objectToJson(map.get(key))); </span><br><span class="line">                json.append(<span class="string">&quot;,&quot;</span>); </span><br><span class="line">            &#125; </span><br><span class="line">            json.setCharAt(json.length() - <span class="number">1</span>, <span class="string">&#x27;&#125;&#x27;</span>); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            json.append(<span class="string">&quot;&#125;&quot;</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> json.toString(); </span><br><span class="line">    &#125; </span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 一个Set集合转换为json格式 </span></span><br><span class="line"><span class="comment">    *<span class="doctag">@descript</span></span></span><br><span class="line"><span class="comment">    *<span class="doctag">@param</span> set</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    *<span class="doctag">@author</span> lijianning</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@date</span> 2015年6月15日</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@version</span> 1.0v</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">setToJson</span><span class="params">(Set&lt;?&gt; set)</span> </span>&#123; </span><br><span class="line">        StringBuilder json = <span class="keyword">new</span> StringBuilder(); </span><br><span class="line">        json.append(<span class="string">&quot;[&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span> (set != <span class="keyword">null</span> &amp;&amp; set.size() &gt; <span class="number">0</span>) &#123; </span><br><span class="line">            <span class="keyword">for</span> (Object obj : set) &#123; </span><br><span class="line">                json.append(objectToJson(obj)); </span><br><span class="line">                json.append(<span class="string">&quot;,&quot;</span>); </span><br><span class="line">            &#125; </span><br><span class="line">            json.setCharAt(json.length() - <span class="number">1</span>, <span class="string">&#x27;]&#x27;</span>); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            json.append(<span class="string">&quot;]&quot;</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> json.toString(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * json字符串转换为List</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@descript</span></span></span><br><span class="line"><span class="comment">     *<span class="doctag">@param</span> jsonStr</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     *<span class="doctag">@author</span> lijianning</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@date</span> 2015年6月15日</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@version</span> 1.0v</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;String, Object&gt;&gt; parseJSONList(String jsonStr)&#123;  </span><br><span class="line">        JSONArray jsonArr = JSONArray.fromObject(jsonStr);  </span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Map&lt;String,Object&gt;&gt;();  </span><br><span class="line">        Iterator&lt;JSONObject&gt; it = jsonArr.iterator();  </span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;  </span><br><span class="line">            JSONObject JSON = it.next();  </span><br><span class="line">            list.add(parseJSONMap(JSON.toString()));  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> list;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * json字符串转换为map</span></span><br><span class="line"><span class="comment">      *<span class="doctag">@descript</span></span></span><br><span class="line"><span class="comment">      *<span class="doctag">@param</span> jsonStr</span></span><br><span class="line"><span class="comment">      *<span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">      *<span class="doctag">@author</span> lijianning</span></span><br><span class="line"><span class="comment">      *<span class="doctag">@date</span> 2015年6月15日</span></span><br><span class="line"><span class="comment">      *<span class="doctag">@version</span> 1.0v</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">parseJSONMap</span><span class="params">(String jsonStr)</span></span>&#123;  </span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();  </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">//最外层解析  </span></span><br><span class="line"> JSONObject json = JSONObject.fromObject(jsonStr);</span><br><span class="line"> <span class="keyword">for</span> (Object k : json.keySet()) &#123;</span><br><span class="line"> Object v = json.get(k);</span><br><span class="line"> <span class="comment">//如果内层还是数组的话，继续解析  </span></span><br><span class="line"> <span class="keyword">if</span> (v <span class="keyword">instanceof</span> JSONArray) &#123;</span><br><span class="line"> List&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line"> Iterator&lt;JSONObject&gt; it = ((JSONArray) v).iterator();</span><br><span class="line"> <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line"> JSONObject JSON = it.next();</span><br><span class="line"> list.add(parseJSONMap(JSON.toString()));</span><br><span class="line"> &#125;</span><br><span class="line"> map.put(k.toString(), list);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> map.put(k.toString(), v);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; </span><br><span class="line"> &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> map.put(<span class="string">&quot;exception&quot;</span>, jsonStr);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> map;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 根据一个url地址.获取json数据.转换为List</span></span><br><span class="line"><span class="comment">      *<span class="doctag">@descript</span></span></span><br><span class="line"><span class="comment">      *<span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">      *<span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">      *<span class="doctag">@author</span> lijianning</span></span><br><span class="line"><span class="comment">      *<span class="doctag">@date</span> 2015年6月15日</span></span><br><span class="line"><span class="comment">      *<span class="doctag">@version</span> 1.0v</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;String, Object&gt;&gt; getListByUrl(String url)&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">//通过HTTP获取JSON数据  </span></span><br><span class="line">            InputStream in = <span class="keyword">new</span> URL(url).openStream();  </span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));  </span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();  </span><br><span class="line">            String line;  </span><br><span class="line">            <span class="keyword">while</span>((line=reader.readLine())!=<span class="keyword">null</span>)&#123;  </span><br><span class="line">                sb.append(line);  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">return</span> parseJSONList(sb.toString());  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 根据一个url地址.获取json数据.转换为MAP</span></span><br><span class="line"><span class="comment">      *<span class="doctag">@descript</span></span></span><br><span class="line"><span class="comment">      *<span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">      *<span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">      *<span class="doctag">@author</span> lijianning</span></span><br><span class="line"><span class="comment">      *<span class="doctag">@date</span> 2015年6月15日</span></span><br><span class="line"><span class="comment">      *<span class="doctag">@version</span> 1.0v</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">getMapByUrl</span><span class="params">(String url)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">//通过HTTP获取JSON数据  </span></span><br><span class="line">            InputStream in = <span class="keyword">new</span> URL(url).openStream();  </span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));  </span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();  </span><br><span class="line">            String line;  </span><br><span class="line">            <span class="keyword">while</span>((line=reader.readLine())!=<span class="keyword">null</span>)&#123;  </span><br><span class="line">                sb.append(line);  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">return</span> parseJSONMap(sb.toString());  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> util </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> json </tag>
            
            <tag> util </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于前后端数据交互_前端转格式</title>
      <link href="2020/11/17/guan-yu-qian-hou-duan-shu-ju-jiao-hu-qian-duan-zhuan-ge-shi/"/>
      <url>2020/11/17/guan-yu-qian-hou-duan-shu-ju-jiao-hu-qian-duan-zhuan-ge-shi/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>前端：<br>    - <code>Ajax</code><br>    - <code>$.each()</code><br>后端：<br>    - <code>response.getWriter().print()</code><br>    - JSON工具类</p><hr><h2 id="推荐使用顺序"><a href="#推荐使用顺序" class="headerlink" title="推荐使用顺序"></a>推荐使用顺序</h2><ol><li><code>ajax</code>回调函数接收<strong>data</strong></li><li><code>$.each</code>遍历<strong>json字符串</strong>，选择想要的<strong>json对象</strong>（<code>index</code>为对象名，<code>item</code>为<code>body</code>）</li><li><code>$.each</code>遍历<strong>json对象</strong>，选择想要的<strong>字段</strong>（<code>index</code>为字段，<code>item</code>为值）</li></ol><hr><h2 id="js、Jquery方法"><a href="#js、Jquery方法" class="headerlink" title="js、Jquery方法"></a>js、Jquery方法</h2><ol><li><h3 id="each"><a href="#each" class="headerlink" title="$.each()"></a><code>$.each()</code></h3> $.each()是对<strong>数组</strong>，<strong>json</strong>和<strong>dom</strong>结构等的遍历</li></ol><ul><li>json<br>  <img src="https://i.loli.net/2020/11/17/ofKgPL8cQSwynJM.png" alt="Snipaste_2020-11-17_11-04-22.png"></li></ul><ol start="2"><li><h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a><code>JSON.stringify()</code></h3></li></ol><ul><li>JSON 通常用于与服务端交换数据</li><li>在向服务器发送数据时一般是字符串</li><li><h4 id="将-JavaScript-对象转换为字符串。"><a href="#将-JavaScript-对象转换为字符串。" class="headerlink" title="将 JavaScript 对象转换为字符串。"></a>将 JavaScript 对象转换为字符串。</h4>  <img src="https://i.loli.net/2020/11/17/1dHPwEYVXiMKcIm.png" alt="Snipaste_2020-11-17_11-08-19.png"></li><li><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">&quot;name&quot;</span>:<span class="string">&quot;Runoob&quot;</span>, <span class="string">&quot;initDate&quot;</span>:<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="string">&quot;site&quot;</span>:<span class="string">&quot;www.runoob.com&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> myJSON = <span class="built_in">JSON</span>.stringify(obj);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>).innerHTML = myJSON;</span><br></pre></td></tr></table></figure>  <img src="https://i.loli.net/2020/11/17/msuzKgRxa5tw8oX.png" alt="Snipaste_2020-11-17_11-14-40.png"></li></ul><ol start="3"><li><h3 id="parseJSON"><a href="#parseJSON" class="headerlink" title="$.parseJSON()"></a><code>$.parseJSON()</code></h3></li></ol><ul><li>JSON字符串转为JavaScript对象</li><li>同下</li></ul><ol start="4"><li><h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a><code>JSON.parse()</code></h3></li></ol><ul><li>JSON 通常用于与服务端交换数据</li><li>在接收服务器数据时一般是字符串</li><li>将JSON 字符串转换为 JavaScript 对象<br>  <img src="https://i.loli.net/2020/11/17/h2m8nDLwfgxRurj.png" alt="Snipaste_2020-11-17_11-24-45.png"></li><li>结果类似：<br>  <img src="https://i.loli.net/2020/11/17/XsQTjo4KIp1t7GL.png" alt="669990-20160629153339921-2014301241.png"></li></ul><hr><h2 id="JSON-parse-和jQuery-parseJSON-区别"><a href="#JSON-parse-和jQuery-parseJSON-区别" class="headerlink" title="JSON.parse()和jQuery.parseJSON()区别"></a>JSON.parse()和jQuery.parseJSON()区别</h2><p>有的浏览器不支持JSON.parse()方法，使用jQuery.parseJSON()方法时，在浏览器支持时会返回执行JSON.parse()方法的结果，否则会返回类似执行eval()方法的结果</p><hr><h2 id="不同类型数据，不同传送方式"><a href="#不同类型数据，不同传送方式" class="headerlink" title="不同类型数据，不同传送方式"></a>不同类型数据，不同传送方式</h2><ul><li>前端使用Ajax向后端传送固定参数<code>name=&quot;lilei&quot;</code></li><li>后端向前端返回不同类型，不同数量的数据</li><li>Ajax不同方法，不同接收类型，不同遍历方式</li><li><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>后端向前端传递字符串，前段需要指定接收类型为<code>text</code>，为纯文本类型</li><li>后端向前端传递<code>JSON.toString()</code>，前端接收为<code>JSON</code>字符串</li><li><code>[object,Object]</code>是前端显示错误，<code>ajax</code>没有指定接收数据类型，需要两次转格式，转为<code>JSON</code>格式，再转为<code>JSON</code>对象</li></ul></li><li><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> tools.JsonUtil;</span><br><span class="line"><span class="keyword">import</span> tools.JsonUtil_lilei_01;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class AdminLogin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/data&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">data</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">data</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">doPost(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">System.out.println(request.getParameter(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">List&lt;String&gt; names = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">names.add(<span class="string">&quot;高学博&quot;</span>);</span><br><span class="line">names.add(<span class="string">&quot;高学博&quot;</span>);</span><br><span class="line">names.add(<span class="string">&quot;高学博&quot;</span>);</span><br><span class="line">names.add(<span class="string">&quot;高学博&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Object&gt; datas = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">String name = <span class="string">&quot;小傻逼&quot;</span>;</span><br><span class="line">Object[] math = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">datas.add(name);</span><br><span class="line">datas.add(math);</span><br><span class="line"></span><br><span class="line"><span class="comment">//JsonUtil.writeJson(response, JsonUtil.makeJson(&quot;高学博&quot;));</span></span><br><span class="line"><span class="comment">//字符串转json格式报错</span></span><br><span class="line"><span class="comment">//JsonUtil.writeJson(response, JsonUtil.makeJson(names));</span></span><br><span class="line"><span class="comment">//json字符串格式，$.each遍历</span></span><br><span class="line"><span class="comment">//response.getWriter().print(names);</span></span><br><span class="line"><span class="comment">//无效果，Ajax纯文本text是正确的，不能遍历$.each</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//JSONObject json = new JSONObject();</span></span><br><span class="line"><span class="comment">//json.put(&quot;name&quot;,&quot;高学博&quot;);</span></span><br><span class="line"><span class="comment">//response.getWriter().write(json.toString());</span></span><br><span class="line"><span class="comment">//json字符串格式需要前端解析json</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//response.getWriter().print(JsonUtil_lilei_01.stringToJson(&quot;高学博&quot;));</span></span><br><span class="line"><span class="comment">//无效果，Ajax纯文本text是正确的，不能遍历$.each</span></span><br><span class="line"><span class="comment">//JsonUtil.writeJson(response,JsonUtil_lilei_01.stringToJson(&quot;高学博&quot;));</span></span><br><span class="line"><span class="comment">//无效果，Ajax纯文本text是正确的，不能遍历$.each</span></span><br><span class="line"><span class="comment">//response.getWriter().print(JsonUtil_lilei_01.listToJson(names));</span></span><br><span class="line"><span class="comment">//json字符串格式，$.each遍历</span></span><br><span class="line"><span class="comment">//response.getWriter().print(JsonUtil_lilei_01.stringToJson(name));</span></span><br><span class="line"><span class="comment">//response.getWriter().print(JsonUtil_lilei_01.arrayToJson(math));</span></span><br><span class="line"><span class="comment">//不能这么写</span></span><br><span class="line">response.getWriter().print(JsonUtil_lilei_01.listToJson(datas));</span><br><span class="line"><span class="comment">//json字符串格式多种类型组合传送，$.each遍历</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/3.2.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>data<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>data<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// $.getJSON(&quot;data&quot;,&#123;name:&quot;lilei&quot;&#125;,function(data)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// alert(data);</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// let math = [];</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// $.each(data,function(index,item)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// alert(&quot;index:&quot;+index+&quot; &quot;+&quot;item:&quot;+item)</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// //if(index == 1)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// //math = item;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// //$.each(math,function(index,item)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// //alert(&quot;index:&quot;+index+&quot; &quot;+&quot;item:&quot;+item)</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// //&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// //&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="javascript">$.ajax(&#123;</span></span><br><span class="line"><span class="javascript">             type: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="javascript">             url: <span class="string">&quot;data&quot;</span>,</span></span><br><span class="line"><span class="javascript">             data: &#123;<span class="attr">name</span>:<span class="string">&quot;lilei&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">             dataType: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="javascript">             success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line">                        alert(data);</span><br><span class="line"><span class="javascript">                        $.each(data,<span class="function"><span class="keyword">function</span>(<span class="params">index,item</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">             alert(<span class="string">&quot;index:&quot;</span>+index+<span class="string">&quot; &quot;</span>+<span class="string">&quot;item:&quot;</span>+item)</span></span><br><span class="line">            if(index == 1)&#123;</span><br><span class="line">            math = item;</span><br><span class="line"><span class="javascript">            $.each(math,<span class="function"><span class="keyword">function</span>(<span class="params">index,item</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;index:&quot;</span>+index+<span class="string">&quot; &quot;</span>+<span class="string">&quot;item:&quot;</span>+item)</span></span><br><span class="line">            &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">             &#125;)</span><br><span class="line">                      &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> knowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css</title>
      <link href="2020/11/17/css/"/>
      <url>2020/11/17/css/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>层叠样式表</li><li><h3 id="声明优先权"><a href="#声明优先权" class="headerlink" title="声明优先权"></a>声明优先权</h3><ol><li>内联样式（HTML元素内部）</li><li>内联样式表（<head>标签内部）</head></li><li>外部样式表</li><li>浏览器缺省设置（浏览器中样式声明）</li></ol></li></ul><hr><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li><h3 id="主要有两部分组成"><a href="#主要有两部分组成" class="headerlink" title="主要有两部分组成"></a>主要有两部分组成</h3><ul><li><code>selector &#123;declaration1; declaration2; ... declarationN &#125;</code></li><li>选择器（HTML元素）</li><li>一条或多条声明（属性和值，用<code>:</code>隔开）<br><code>selector &#123;property: value&#125;</code></li><li>值为若干单词需要加<code>&quot;&quot;</code></li><li>多重声明用<code>;</code>隔开</li><li>对大小写不敏感</li><li><h3 id="选择器分组"><a href="#选择器分组" class="headerlink" title="选择器分组"></a>选择器分组</h3><ul><li>被分组的选择器可以享用相同的声明，用<code>,</code>隔开<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="子元素从父元素继承属性"><a href="#子元素从父元素继承属性" class="headerlink" title="子元素从父元素继承属性"></a>子元素从父元素继承属性</h3>  不希望继承可以单独写子元素的特殊规则</li></ul></li></ul><hr><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ul><li><h3 id="派生选择器"><a href="#派生选择器" class="headerlink" title="派生选择器"></a>派生选择器</h3>  根据元素在上下文的关系定义样式<br>  例：  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">strong</span>&#123;</span><br><span class="line">    <span class="attribute">font-style</span>: italic;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3>  <code>#</code>名称<br>  例：  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#red</span> &#123;<span class="attribute">color</span>:red;&#125;;</span><br></pre></td></tr></table></figure>  定义标签<code>id</code><br>  可以结合派生选择器使用</li><li><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3>  <code>.</code>类名<br>  例：  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;<span class="attribute">text-align</span>: center&#125;</span><br></pre></td></tr></table></figure>  定义标签<code>class</code></li><li><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3>  <code>[属性名]</code><br>  例：  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[title]</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <code>[属性=值]</code><br>  例：  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[title=W3School]</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">border</span>:<span class="number">5px</span> solid blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  例：<br>  <code>input[type=&quot;text&quot;]</code></li><li><h3 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h3>  例：<br>  <code>h1 + p &#123;margin-top:50px;&#125;</code></li></ul><hr><h2 id="创建css"><a href="#创建css" class="headerlink" title="创建css"></a>创建css</h2><ul><li><h3 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h3>  例：<code>&lt;</code>link<code> rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;</code>样式表名称.css<code>&quot; /&gt;</code></li><li><h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3>  例：  <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3>  例：<code>&lt;p </code>style<code>=&quot;color: sienna; margin-left: 20px&quot;&gt;&lt;/p&gt;</code></li><li><h3 id="多重样式"><a href="#多重样式" class="headerlink" title="多重样式"></a>多重样式</h3>  如果某些属性在不同的样式表中被同样的选择器定义，那么属性值将从<strong>更具体</strong>的样式表中被继承过来。</li></ul><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li><h3 id="背景色background-color"><a href="#背景色background-color" class="headerlink" title="背景色background-color"></a>背景色<code>background-color</code></h3></li><li><h3 id="背景图像background-image-url"><a href="#背景图像background-image-url" class="headerlink" title="背景图像background-image: url()"></a>背景图像<code>background-image: url()</code></h3><ul><li><h4 id="背景重复background-repeat-no-repeat"><a href="#背景重复background-repeat-no-repeat" class="headerlink" title="背景重复background-repeat: no-repeat;"></a>背景重复<code>background-repeat: no-repeat;</code></h4></li><li><h4 id="背景定位background-position-center"><a href="#背景定位background-position-center" class="headerlink" title="背景定位background-position:center;"></a>背景定位<code>background-position:center;</code></h4></li><li><h4 id="关键字位置"><a href="#关键字位置" class="headerlink" title="关键字位置"></a>关键字位置</h4><ul><li>位置关键字可以按任何顺序出现，只要保证不超过两个关键字 - 一个对应水平方向，另一个对应垂直方向。如果只出现一个关键字，则认为另一个关键字是 center<br><code>background-position:top;</code>=中上位置</li></ul></li><li><h4 id="背景关联background-attachment-fixed"><a href="#背景关联background-attachment-fixed" class="headerlink" title="背景关联background-attachment:fixed"></a>背景关联<code>background-attachment:fixed</code></h4><ul><li>背景不随页面滚动<br><img src="https://i.loli.net/2020/11/17/R9QThDlxyi5Motq.png" alt="Snipaste_2020-11-17_10-02-01.png"></li></ul></li></ul></li></ul><hr><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><hr><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><hr><h2 id="轮廓"><a href="#轮廓" class="headerlink" title="轮廓"></a>轮廓</h2><p><img src="https://i.loli.net/2020/11/17/hp5YvebdfIi1NwZ.png" alt="Snipaste_2020-11-17_10-06-34.png"></p><hr><h2 id="框模型"><a href="#框模型" class="headerlink" title="框模型"></a>框模型</h2><p><img src="https://i.loli.net/2020/11/17/MXZieS4PwjrAlxp.gif" alt="ct_boxmodel.gif"></p><ul><li>背景在边框以内的部分</li><li>内边距、边框、外边距默认是0</li><li>高、宽只在<strong>内容区域</strong></li><li><h3 id="内边距padding"><a href="#内边距padding" class="headerlink" title="内边距padding"></a>内边距<code>padding</code></h3><ul><li><code>h1 &#123;padding: 10px 0.25em 2ex 20%;&#125;</code>上、右、下、左</li><li>只写一个就是各边距为相同值<br><img src="https://i.loli.net/2020/11/17/iBYyFT1DSWcvdLO.png" alt="Snipaste_2020-11-17_10-14-25.png"></li></ul></li><li><h3 id="边框border"><a href="#边框border" class="headerlink" title="边框border"></a>边框<code>border</code></h3><ul><li><code>border-style: solid dotted dashed double;</code>上、右、下、左，定义四种不同的边框<br><img src="https://i.loli.net/2020/11/17/zoun1DS4ZXJewh8.png" alt="Snipaste_2020-11-17_10-16-24.png"></li><li><code>border-style: solid; border-width: 15px 5px 15px 5px;</code>上、右、下、左，定义四边宽度<br><img src="https://i.loli.net/2020/11/17/fNyL3wlR7APtBnp.png" alt="Snipaste_2020-11-17_10-17-54.png"></li><li><code>border-style: none;</code>没有边框</li><li>颜色<br><img src="https://i.loli.net/2020/11/17/Xcy4ShF6BbNVT8r.png" alt="Snipaste_2020-11-17_10-18-56.png"></li></ul></li><li><h3 id="外边距margin"><a href="#外边距margin" class="headerlink" title="外边距margin"></a>外边距<code>margin</code></h3><ul><li><code>margin : 10px 0px 15px 5px;</code>上、右、下、左</li><li><code>margin: 0.5em 1em;</code>值复制<br><img src="https://i.loli.net/2020/11/17/UotY1zgnyFrdaev.png" alt="Snipaste_2020-11-17_10-22-27.png"><br><img src="https://i.loli.net/2020/11/17/tUKcqwnJlkDReQ8.gif" alt="ct_css_margin_value.gif"><br><img src="https://i.loli.net/2020/11/17/TQyLHclIqfwFeB9.png" alt="Snipaste_2020-11-17_10-23-39.png"></li><li><h4 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h4><ul><li>当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者<br><img src="https://i.loli.net/2020/11/17/CReQaGhPvErTBX7.gif" alt="ct_css_margin_collapsing.gif"><br><img src="https://i.loli.net/2020/11/17/GHNaof942Rwjbvi.gif" alt="ct_css_margin_collapsing_example_2.gif"><br><img src="https://i.loli.net/2020/11/17/7fyhOJATNzR9Xl3.gif" alt="ct_css_margin_collapsing_example_1.gif"><br><img src="https://i.loli.net/2020/11/17/5pLhv6JxjzEGCBf.gif" alt="ct_css_margin_collapsing_example_4.gif"><br><img src="https://i.loli.net/2020/11/17/2ut145gV7B3Jo9q.gif" alt="ct_css_margin_collapsing_example_3.gif"></li></ul></li></ul></li></ul><hr><h2 id="定位position"><a href="#定位position" class="headerlink" title="定位position"></a>定位<code>position</code></h2><p><img src="https://i.loli.net/2020/11/17/XPd5ShbYF2WLqtT.png" alt="Snipaste_2020-11-17_10-37-18.png"><br><img src="https://i.loli.net/2020/11/17/HRP1gLIoCJxYjqf.png" alt="Snipaste_2020-11-17_10-39-54.png"></p><ul><li><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">h2</span><span class="selector-class">.pos_left</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="css"><span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">left</span><span class="selector-pseudo">:-20px</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-tag">h2</span><span class="selector-class">.pos_right</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="css"><span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">right</span><span class="selector-pseudo">:-20px</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-tag">h2</span><span class="selector-class">.pos_top</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="css"><span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">top</span><span class="selector-pseudo">:-20px</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-tag">h2</span><span class="selector-class">.pos_bottom</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="css"><span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">bottom</span><span class="selector-pseudo">:-20px</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是位于正常位置的标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;pos_left&quot;</span>&gt;</span>这个标题相对于其正常位置向左移动<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;pos_right&quot;</span>&gt;</span>这个标题相对于其正常位置向右移动<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;pos_top&quot;</span>&gt;</span>这个标题相对于其正常位置向上移动<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;pos_bottom&quot;</span>&gt;</span>这个标题相对于其正常位置向下移动<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/17/uywsM2mCNF4qG1e.png" alt="Snipaste_2020-11-17_10-36-40.png"></p></li><li><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">h2</span><span class="selector-class">.pos_abs</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="css"><span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">left</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">top</span><span class="selector-pseudo">:150px</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;pos_abs&quot;</span>&gt;</span>这是带有绝对定位的标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>通过绝对定位，元素可以放置到页面上的任何位置。下面的标题距离页面左侧 100px，距离页面顶部 150px。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/17/c9fPJ5wIln4qWgM.png" alt="Snipaste_2020-11-17_10-38-53.png"></p></li></ul><hr><h2 id="浮动float"><a href="#浮动float" class="headerlink" title="浮动float"></a>浮动<code>float</code></h2><hr><h2 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h2><ul><li>向某些选择器添加特殊效果</li></ul>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea使用</title>
      <link href="2020/11/16/idea-shi-yong/"/>
      <url>2020/11/16/idea-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><ol><li>create new project</li><li>选择Java，选择jdk</li><li>直接点击下一步手动创建</li><li>项目名称，项目存放地址</li><li>生成项目，src存放项目代码，Libraries存放jsk jar包</li><li>src下新建package，package下新建HelloWorld类</li><li>编写主方法</li><li>右键运行主方法</li></ol><hr><h2 id="创建JavaWeb项目"><a href="#创建JavaWeb项目" class="headerlink" title="创建JavaWeb项目"></a>创建JavaWeb项目</h2><ol><li>new 普通Java项目</li><li>Run-&gt;Run-&gt;Edit Configuration-&gt;左上角加号-&gt;Tomcat Server(注意不是TomEE)-&gt;Local</li><li>Configure设置Tomcat的目录-&gt;设置项目运行浏览器-&gt;OK</li><li>右键项目名称-&gt;add framwork support-&gt;Web Application-&gt;默认勾选创建web.xml </li><li>Run-&gt;Run-&gt;Edit Configuration-&gt;Tomcat Server-&gt;Deployment-&gt;右边的加号-&gt;选择Artifact<br> Application context表示虚拟路径</li></ol><hr><h2 id="更改项目名"><a href="#更改项目名" class="headerlink" title="更改项目名"></a>更改项目名</h2><ol><li><p>Project Settings下</p><ol><li><p>更改project的Project name和Project compiler output。</p></li><li><p>更改Modules的Name`</p></li><li><p>删除Artifacts下的两个打包配置（稍后会再自动生成）</p></li></ol></li><li><p>更改pom.xml的artifactId</p></li><li><p>退出idea，找到项目路径，更改项目文件名</p></li><li><p>然后idea再open项目</p></li></ol><hr><h2 id="修改项目默认访问路径"><a href="#修改项目默认访问路径" class="headerlink" title="修改项目默认访问路径"></a>修改项目默认访问路径</h2><ol><li>run</li><li>Edit Configurations</li><li>Tomcat</li><li>Server<ol><li>UR去除末尾的<code>/项目名</code></li></ol></li><li>Deployment<ol><li>Application context，只保留<code>/</code></li></ol></li></ol><hr><h2 id="修改仓库名"><a href="#修改仓库名" class="headerlink" title="修改仓库名"></a>修改仓库名</h2><ol><li><code>git remote set-url origin newAddress</code></li><li><code>git remote rm origin</code><br> <code>git remote add origin newAddress</code></li></ol><hr><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><ol><li>引入<code>Servlet pom</code>依赖<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;javax.servlet&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;3.1.0&lt;/version&gt;  </span><br><span class="line"> &lt;scope&gt;provided&lt;/scope&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li>注解<br><code>@WebServlet(&quot;/LoginServlet&quot;)</code></li><li>表单<ol><li><code>webapp</code>下文件夹<code>&lt;form method=&quot;post&quot; action=&quot;/UserPowerControl/LoginServlet&quot;&gt;</code>，加项目名</li><li><code>webapp</code>下<code>&lt;form method=&quot;post&quot; action=&quot;LoginServlet&quot;&gt;</code>只有访问名</li></ol></li></ol><hr><h2 id="修改快捷键"><a href="#修改快捷键" class="headerlink" title="修改快捷键"></a>修改快捷键</h2><ol><li><code>ctrl alt s</code>打开设置</li><li><code>keymap</code></li><li>选择<code>快捷键方式</code></li><li><code>apply</code></li></ol><hr><h2 id="CodeStyle"><a href="#CodeStyle" class="headerlink" title="CodeStyle"></a>CodeStyle</h2><ol><li><h3 id="设置tab为四个空格"><a href="#设置tab为四个空格" class="headerlink" title="设置tab为四个空格"></a>设置<code>tab</code>为四个空格</h3><ol><li>File</li><li>setting</li><li>Editor</li><li>CodeStyle</li><li>Java</li><li>Tabs and Indents</li></ol></li><li><h3 id="新建注释"><a href="#新建注释" class="headerlink" title="新建注释"></a>新建注释</h3><ol><li>file</li><li>setting</li><li>editor</li><li>file and code template</li><li>File Header<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* &lt;h3&gt;$&#123;PROJECT_NAME&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="comment">* &lt;p&gt;$&#123;description&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> : 你的名字</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> : $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; $&#123;HOUR&#125;:$&#123;MINUTE&#125;</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><hr><h2 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h2><ol><li>idea设置git<ol><li>File</li><li>Setting</li><li>Version Control</li><li>Git</li><li>Path to Git executable（选择git安装后的git.exe），可以点击后面的Test测试连接</li></ol></li><li>设置github<ol><li>File</li><li>Setting</li><li>Version Control</li><li>GitHub</li><li>Host：github.com</li><li>Token：点击Create API Token，输入在github中注册的用户名和密码生成token，可以点击Test测试连接</li></ol></li><li>创建本地仓库<ol><li>VCS</li><li>Import into Version Control</li><li>Create Git Repository</li></ol></li><li>同步到GitHub<ol><li>VCS</li><li>Import into Version Control</li><li>Share Project On GitHub（根据项目名自动生成仓库）</li></ol></li></ol><hr><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ol><li><h3 id="快速生成getter-setter"><a href="#快速生成getter-setter" class="headerlink" title="快速生成getter setter"></a>快速生成getter setter</h3><ol><li>右键</li><li>generator</li><li>getter and setter</li></ol></li></ol><hr><h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><ol><li>测试<ol><li>maven</li><li>Lifecycle</li><li>clean</li><li>test</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="2020/11/16/java-ji-chu/"/>
      <url>2020/11/16/java-ji-chu/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h2><p>云端——JavaEE服务器——（数据库服务器、资源服务器）</p><ul><li><h3 id="客户机"><a href="#客户机" class="headerlink" title="客户机"></a>客户机</h3><ul><li><h4 id="应用程序客户端（pc、手机端、物联网）"><a href="#应用程序客户端（pc、手机端、物联网）" class="headerlink" title="应用程序客户端（pc、手机端、物联网）"></a>应用程序客户端（pc、手机端、物联网）</h4></li><li><h4 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h4></li></ul></li><li><h3 id="JavaEE服务器"><a href="#JavaEE服务器" class="headerlink" title="JavaEE服务器"></a>JavaEE服务器</h3><ul><li><h4 id="WEB层（jsp-pages、servlet）"><a href="#WEB层（jsp-pages、servlet）" class="headerlink" title="WEB层（jsp pages、servlet）"></a>WEB层（jsp pages、servlet）</h4></li><li><h4 id="业务层-（企业级Beans）、EJB容器"><a href="#业务层-（企业级Beans）、EJB容器" class="headerlink" title="业务层 （企业级Beans）、EJB容器"></a>业务层 （企业级Beans）、EJB容器</h4></li></ul></li><li><h3 id="数据库服务器、邮件服务器"><a href="#数据库服务器、邮件服务器" class="headerlink" title="数据库服务器、邮件服务器"></a>数据库服务器、邮件服务器</h3><ul><li><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4></li></ul></li></ul><hr><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>Controller<br>View<br>Model</p><hr><h2 id="JavaEE上升简介"><a href="#JavaEE上升简介" class="headerlink" title="JavaEE上升简介"></a>JavaEE上升简介</h2><p><img src="https://i.loli.net/2020/11/16/aHr1CP8z3Z6ihsX.png" alt="F8428C89A565F522709E06293EFFEFD6.png"></p><hr><h2 id="Java历史"><a href="#Java历史" class="headerlink" title="Java历史"></a>Java历史</h2><ul><li>SUN</li><li>James Gosling创始人</li></ul><hr><h2 id="Java特点"><a href="#Java特点" class="headerlink" title="Java特点"></a>Java特点</h2><ul><li><strong>面向对象</strong></li><li>可移植</li><li>多线程</li><li>分布式</li><li>简单</li><li>安全</li><li><strong>跨平台</strong></li><li><strong>开源</strong></li></ul><hr><h2 id="Java机制"><a href="#Java机制" class="headerlink" title="Java机制"></a>Java机制</h2><ul><li><h3 id="jvm（Java虚拟机）"><a href="#jvm（Java虚拟机）" class="headerlink" title="jvm（Java虚拟机）"></a>jvm（Java虚拟机）</h3><ul><li>运用硬件或软件手段实现虚拟的计算机</li><li>有自己完善的硬件架构</li><li>可运行Java字节码</li><li>有一个<strong>解释器</strong>组件，可以实现<strong>Java字节码</strong>和<strong>计算机操作系统</strong>之间的通信<br><img src="https://i.loli.net/2020/11/16/f3ZnYt8gC4BDXPm.png" alt="F7BABF57F69635C9513E251B6AF99CD5.png"></li></ul></li><li><h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><ul><li><code>C/C++</code>需要析构函数回收</li><li>不再使用的内存区<strong>自动回收</strong> </li><li>对象回收需要移除其所有<strong>引用</strong></li><li>可能出现<strong>内存溢出</strong></li></ul></li></ul><hr><h2 id="Java应用程序"><a href="#Java应用程序" class="headerlink" title="Java应用程序"></a>Java应用程序</h2><ul><li>Java严格区分<strong>大小写</strong></li><li>class表示<strong>类</strong>，Java应用程序全部内容都必须在类中</li><li><strong>源代码文件名</strong>必须与<strong>共有类名</strong>相同</li><li>main函数，共有的<code>public</code>，静态的<code>static</code>，无返回类型<code>void</code>，带有一个字符串数组类型的参数<code>String args[]</code></li><li>每个Java应用程序都必须有一个<strong>main函数</strong></li><li>一对<strong>花括号</strong><code>&#123;&#125;</code>表示程序的开始和结束</li><li>编写第一个应用程序<ul><li>记得目录名<br>  <img src="https://i.loli.net/2020/11/16/peSxil4E7g9WOQy.png" alt="Snipaste_2020-11-16_16-19-52.png"></li><li>Javac 编译文件后出现 HelloWorld.class文件<br><img src="https://i.loli.net/2020/11/16/MwOgf5Drn2AoU6K.png" alt="Snipaste_2020-11-16_16-20-07.png"></li></ul></li></ul><hr><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h2 id="集成开发工具"><a href="#集成开发工具" class="headerlink" title="集成开发工具"></a>集成开发工具</h2><h3 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h3><h3 id="MyEclipse"><a href="#MyEclipse" class="headerlink" title="MyEclipse"></a>MyEclipse</h3><pre><code>Eclipse基础上集成开发</code></pre><hr><h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><hr><h2 id="Java运行原理"><a href="#Java运行原理" class="headerlink" title="Java运行原理"></a>Java运行原理</h2><hr><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li><h3 id="8种基本数据类型"><a href="#8种基本数据类型" class="headerlink" title="8种基本数据类型"></a>8种基本数据类型</h3><ul><li><h4 id="整型：byte（-128——127）-short（-32768——32767）-int（-231——230）-long"><a href="#整型：byte（-128——127）-short（-32768——32767）-int（-231——230）-long" class="headerlink" title="整型：byte（-128——127） short（-32768——32767） int（-231——230） long"></a>整型：<code>byte（-128——127） short（-32768——32767） int（-231——230） long</code></h4><ul><li>1，2，4，8个字节</li></ul></li><li><h4 id="浮点型：float-double"><a href="#浮点型：float-double" class="headerlink" title="浮点型：float double"></a>浮点型：<code>float double</code></h4><ul><li>4，8个字节</li><li><code>float</code>后缀<code>f</code>，没有默认为<code>double</code><br><img src="https://i.loli.net/2020/11/18/QPshxgWzibEGSRF.png" alt="Snipaste_2020-11-18_10-30-22.png"></li></ul></li><li><h4 id="字符型：char（0——65535）"><a href="#字符型：char（0——65535）" class="headerlink" title="字符型：char（0——65535）"></a>字符型：<code>char</code>（0——65535）</h4><ul><li>2个字节</li><li>不能将字符串字面量分配给char变量，即使String字面量只有一个字符。</li><li>Java汉字只有一个字节，需要单引号</li><li>字符转义序列<br><img src="https://i.loli.net/2020/11/18/4lCNhb7a5TeJYov.png" alt="Snipaste_2020-11-18_10-25-13.png"></li><li>字符字面量可以表示为“\ uxxxx”形式的Unicode转义序列（<strong>ASCII字符集</strong>占据Unicode字符集中的前127个值）</li></ul></li><li><h4 id="布尔型：boolean"><a href="#布尔型：boolean" class="headerlink" title="布尔型：boolean"></a>布尔型：<code>boolean</code></h4><ul><li><code>false true</code></li></ul></li><li><h4 id="下划线数字字面量"><a href="#下划线数字字面量" class="headerlink" title="下划线数字字面量"></a>下划线数字字面量</h4><ul><li>可以在两位数字之间使用下划线</li><li>允许以八进制，十六进制和二进制格式使用下划线<br><img src="https://i.loli.net/2020/11/18/KfkNvCzru9cslQF.png" alt="Snipaste_2020-11-18_10-32-26.png"></li></ul></li></ul></li><li><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><ul><li>字符串</li><li>数组</li><li>自定义</li></ul></li><li><h3 id="强类型"><a href="#强类型" class="headerlink" title="强类型"></a>强类型</h3><ul><li>Java是强类型语言</li><li>每个变量、表达式都有类型，每个类型都有严格定义</li><li>检查所有分配的类型的兼容性</li><li>没有自动强制或有冲突类型的转换</li></ul></li></ul><hr><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ul><li>赋予变量、类和方法的名称</li><li>字母、下划线、美元符号$开头</li><li>大小写敏感</li><li>不能是关键字</li></ul></li><li><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><ul><li>数据类型 变量名称</li></ul></li><li><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><ul><li>小到大 自动类型转换<br><img src="https://i.loli.net/2020/11/18/7tkoYXTHeLBzjaI.png" alt="06FB789D403BBE1C533374560C27B75E.png"></li><li>大到小 强制类型转换（目标类型 类型名=（目标类型）值）<br>会导致<strong>数据丢失</strong></li><li>数字型、字符型、布尔型相互不兼容<br><img src="https://i.loli.net/2020/11/18/6nLuZ1Hex4kMQwv.png" alt="90813CE4BC591EB9DBD54FD9C46106A5.png"></li></ul></li></ul><hr><h2 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h2><ul><li><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3>  按出现的顺序依次执行</li><li><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3>  根据条件判断的结果不同，执行不同功能  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>&#123;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>()&#123;</span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3>  重复执行一段代码  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">&#125;<span class="keyword">while</span>(循环条件)</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(参数初始化;条件判断;更新循环变量)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(类型 变量名 : 数组)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><ul><li><code>break</code>跳出整个循环</li><li><code>continue</code>跳出当前循环</li></ul></li></ul><hr><h2 id="java-lang包"><a href="#java-lang包" class="headerlink" title="java.lang包"></a>java.lang包</h2><p>由java虚拟机<strong>自动引入</strong></p><h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a><code>String</code>类</h3><ul><li><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><ul><li>例：<code>String str1 = &quot;lilei&quot;;</code><br>  常量区，常量区有的直接指向地址</li><li>例：<code>String str2 = new String(&quot;lilei&quot;);</code><br>  堆内存分配新地址<h3 id="StringBuffer类"><a href="#StringBuffer类" class="headerlink" title="StringBuffer类"></a><code>StringBuffer</code>类</h3></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> knowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> javase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html_form</title>
      <link href="2020/11/16/html-form/"/>
      <url>2020/11/16/html-form/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="html表单"><a href="#html表单" class="headerlink" title="html表单"></a>html表单</h2><ul><li><code>&lt;form&gt;&lt;/form&gt;</code></li><li><h3 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h3>  不同类型的 input 元素、复选框、单选按钮、提交按钮等等</li><li><h3 id="方法method"><a href="#方法method" class="headerlink" title="方法method"></a>方法<code>method</code></h3><pre><code>  提交表单时所用的 HTTP 方法（_GET_ 或 _POST_）  例：`&lt;form action=&quot;action_page.php&quot; method=&quot;GET&quot;&gt;`</code></pre></li><li><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li><h4 id="novalidate"><a href="#novalidate" class="headerlink" title="novalidate"></a><code>novalidate</code></h4>不对表单数据进行验证<br>例：<code>&lt;form action=&quot;action_page.php&quot; novalidate&gt;</code></li></ul></li></ul><hr><h2 id="lt-input-gt"><a href="#lt-input-gt" class="headerlink" title="&lt;input&gt;"></a><code>&lt;input&gt;</code></h2><ul><li><h3 id="输入限制"><a href="#输入限制" class="headerlink" title="输入限制"></a>输入限制</h3><pre><code>  ![Snipaste_2020-11-16_11-55-38.png](https://i.loli.net/2020/11/16/V2zrOQyRdGuFjM7.png)</code></pre></li><li><h3 id="每个输入字段必须设置一个-name-属性"><a href="#每个输入字段必须设置一个-name-属性" class="headerlink" title="每个输入字段必须设置一个 name 属性"></a>每个输入字段必须设置一个 name 属性</h3><pre><code>  ![Snipaste_2020-11-16_11-37-01.png](https://i.loli.net/2020/11/16/q72MdeVOzbyl5o1.png)</code></pre></li><li><h3 id="类型type"><a href="#类型type" class="headerlink" title="类型type"></a>类型<code>type</code></h3><ol><li><h4 id="password"><a href="#password" class="headerlink" title="password"></a><code>password</code></h4><p> <img src="https://i.loli.net/2020/11/16/QDcy5baH3XPBOki.png" alt="Snipaste_2020-11-16_11-49-09.png"></p></li><li><h4 id="submit"><a href="#submit" class="headerlink" title="submit"></a><code>submit</code></h4><p> 提交按钮</p></li><li><h4 id="radio"><a href="#radio" class="headerlink" title="radio"></a><code>radio</code></h4><p> 单选按钮</p></li><li><h4 id="button"><a href="#button" class="headerlink" title="button"></a><code>button</code></h4><p> 按钮</p></li><li><h4 id="data"><a href="#data" class="headerlink" title="data"></a><code>data</code></h4><p> 可以限制的日期输入</p></li><li><h4 id="submit-1"><a href="#submit-1" class="headerlink" title="submit"></a><code>submit</code></h4><p> 向表单处理程    序（用来处理输入数据的脚本的服务器页面）提交表单<br> 例：<code>&lt;form action=&quot;action_page.php&quot;&gt;</code></p></li><li><h4 id="lt-select-gt"><a href="#lt-select-gt" class="headerlink" title="&lt;select&gt;"></a><code>&lt;select&gt;</code></h4><ul><li>下拉列表</li><li>selected 属性来定义预定义选项<br>例：<code>&lt;option value=&quot;fiat&quot; selected&gt;Fiat&lt;/option&gt;</code><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;cars&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;volvo&quot;</span>&gt;</span>Volvo<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;saab&quot;</span>&gt;</span>Saab<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;fiat&quot;</span>&gt;</span>Fiat<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;audi&quot;</span>&gt;</span>Audi<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="range"><a href="#range" class="headerlink" title="range"></a><code>range</code></h4><p> <img src="https://i.loli.net/2020/11/16/1aNSQxsftDKEn9P.png" alt="Snipaste_2020-11-16_11-58-52.png"></p></li><li><h4 id="color"><a href="#color" class="headerlink" title="color"></a><code>color</code></h4><p> 会出现颜色选择器</p></li><li><h4 id="number"><a href="#number" class="headerlink" title="number"></a><code>number</code></h4><p>可以限制的数字输入</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/demo/demo_form.asp&quot;</span>&gt;</span></span><br><span class="line">  数量（1 到 5 之间）：</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;quantity&quot;</span> <span class="attr">min</span>=<span class="string">&quot;1&quot;</span> <span class="attr">max</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/16/aBhYMKj9GtwEFrP.png" alt="Snipaste_2020-11-16_11-55-06.png"></p></li><li><h4 id="lt-texrarea-gt"><a href="#lt-texrarea-gt" class="headerlink" title="&lt;texrarea&gt;"></a><code>&lt;texrarea&gt;</code></h4><p>多行输入文本</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line">The cat was playing in the garden.</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="lt-button-gt"><a href="#lt-button-gt" class="headerlink" title="&lt;button&gt;"></a><code>&lt;button&gt;</code></h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;Hello World!&#x27;)&quot;</span>&gt;</span>Click Me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a><code>checkbox</code></h4><p>复选框</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/demo/demo_form.asp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vehicle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Bike&quot;</span>&gt;</span>I have a bike</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vehicle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Car&quot;</span>&gt;</span>I have a car </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/16/KC9BryR5kLWZXPl.png" alt="Snipaste_2020-11-16_11-52-18.png"></p></li><li><h4 id="lt-datalist-gt"><a href="#lt-datalist-gt" class="headerlink" title="&lt;datalist&gt;"></a><code>&lt;datalist&gt;</code></h4><p>预定义输入选项列表<br><code>&lt;input&gt;</code> 元素的 <em>list</em> 属性必须引用 <code>&lt;datalist&gt;</code> 元素的 <em>id</em> 属性</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;action_page.php&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">list</span>=<span class="string">&quot;browsers&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;browsers&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Internet Explorer&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Firefox&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Chrome&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Opera&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Safari&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/16/T4a2KPucEsCeNjJ.png" alt="Snipaste_2020-11-16_11-48-21.png"></p></li></ol></li></ul><p><img src="https://i.loli.net/2020/11/16/YHR4boUW17I9wQO.png" alt="Snipaste_2020-11-16_11-42-06.png"></p><ul><li><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><ul><li><h4 id="初始值value"><a href="#初始值value" class="headerlink" title="初始值value"></a>初始值<code>value</code></h4></li><li><h4 id="只读readonly"><a href="#只读readonly" class="headerlink" title="只读readonly"></a>只读<code>readonly</code></h4>  例：<code>&lt;input type=&quot;text&quot; name=&quot;firstname&quot; value=&quot;John&quot; readonly&gt;</code></li><li><h4 id="禁用disabled"><a href="#禁用disabled" class="headerlink" title="禁用disabled"></a>禁用<code>disabled</code></h4>  不可用，不可点击，不会被提交<br>  例：<code>&lt;input type=&quot;text&quot; name=&quot;firstname&quot; value =&quot;John&quot; disabled&gt;</code><br><img src="https://i.loli.net/2020/11/16/yeCJkghUcbZ3tzo.png" alt="Snipaste_2020-11-16_13-45-21.png"></li><li><h4 id="尺寸size"><a href="#尺寸size" class="headerlink" title="尺寸size"></a>尺寸<code>size</code></h4>  输入框的长度</li><li><h4 id="输入字段最大长度maxlength"><a href="#输入字段最大长度maxlength" class="headerlink" title="输入字段最大长度maxlength"></a>输入字段最大长度<code>maxlength</code></h4>  例：<code>&lt;input type=&quot;text&quot; name=&quot;firstname&quot; maxlength=&quot;10&quot;&gt;</code><br><img src="https://i.loli.net/2020/11/16/C8xIZJnBrtzfoA3.png" alt="Snipaste_2020-11-16_13-48-19.png"></li><li><h4 id="表单或输入字段是否自动完成autocomplete"><a href="#表单或输入字段是否自动完成autocomplete" class="headerlink" title="表单或输入字段是否自动完成autocomplete"></a>表单或输入字段是否自动完成<code>autocomplete</code></h4>  在提交过表单后，浏览器会根据用户之前的输入自动填写值，可以单独设置不需要记住的输入<br>  例：  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;action_page.php&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;on&quot;</span>&gt;</span></span><br><span class="line">   First name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fname&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   Last name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lname&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   E-mail: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>  <img src="https://i.loli.net/2020/11/16/tZnpJwQIcsfTKqV.png" alt="Snipaste_2020-11-16_13-52-18.png"></li><li><h4 id="自动获得焦点autofocus"><a href="#自动获得焦点autofocus" class="headerlink" title="自动获得焦点autofocus"></a>自动获得焦点<code>autofocus</code></h4>  例：<code>&lt;input type=&quot;text&quot; name=&quot;fname&quot; autofocus&gt;</code></li><li><h4 id="form"><a href="#form" class="headerlink" title="form"></a><code>form</code></h4>  规定input所属的表单，值为表单<code>id</code></li></ul></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hbuilderx</title>
      <link href="2020/11/16/hbuilderx/"/>
      <url>2020/11/16/hbuilderx/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="Hbuilderx拒绝访问页面"><a href="#Hbuilderx拒绝访问页面" class="headerlink" title="Hbuilderx拒绝访问页面"></a>Hbuilderx拒绝访问页面</h2><ol><li>工具</li><li>设置</li><li>运行配置</li><li>Web服务器的url</li><li>清除</li><li>运行页面</li><li>保存端口号</li></ol>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css_question</title>
      <link href="2020/11/16/css-question/"/>
      <url>2020/11/16/css-question/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="图片透明文字不透明"><a href="#图片透明文字不透明" class="headerlink" title="图片透明文字不透明"></a>图片透明文字不透明</h2><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://i.loli.net/2020/11/16/OFqnDIshkbQu68y.png" alt="Snipaste_2020-11-16_10-12-40.png"></p><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.6</span>);</span><br></pre></td></tr></table></figure><pre><code>前三个参数是**rgb颜色**最后一个参数是**透明度**</code></pre><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>2020全国有药品监督政策法规会议电视电话会议<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="文本溢出省略号表示"><a href="#文本溢出省略号表示" class="headerlink" title="文本溢出省略号表示"></a>文本溢出省略号表示</h2><h3 id="效果图-1"><a href="#效果图-1" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://i.loli.net/2020/11/16/gY8LkfNR1TPK5Vx.png" alt="Snipaste_2020-11-16_10-24-46.png"></p><h3 id="css-1"><a href="#css-1" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">-webkit-box</span>;</span><br><span class="line"><span class="selector-tag">-webkit-box-orient</span>: <span class="selector-tag">vertical</span>;</span><br><span class="line"><span class="selector-tag">-webkit-line-clamp</span>: 2;</span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br></pre></td></tr></table></figure><p>第三行 允许显示的最大行数</p><h3 id="html-1"><a href="#html-1" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span> <span class="attr">class</span>=<span class="string">&quot;overflow&quot;</span>&gt;</span>内蒙古食药学会微循环用药多学科协作专委会组织召开Master Talk SCI Online Workshop线上学术讲座<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="hr颜色"><a href="#hr颜色" class="headerlink" title="hr颜色"></a>hr颜色</h2><h3 id="效果图-2"><a href="#效果图-2" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://i.loli.net/2020/11/16/iWmFVwcpoCuUQ4v.png" alt="Snipaste_2020-11-16_10-30-47.png"></p><h3 id="css-2"><a href="#css-2" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border</span><span class="selector-pseudo">:0</span>;<span class="selector-tag">background-color</span>: <span class="selector-tag">deepskyblue</span>;<span class="selector-tag">height</span><span class="selector-pseudo">:2px</span>;</span><br></pre></td></tr></table></figure><h3 id="html-2"><a href="#html-2" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="添加多张背景图"><a href="#添加多张背景图" class="headerlink" title="添加多张背景图"></a>添加多张背景图</h2><h3 id="效果图-3"><a href="#效果图-3" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://i.loli.net/2020/11/16/zBJYpnmGtoAauhL.png" alt="Snipaste_2020-11-16_10-36-10.png"></p><h3 id="css-3"><a href="#css-3" class="headerlink" title="css"></a>css</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">background: url(https://i.loli.net/2020/11/11/9mfQudTwoKN1GaF.png)top center no-repeat,url(https://i.loli.net/2020/11/11/yLsgxuvlz1o78tP.png)center bottom no-repeat;</span><br></pre></td></tr></table></figure><p>多个图片url之间用<code>,</code>隔开</p><h3 id="html-3"><a href="#html-3" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> question </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程规约</title>
      <link href="2020/11/11/bian-cheng-gui-yue/"/>
      <url>2020/11/11/bian-cheng-gui-yue/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a><br>来源：java开发手册（嵩山版）</p><hr><h2 id="命名风格"><a href="#命名风格" class="headerlink" title="命名风格"></a>命名风格</h2><ol><li><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3> <img src="https://i.loli.net/2020/11/18/bEtasmycSudNM46.png" alt="Snipaste_2020-11-18_09-54-29.png"><br> <img src="https://i.loli.net/2020/11/18/Fz47twRhAjiypSs.png" alt="Snipaste_2020-11-18_09-55-03.png"></li><li><h3 id="禁止"><a href="#禁止" class="headerlink" title="禁止"></a>禁止</h3> <img src="https://i.loli.net/2020/11/18/GzvHXtIeFSUkyp2.png" alt="Snipaste_2020-11-18_09-56-04.png"></li><li><h3 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h3> <img src="https://i.loli.net/2020/11/18/aNKQCX7cE1fOlwW.png" alt="Snipaste_2020-11-18_09-56-48.png"></li><li><h3 id="方法名、参数名、成员变量、局部变量"><a href="#方法名、参数名、成员变量、局部变量" class="headerlink" title="方法名、参数名、成员变量、局部变量"></a>方法名、参数名、成员变量、局部变量</h3> <img src="https://i.loli.net/2020/11/18/qiHIQthN1amXR8p.png" alt="Snipaste_2020-11-18_09-57-43.png"></li><li><h3 id="常量名"><a href="#常量名" class="headerlink" title="常量名"></a>常量名</h3> <img src="https://i.loli.net/2020/11/18/obYKugdMcVQnCyw.png" alt="Snipaste_2020-11-18_09-58-19.png"></li><li><h3 id="包名"><a href="#包名" class="headerlink" title="包名"></a>包名</h3></li><li><h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3></li><li><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3></li></ol><hr><ul><li>POJO<ul><li>DTO类的拓展类，方法中的参数超过三个需要封装类</li><li>DO需要与数据库字段匹配</li><li>禁止同时存在isXxx()和getXxx()</li></ul></li><li>常量<ul><li><code>private final static TEST_TYPE</code></li><li>不能修改</li><li>静态</li><li>下划线分隔</li><li>单词大写</li></ul></li><li>关键字之间加空格</li><li>定义数组<code>[]</code>跟类型名放在一起<br>  例：<code>int[]</code></li><li>不要加<code>is</code>前缀</li><li>包名<ul><li>公司域名，项目名</li><li>util</li><li>包名都是单数，枚举是复数enums</li></ul></li><li>命名<ul><li>英文命名</li><li>简短清晰</li></ul></li><li>表示类型单词放在词尾</li><li>接口<ul><li>interface</li><li>接口和实现类Impl</li><li>SOA</li></ul></li><li>注解<ul><li>方法作用</li><li>时间</li><li>作者</li></ul></li><li>代码<ul><li>不要标黄</li><li>不要写死，配置文件，数据库</li><li>运行在内存中</li><li>开发文档代码要一致</li></ul></li><li>枚举<ul><li>词尾加上Enum</li><li>以，分隔</li><li>常量命名</li></ul></li><li>魔法值<ul><li>定义常量来比较</li><li>会出现警告</li></ul></li><li>Long<ul><li>定义需要<code>L</code></li></ul></li><li>变量<ul><li>定义用封装类型</li></ul></li><li>括号<ul><li>左大括号<code>&#123;</code>前加空格</li></ul></li><li>空格<ul><li>运算符左右两边加空格</li><li>缩进用四个空格，设置TAB为四个空格</li></ul></li><li>参数<ul><li>多个参数之间有空格</li></ul></li><li>方法<ul><li>单个方法总数不超过八十行</li><li>方法复用需要封装</li><li>方法过于肥需要拆解</li></ul></li><li>覆写<ul><li>必须加@Override注解</li></ul></li><li>比较<ul><li>已知的值放在未知的值前面</li></ul></li><li>序列化</li><li>日期和时间<ul><li>yyyy-MM-dd HH:mm:ss</li><li>时间格式转换类不安全</li></ul></li><li>集合<ul><li>迭代器</li><li>判断空<ul><li>null</li><li>isEmpty()，不能是size==0，isNotBlank()</li></ul></li><li>整体赋值方法</li><li>stream</li></ul></li><li>jdk8特性</li><li>范泛型</li><li>类<ul><li>尽量不要进行类的强制转换</li></ul></li><li>循环<ul><li>for</li><li>foreach</li><li>要考虑性能，不要在循环体内使用sql操作</li><li>死循环内存溢出</li></ul></li><li>注释<ul><li>类注释</li><li>方法体注释</li><li>行间注释<ul><li><code>// /* */</code></li><li>不要行尾注释</li></ul></li><li>不要混合语种</li><li><code>todo</code>待做待完善待完成注释</li></ul></li><li>前后端<ul><li>Mapping请求头<ul><li>GetMapping获取列表</li><li>PostMapping</li><li>PutMapping修改</li><li>DeleteMapping删除</li></ul></li><li>Resuful</li><li>Url传参不要太多</li></ul></li><li>数据库<ul><li><code>boolean</code></li><li>表名<ul><li>小写</li><li>没有复数</li></ul></li><li>主键<code>pk_</code></li><li>索引<code>uk_</code></li><li>表<ul><li>必备字段id，create_time，update_time</li></ul></li><li>库名与应用名一致</li><li>字段允许适当冗余，提高查询性能</li><li>合适的字符存储长度，节省空间</li></ul></li><li>sql<ul><li>不要<code>select *，count *</code>，要具体字段</li><li>超过三个表禁止<code>join</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> knowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 开发手册 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql_数据</title>
      <link href="2020/11/11/mysql-shu-ju/"/>
      <url>2020/11/11/mysql-shu-ju/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><ol><li><h3 id="插入insert-into-表名-列名1-列名2-values-值1-值2"><a href="#插入insert-into-表名-列名1-列名2-values-值1-值2" class="headerlink" title="插入insert into 表名(列名1,列名2...) values (值1,值2...);"></a><strong>插入</strong><code>insert into 表名(列名1,列名2...) values (值1,值2...);</code></h3><ul><li>字符型需要加<code>&quot;&quot;</code>或<code>&#39;&#39;</code></li><li>之前需要选择database</li><li>自增的字段不需要设置</li><li>插入多条<code>INSERT INTO 表名(列名1, 列名2...) VALUES (值1，值2...),(值1，值2...)......;</code></li><li>所有列都需要添加时可以不规定列<code>INSERT INTO 表名 VALUES (值1,值2...);</code><br>例：<figure class="highlight"><table><tr><td class="code"><pre><span class="line">root@host<span class="comment"># mysql -u root -p password;</span></span><br><span class="line">Enter password:*******</span><br><span class="line">mysql&gt; use RUNOOB;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; INSERT INTO runoob_tbl </span><br><span class="line">    -&gt; (runoob_title, runoob_author, submission_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (&quot;学习 PHP&quot;, &quot;菜鸟教程&quot;, NOW());</span><br><span class="line">Query OK, 1 rows affected, 1 warnings (0.01 sec)</span><br><span class="line">mysql&gt; INSERT INTO runoob_tbl</span><br><span class="line">    -&gt; (runoob_title, runoob_author, submission_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (&quot;学习 MySQL&quot;, &quot;菜鸟教程&quot;, NOW());</span><br><span class="line">Query OK, 1 rows affected, 1 warnings (0.01 sec)</span><br><span class="line">mysql&gt; INSERT INTO runoob_tbl</span><br><span class="line">    -&gt; (runoob_title, runoob_author, submission_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (&quot;JAVA 教程&quot;, &quot;RUNOOB.COM&quot;, &#x27;2016-05-06&#x27;);</span><br><span class="line">Query OK, 1 rows affected (0.00 sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></li><li>NOW（）函数是mysql函数，返回日期和时间</li></ul></li><li><h3 id="读取-SELECT-列名1-列名2"><a href="#读取-SELECT-列名1-列名2" class="headerlink" title="读取`SELECT 列名1,列名2"></a><strong>读取</strong>`SELECT 列名1,列名2</h3> FROM 表名 [WHERE Clause]  [LIMIT N][ OFFSET M]`<ul><li><h4 id="读取全部select-from-表名"><a href="#读取全部select-from-表名" class="headerlink" title="读取全部select * from 表名;"></a><strong>读取全部</strong><code>select * from 表名;</code></h4></li><li><code>where</code>设定查询条件</li><li><code>*</code>可以替代其他字段</li><li><code>limit</code>设置返回记录数<br><img src="https://i.loli.net/2020/11/07/23aOgwTH7MmASlh.png" alt="Snipaste_2020-11-07_22-52-28.png"></li><li><h4 id="offset设置数据偏移量（跳过n条记录）limit-n-m从第-N-条记录开始-返回-M-条记录"><a href="#offset设置数据偏移量（跳过n条记录）limit-n-m从第-N-条记录开始-返回-M-条记录" class="headerlink" title="offset设置数据偏移量（跳过n条记录）limit n,m从第 N 条记录开始, 返回 M 条记录"></a><code>offset</code>设置数据偏移量（跳过n条记录）<code>limit n,m</code>从第 N 条记录开始, 返回 M 条记录</h4><img src="https://i.loli.net/2020/11/07/OXZ3YDVLbIfd2ws.png" alt="Snipaste_2020-11-07_22-53-21.png"></li><li><h4 id="实现分页select-from-table-limit-page-number-1-lines-perpage-lines-perpage或select-from-table-limit-lines-perpage-offset-page-number-1-lines-perpage"><a href="#实现分页select-from-table-limit-page-number-1-lines-perpage-lines-perpage或select-from-table-limit-lines-perpage-offset-page-number-1-lines-perpage" class="headerlink" title="实现分页select * from _table limit (page_number-1)*lines_perpage, lines_perpage或select * from _table limit lines_perpage offset (page_number-1)*lines_perpage"></a><strong>实现分页</strong><code>select * from _table limit (page_number-1)*lines_perpage, lines_perpage或select * from _table limit lines_perpage offset (page_number-1)*lines_perpage</code></h4><ul><li><img src="https://i.loli.net/2020/11/07/29qcjRsuXhg7yrC.png" alt="Snipaste_2020-11-07_23-01-22.png"></li><li>分页公式</li></ul><ol><li>limit分页公式：curPage是<strong>当前第几页</strong>；pageSize是一页<strong>多少条记录</strong><figure class="highlight"><table><tr><td class="code"><pre><span class="line">limit  (curPage-1)*pageSize,pageSize</span><br></pre></td></tr></table></figure></li><li>总页数公式：totalRecord是总记录数；pageSize是一页分多少条记录<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">int totalPageNum = (totalRecord +pageSize - 1) / pageSize;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ol><pre><code>- #### **模糊查询**    - `%`匹配任意类型和长度的字符    例：`SELECT * FROM 表名 WHERE 字段名 LIKE &#39;%三%&#39;`    例：`SELECT * FROM [user] WHERE u_name LIKE &#39;%三%&#39; AND u_name LIKE &#39;%猫%&#39;`    例：`SELECT * FROM [user] WHERE u_name LIKE &#39;%三%猫%&#39;`![Snipaste_2020-11-07_23-08-09.png](https://i.loli.net/2020/11/07/wdmueZ9BlNWEoqR.png)    - `_`匹配单个任意字符    例：`SELECT * FROM 表名 WHERE 字段名LIKE &#39;_三_&#39;`    ![Snipaste_2020-11-07_23-10-38.png](https://i.loli.net/2020/11/07/sx3fW9X82ukODCb.png)    - `[]`匹配括号内所列字符中的一个，指定一个字符、字符串或范围，如 [ ] 内有一系列字符（01234、abcde之类的）则可略写为“0-4”、“a-e”    例：`SELECT * FROM [user] WHERE u_name LIKE &#39;[张李王]三&#39;`    - `[^]`匹配不在括号所列之内的单个字符    例：`SELECT * FROM [user] WHERE u_name LIKE &#39;[^张李王]三&#39;`    - 多字段模糊搜索    例：`SELECT * FROM 表名 WHERE CONCAT(字段名,字段名...) LIKE \&quot;%\&quot;?\&quot;%\&quot;`    - JDBC实现    ![Snipaste_2020-12-06_20-57-12.png](https://i.loli.net/2020/12/06/6G5j4KEeItL9lAk.png)- #### **查询通配符**，特殊字符用“[ ]”括起便可正常查询- `between`字段范围查询![Snipaste_2020-11-07_23-24-29.png](https://i.loli.net/2020/11/07/RaOUQVopYESejX1.png)- `in`字段下固定条件数据![Snipaste_2020-11-07_23-25-56.png](https://i.loli.net/2020/11/07/SRhoZBjDynrKGdM.png)- `distinct`查询去重值例：`SELECT DISTINCT 字段名 FROM 表名;`![Snipaste_2020-11-07_23-28-13.png](https://i.loli.net/2020/11/07/b3LmWO1dp9xGVnN.png)- #### **关联查询**[查看链接下方评论](https://www.runoob.com/mysql/mysql-select-query.html)- `and`或`or`指定多个条件- 操作符| 操作符 | 解释 ||:--------:| -------------:||=|等于||&lt;&gt;或!=|不等于||&gt;|大于||&lt;|小于||&gt;=|大于等于||&lt;=|小于等于|- `binary`区分大小写例：`SELECT * from  表名 WHERE  BINARY  字段名=值;`- `group by`对select查询出来的结果集按照某个字段或表达式进行分组- `order by`对结果集排序    - `asc`（不加也行）顺序    ![Snipaste_2020-11-07_23-53-24.png](https://i.loli.net/2020/11/07/fUswuvLzibMxQ2c.png)    - `desc`逆序![Snipaste_2020-11-07_23-54-14.png](https://i.loli.net/2020/11/07/mhp8ALKFZJYvnqe.png)- `is null`和`is not null`空值查询= 和 != 运算符是不起作用的![Snipaste_2020-11-08_01-26-45.png](https://i.loli.net/2020/11/08/KpEJZ4TsDRXqP9i.png)![Snipaste_2020-11-08_01-29-41.png](https://i.loli.net/2020/11/08/eHgjfxP3LAEltUd.png)</code></pre><ol start="3"><li><h3 id="update"><a href="#update" class="headerlink" title="update"></a><code>update</code></h3><p> 例：<code>UPDATE 表名 SET 字段1=值1, 字段2=值2 [WHERE Clause]</code><br> <img src="https://i.loli.net/2020/11/07/5zU3QHqj4VRPXbf.png" alt="Snipaste_2020-11-07_23-58-18.png"></p><ul><li><h4 id="实现全体数值修改"><a href="#实现全体数值修改" class="headerlink" title="实现全体数值修改"></a>实现全体数值修改</h4><img src="https://i.loli.net/2020/11/08/TuU9IVD8kcWLyp5.png" alt="Snipaste_2020-11-08_00-00-19.png"></li><li><h4 id="replace替换字段"><a href="#replace替换字段" class="headerlink" title="replace替换字段"></a><code>replace</code>替换字段</h4><img src="https://i.loli.net/2020/11/08/bF8mQHXjlwT5iu7.png" alt="Snipaste_2020-11-08_00-03-37.png"></li></ul></li><li><h3 id="删除delete"><a href="#删除delete" class="headerlink" title="删除delete"></a>删除<code>delete</code></h3><p> 例：<code>DELETE FROM 表名 [WHERE Clause]</code></p><ul><li>不指定<code>where</code>删除所有记录</li><li><code>delete</code>，<code>drop</code>，<code>truncate</code> 都有删除表的作用<ul><li>delete 和 truncate 仅仅删除表数据，drop 连表数据和表结构一起删除</li><li>delete 是 DML 语句，操作完以后如果没有不想提交事务还可以回滚，truncate 和 drop 是 DDL 语句，操作完马上生效，不能回滚</li><li>执行的速度上，<strong>drop&gt;truncate&gt;delete</strong></li></ul></li></ul></li><li><h3 id="union"><a href="#union" class="headerlink" title="union"></a><code>union</code></h3><ul><li>将两个<code>select</code>结果集组合到一个结果集<br>例：<code>SELECT 字段1, 字段2... FROM 表名 [WHERE conditions] UNION [ALL | DISTINCT] SELECT 字段1, 字段2... FROM 表名 [WHERE conditions];</code></li><li><code>DISTINCT</code> 可选，删除结果集中重复的数据。默认情况下 UNION 操作符已经删除了重复数据，所以 DISTINCT 修饰符对结果没啥影响。</li><li><code>ALL</code> 可选，返回所有结果集，包含重复数据。<br><img src="https://i.loli.net/2020/11/08/CGuK29Q7nxzefyc.png" alt="Snipaste_2020-11-08_00-14-10.png"></li></ul></li><li><h3 id="group-by分组及分组条件"><a href="#group-by分组及分组条件" class="headerlink" title="group by分组及分组条件"></a><code>group by</code>分组及分组条件</h3><ul><li><code>count</code><br><img src="https://i.loli.net/2020/11/08/D4h9Hnq6TwABcWX.png" alt="Snipaste_2020-11-08_01-08-57.png"></li><li><code>rollup</code>实现分组的基础上加上相同的统计<br><img src="https://i.loli.net/2020/11/08/pKy7tYhwj19H2dx.png" alt="Snipaste_2020-11-08_01-12-38.png"></li><li><code>coalesce</code>取代null<br>参数说明：如果<code>a==null</code>,则选择b；如果<code>b==null</code>,则选择c；如果<code>a!=null</code>,则选择a；如果a b c 都为null ，则返回为null（没意义）<br><img src="https://i.loli.net/2020/11/08/mFro3vBVAJHdn8T.png" alt="Snipaste_2020-11-08_01-15-18.png"></li></ul></li><li><h3 id="join连接"><a href="#join连接" class="headerlink" title="join连接"></a><code>join</code>连接</h3><ul><li><code>inner join</code>内连接，等值连接，可以省略inner，获取两个表中字段匹配关系的记录。<br><img src="https://i.loli.net/2020/11/08/1pVDXkFSy3WthKL.png" alt="Snipaste_2020-11-08_01-22-38.png"></li><li><code>left join</code>左连接，获取左表所有记录，即使右表没有对应匹配的记录。</li><li><code>right join</code>右连接，获取右表所有记录，即使左表没有对应匹配的记录。</li></ul></li><li><h3 id="alter修改"><a href="#alter修改" class="headerlink" title="alter修改"></a><code>alter</code>修改</h3><ul><li><p><code>drop</code>删除字段，只剩一个字段时无法删除<br><img src="https://i.loli.net/2020/11/09/JVirwk8xqNWoR43.png" alt="Snipaste_2020-11-09_14-51-19.png"></p></li><li><p><code>add</code>添加字段<br><img src="https://i.loli.net/2020/11/09/lEecPKTqR153Crm.png" alt="Snipaste_2020-11-09_14-52-51.png"></p></li><li><p><code>FIRST</code> (设定位第一列)， <code>AFTER</code> 字段名（设定位于某个字段之后）<br><img src="https://i.loli.net/2020/11/09/jwTSoJfm1zRclsx.png" alt="Snipaste_2020-11-09_14-57-13.png"></p></li><li><p><code>modify</code>和<code>change</code><br>前者直接写新格式，后者需要新旧一起写<br><img src="https://i.loli.net/2020/11/09/zyjCS8Wd9UtuKnN.png" alt="Snipaste_2020-11-09_15-06-41.png"></p></li><li><p>默认值<code>default</code></p><ul><li>设置默认值且不为null<br><img src="https://i.loli.net/2020/11/09/MneRvZwAszj5Kho.png" alt="Snipaste_2020-11-09_15-11-17.png"></li><li>修改默认值<br><img src="https://i.loli.net/2020/11/09/MVjspfDPa7y6Q9Y.png" alt="Snipaste_2020-11-09_15-13-13.png"></li><li>删除默认值<br><img src="https://i.loli.net/2020/11/09/VNZg68mXq5R2noE.png" alt="Snipaste_2020-11-09_15-13-51.png"></li><li>修改表类型<br><img src="https://i.loli.net/2020/11/09/tLMm3hdWAQ2RzSP.png" alt="Snipaste_2020-11-09_15-15-43.png"></li><li>修改表名<br><img src="https://i.loli.net/2020/11/09/NbfodnzsrkyGPM2.png" alt="Snipaste_2020-11-09_15-17-02.png"></li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> knowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题传送门</title>
      <link href="2020/11/10/mian-shi-ti-chuan-song-men/"/>
      <url>2020/11/10/mian-shi-ti-chuan-song-men/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="面试题-java"><a href="#面试题-java" class="headerlink" title="面试题_java"></a><a href="https://www.lileiblog.top/2020/10/14/mian-shi-ti-java/">面试题_java</a></h2><h2 id="面试题-function"><a href="#面试题-function" class="headerlink" title="面试题_function"></a><a href="https://www.lileiblog.top/2020/10/01/mian-shi-ti-function/">面试题_function</a></h2><h2 id="面试题-前端"><a href="#面试题-前端" class="headerlink" title="面试题_前端"></a><a href="https://www.lileiblog.top/2020/10/01/mian-shi-ti-qian-duan/">面试题_前端</a></h2><h2 id="面试题-ssm"><a href="#面试题-ssm" class="headerlink" title="面试题_ssm"></a><a href="https://www.lileiblog.top/2020/10/01/mian-shi-ti-ssm/">面试题_ssm</a></h2><h2 id="面试题-os"><a href="#面试题-os" class="headerlink" title="面试题_os"></a><a href="https://www.lileiblog.top/2020/09/30/mian-shi-ti-os/">面试题_os</a></h2><h2 id="面试题-thread"><a href="#面试题-thread" class="headerlink" title="面试题_thread"></a><a href="https://www.lileiblog.top/2020/09/30/mian-shi-ti-thread/">面试题_thread</a></h2><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a><a href="https://www.lileiblog.top/2020/09/29/mian-shi-ti/">面试题</a></h2>]]></content>
      
      
      <categories>
          
          <category> Portal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> portal </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html</title>
      <link href="2020/11/09/html/"/>
      <url>2020/11/09/html/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>超文本<strong>标记语言</strong></li><li>标记语言是一套<strong>标记标签</strong>（用来描述网页）</li><li>.htm或.html</li><li>大小写不敏感</li></ul><hr><h2 id="html标签（标记）"><a href="#html标签（标记）" class="headerlink" title="html标签（标记）"></a>html标签（标记）</h2><ul><li>尖括号包围<code>&lt;html&gt;</code></li><li>通常成对出现<code>&lt;b&gt;&lt;/b&gt;</code>，第一个叫<strong>开始标签</strong>（开放标签），第二个叫<strong>结束标签</strong>（闭合标签）</li><li>空标签，只包含属性，没有闭合标签</li></ul><ol><li><h3 id="lt-h1-gt-—-lt-h6-gt-标题"><a href="#lt-h1-gt-—-lt-h6-gt-标题" class="headerlink" title="&lt;h1&gt;—&lt;h6&gt;标题"></a><code>&lt;h1&gt;</code>—<code>&lt;h6&gt;</code>标题</h3></li><li><h3 id="lt-p-gt-段落"><a href="#lt-p-gt-段落" class="headerlink" title="&lt;p&gt;段落"></a><code>&lt;p&gt;</code>段落</h3><ul><li>浏览器会自动在段落前后添加空行</li><li>应该使用<code>&lt;br/&gt;</code>替换<code>&lt;p&gt;&lt;/p&gt;</code>来实现空行</li></ul></li><li><h3 id="lt-a-gt-链接"><a href="#lt-a-gt-链接" class="headerlink" title="&lt;a&gt;链接"></a><code>&lt;a&gt;</code>链接</h3><ul><li>href属性指定链接地址</li><li><code>target=&quot;_blank&quot;</code>，链接会在新窗口打开</li></ul></li><li><h3 id="lt-img-gt-图像"><a href="#lt-img-gt-图像" class="headerlink" title="&lt;img&gt;图像"></a><code>&lt;img&gt;</code>图像</h3><ul><li>src图片地址</li><li>width，height图片尺寸</li><li>alt，替换文本属性，图像不加载时显示的文本</li></ul></li><li><h3 id="lt-hr-gt-水平线"><a href="#lt-hr-gt-水平线" class="headerlink" title="&lt;hr&gt;水平线"></a><code>&lt;hr&gt;</code>水平线</h3><ul><li>分割内容</li></ul></li><li><h3 id="lt-gt-注释"><a href="#lt-gt-注释" class="headerlink" title="&lt;!-- --&gt;注释"></a><code>&lt;!-- --&gt;</code>注释</h3><ul><li>提高可读性</li><li>浏览器会忽视注释</li></ul></li><li><h3 id="lt-br-gt-折行"><a href="#lt-br-gt-折行" class="headerlink" title="&lt;br/&gt;折行"></a><code>&lt;br/&gt;</code>折行</h3><ul><li>不产生新段落的情况下换行</li><li>浏览器会移除源代码众多与的空格和换行，所有<strong>连续的空格和换行</strong>会被算作一个<strong>空格</strong></li></ul></li><li><h3 id="lt-table-gt"><a href="#lt-table-gt" class="headerlink" title="&lt;table&gt;"></a><code>&lt;table&gt;</code></h3><ul><li>包含行<code>&lt;tr&gt;</code>，单元格<code>&lt;td&gt;</code>，表头<code>&lt;th&gt;</code>（大多数浏览器为粗体居中）</li><li>border定义边框，通常情况下无边框</li><li>空的单元格可以使用空格占位符将边框显现出来<br><img src="https://i.loli.net/2020/11/09/FYZtaB8HIMDyeRl.png" alt="Snipaste_2020-11-09_17-07-23.png"></li><li>caption，定义表格标题，居中唯一</li><li>thead，页眉，tbody，主题，tfoot，页脚</li></ul></li><li><h3 id="lt-li-gt-lt-li-gt-列表项"><a href="#lt-li-gt-lt-li-gt-列表项" class="headerlink" title="&lt;li&gt;&lt;/li&gt;列表项"></a><code>&lt;li&gt;&lt;/li&gt;</code>列表项</h3><ul><li><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4>  <code>&lt;ul&gt;&lt;/ul&gt;</code><br>  可以嵌套使用，标记点会有变化  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>咖啡<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>茶</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>红茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>绿茶</span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>中国茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>非洲茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>牛奶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>  <img src="https://i.loli.net/2020/11/10/cgLdS1ATE6GQOtx.png" alt="Snipaste_2020-11-10_16-53-33.png"></li><li><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><ul><li><code>type</code>递增标点类型<br><code>&lt;ol&gt;&lt;/ol&gt;</code> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>数字列表：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>柠檬<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>桔子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>字母列表：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;A&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>柠檬<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>桔子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>小写字母列表：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>柠檬<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>桔子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>罗马字母列表：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;I&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>柠檬<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>桔子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>小写罗马字母列表：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;i&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>柠檬<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>桔子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span>  </span><br><span class="line">```</span><br><span class="line">![Snipaste_2020-11-10_16-57-14.png](https://i.loli.net/2020/11/10/VcEQIuelsoJTH9h.png)</span><br><span class="line">- #### 自定义列表项</span><br><span class="line">```html</span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>Black hot drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>White cold drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>这是两个没有定义的自定义列表项<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>这是两个没有定义的自定义列表项<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/11/10/7adrZXutHKDQqBO.png" alt="Snipaste_2020-11-10_16-47-10.png"></li></ul></li></ul></li><li><h2 id="lt-div-gt-和-lt-span-gt-块"><a href="#lt-div-gt-和-lt-span-gt-块" class="headerlink" title="&lt;div&gt;和&lt;span&gt;块"></a><code>&lt;div&gt;和&lt;span&gt;</code>块</h2><ol><li><code>&lt;div&gt;</code>是块级元素<ul><li>表格布局</li><li>对内容块设置样式属性</li></ul></li><li><code>&lt;span&gt;</code>是内联元素<ul><li>为部分文本设置样式属性</li></ul></li></ol></li></ol><hr><h2 id="html文档-网页"><a href="#html文档-网页" class="headerlink" title="html文档 = 网页"></a>html文档 = 网页</h2><ul><li>html文档描述网页</li><li>文档包含<strong>html标签</strong>和<strong>纯文本</strong></li><li>浏览器不会显示html标签，而是使用标签解释页面内容<br>例：<br>  <code>&lt;html&gt;文本&lt;/html&gt;</code>，文本描述网页<br>  <code>&lt;body&gt;文本&lt;/body&gt;</code>，文本可见的网页内容</li></ul><hr><h2 id="html元素"><a href="#html元素" class="headerlink" title="html元素"></a>html元素</h2><ul><li>html文档由html元素定义</li><li>从开始标签到结束标签的所有代码</li><li>可以有空内容（在开始标签中进行关闭）</li><li>大多数元素可以有属性</li><li>大多数可以嵌套</li><li>大多数html元素分为<strong>块级元素</strong>（通常以新行开始结束）和<strong>内联元素</strong>（通常不以新行开始）</li></ul><hr><h2 id="html属性"><a href="#html属性" class="headerlink" title="html属性"></a>html属性</h2><ul><li><strong>名称/值</strong></li><li>开始标签中规定</li><li>属性值加<strong>引号</strong><code>&quot;&quot;</code></li></ul><ol><li><h3 id="避免使用的标签和属性"><a href="#避免使用的标签和属性" class="headerlink" title="避免使用的标签和属性"></a>避免使用的标签和属性</h3><ul><li>应使用样式替代</li><li>标签<ul><li><code>&lt;center&gt;</code>，定义居中</li><li><code>font</code>/<code>basefont</code>，定义字体</li><li><code>s</code>/<code>strike</code>，定义删除线文本</li><li><code>u</code>，定义下划线文本</li></ul></li><li>属性<ul><li><code>align</code>，定义文本对齐方式</li><li><code>bgcolor</code>，定义背景颜色</li><li><code>color</code>，定义文本颜色</li></ul></li></ul></li><li><h3 id="href，-lt-a-gt-中指定，链接的地址"><a href="#href，-lt-a-gt-中指定，链接的地址" class="headerlink" title="href，&lt;a&gt;中指定，链接的地址"></a>href，<code>&lt;a&gt;</code>中指定，链接的地址</h3></li><li><h3 id="algin，对齐方式"><a href="#algin，对齐方式" class="headerlink" title="algin，对齐方式"></a>algin，对齐方式</h3><ul><li>center，居中</li><li>left，right</li><li>文本<ul><li><code>text-align:对齐方式</code>，文本对齐</li></ul></li></ul></li><li><h3 id="border，边框"><a href="#border，边框" class="headerlink" title="border，边框"></a>border，边框</h3></li><li><h3 id="class，元素类名"><a href="#class，元素类名" class="headerlink" title="class，元素类名"></a>class，元素类名</h3></li><li><h3 id="id，唯一"><a href="#id，唯一" class="headerlink" title="id，唯一"></a>id，唯一</h3></li><li><h3 id="style，行内样式"><a href="#style，行内样式" class="headerlink" title="style，行内样式"></a>style，行内样式</h3><ul><li>改变所有html元素的样式的通用方法</li><li>也可以在独立的样式表（css文件）中定义</li><li><code>background-color:颜色</code>，定义背景颜色</li><li>字体<ul><li><code>font-family:字体系列名称</code>，字体系列</li><li><code>font-size:大小</code>，字体大小</li><li><code>color:颜色</code>，字体颜色</li></ul></li></ul></li><li><h3 id="title，规定元素额外信息"><a href="#title，规定元素额外信息" class="headerlink" title="title，规定元素额外信息"></a>title，规定元素额外信息</h3></li><li><h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><ul><li>对读者不可见</li><li>可以创建直接跳至改命名锚的链接<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;label&quot;</span>&gt;</span>锚<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#label&quot;</span>&gt;</span>提示<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">或<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;提示页面地址#label&quot;</span>&gt;</span>其它页面提示<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">## html文本</span><br><span class="line">### 文本格式化</span><br><span class="line">```html</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>b 变大<span class="tag">&lt;<span class="name">b</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">big</span>&gt;</span>big 大号字<span class="tag">&lt;<span class="name">big</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>strong 加重语气<span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>small 小号字<span class="tag">&lt;<span class="name">small</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>em 着重<span class="tag">&lt;<span class="name">em</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>i 斜体字<span class="tag">&lt;<span class="name">i</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>sub 下标字<span class="tag">&lt;<span class="name">sub</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>sup 上标字<span class="tag">&lt;<span class="name">sup</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>ins 插入字<span class="tag">&lt;<span class="name">ins</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>del 删除字<span class="tag">&lt;<span class="name">del</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/11/09/ruW6LpXZhAbok3m.png" alt="Snipaste_2020-11-09_11-43-59.png"></li></ul></li></ol><h3 id="预格式文本"><a href="#预格式文本" class="headerlink" title="预格式文本"></a>预格式文本</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">这是</span><br><span class="line">预格式文本。</span><br><span class="line">它保留了      空格</span><br><span class="line">和换行。</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>pre 标签很适合显示计算机代码：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">for i = 1 to 10</span><br><span class="line">     print i</span><br><span class="line">next i</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/09/3Kh1WpvaCFZmgrx.png" alt="Snipaste_2020-11-09_11-47-43.png"></p><h3 id="计算技术标签，代码标签"><a href="#计算技术标签，代码标签" class="headerlink" title="计算技术标签，代码标签"></a>计算技术标签，代码标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>Computer code<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Keyboard input<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tt</span>&gt;</span>Teletype text<span class="tag">&lt;/<span class="name">tt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">samp</span>&gt;</span>Sample text<span class="tag">&lt;/<span class="name">samp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">var</span>&gt;</span>Computer variable<span class="tag">&lt;/<span class="name">var</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/09/CpxQXa2NZAgtI1m.png" alt="Snipaste_2020-11-09_11-51-47.png"></p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">Written by <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:webmaster@example.com&quot;</span>&gt;</span>Donald Duck<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">Visit us at:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Example.com<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Box 564, Disneyland<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">USA</span><br><span class="line"><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><ul><li>在某些浏览器中，当您把鼠标移至缩略词语上时，title 可用于展示表达的完整版本。</li><li>仅对于 IE 5 中的 acronym 元素有效。</li><li>对于 Netscape 6.2 中的 abbr 和 acronym 元素都有效。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">&quot;etcetera&quot;</span>&gt;</span>etc.<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">acronym</span> <span class="attr">title</span>=<span class="string">&quot;World Wide Web&quot;</span>&gt;</span>WWW<span class="tag">&lt;/<span class="name">acronym</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/11/09/DmFvPuXANbHCxK5.png" alt="Snipaste_2020-11-09_11-55-56.png"></li></ul><p>###文字方向</p><ul><li>需要浏览器支持 <strong>bi-directional override (bdo)</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bdo</span> <span class="attr">dir</span>=<span class="string">&quot;rtl&quot;</span>&gt;</span></span><br><span class="line">Here is some Hebrew text</span><br><span class="line"><span class="tag">&lt;/<span class="name">bdo</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ul><li>使用 blockquote 元素的话，浏览器会插入换行和外边距，而 q 元素不会有任何特殊的呈现。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">这是长的引用：</span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。</span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"></span><br><span class="line">这是短的引用：</span><br><span class="line"><span class="tag">&lt;<span class="name">q</span>&gt;</span></span><br><span class="line">这是短的引用。</span><br><span class="line"><span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/11/09/7RSQP8miEUhvXIc.png" alt="Snipaste_2020-11-09_12-00-54.png"></li></ul><hr><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><ul><li>通过使用 HTML4.0，所有的格式化代码均可移出 HTML 文档，然后移入一个独立的样式表。</li><li>使用<ul><li>外部样式表，一般应用在多个页面<br><code>&lt;link rel=&quot;&quot; type=&quot;&quot; href=&quot;&quot;&gt;</code></li><li>内部样式表，一般应用在单个页面<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span> &#123;&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span> &#123;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>/&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>内联样式，一般应用在个别元素<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">内容</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="html类"><a href="#html类" class="headerlink" title="html类"></a>html类</h2><p>为相同的类设置样式</p><ul><li><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.cities</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span><span class="selector-pseudo">:blue</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span><span class="selector-pseudo">:white</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">margin</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">padding</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cities&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>London<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>London is the capital city of England. </span><br><span class="line">It is the most populous city in the United Kingdom, </span><br><span class="line">with a metropolitan area of over 13 million inhabitants.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cities&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Paris<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Paris is the capital and most populous city of France.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cities&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Tokyo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Tokyo is the capital of Japan, the center of the Greater Tokyo Area,</span><br><span class="line">and the most populous metropolitan area in the world.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>  <img src="https://i.loli.net/2020/11/10/Zvx9qpQOayzRTrS.png" alt="Snipaste_2020-11-10_17-13-30.png"></li><li><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">span</span><span class="selector-class">.red</span> &#123;<span class="attribute">color</span>:red;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>Important<span class="tag">&lt;/<span class="name">span</span>&gt;</span> Heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>  <img src="https://i.loli.net/2020/11/10/jVOumrIkqHKbQnU.png" alt="Snipaste_2020-11-10_17-15-34.png"></li></ul><hr><h2 id="响应式WEB设计"><a href="#响应式WEB设计" class="headerlink" title="响应式WEB设计"></a>响应式WEB设计</h2><p>RWD （Responsive Web Design）</p><ol><li>自己创建</li><li>Bootstrap（开发响应式web的html，css，js框架）</li></ol><hr><h2 id="html框架"><a href="#html框架" class="headerlink" title="html框架"></a>html框架</h2><ul><li>可以在浏览器窗口显示不止一个框架（每份HTML文档），每个框架独立于其他框架</li><li>制作<strong>导航栏</strong></li><li>缺点<ul><li>需要跟踪更多的html文档</li><li>很难打印整张页面</li></ul></li><li><h3 id="lt-frameset-gt-（rows行框架，cols列框架）"><a href="#lt-frameset-gt-（rows行框架，cols列框架）" class="headerlink" title="&lt;frameset&gt;（rows行框架，cols列框架）"></a><code>&lt;frameset&gt;</code>（rows行框架，cols列框架）</h3><ul><li>混合框架<br><img src="https://i.loli.net/2020/11/11/HDI2T8EKb5SLX9q.png" alt="Snipaste_2020-11-11_09-27-23.png"></li><li>导航框架<br>两个框架，每个框架里有一个html页面，期中一个页面包含三个框架链接<br><img src="https://i.loli.net/2020/11/11/qhbenN5SBVdDfvx.png" alt="Snipaste_2020-11-11_09-28-31.png"></li><li>内联框架<br>可以调整大小<br><img src="https://i.loli.net/2020/11/11/AfC7eHBPjzL1k3V.png" alt="Snipaste_2020-11-11_09-32-24.png"></li></ul></li><li>属性<ul><li><code>noresize=&quot;noresize&quot;</code>是框架无法拖动</li></ul></li></ul><hr><h2 id="html页面布局"><a href="#html页面布局" class="headerlink" title="html页面布局"></a>html页面布局</h2><h3 id="lt-div-gt"><a href="#lt-div-gt" class="headerlink" title="&lt;div&gt;"></a><code>&lt;div&gt;</code></h3><ul><li>语义元素<br><img src="https://i.loli.net/2020/11/16/Otol1Y9i57gsV2I.png" alt="Snipaste_2020-11-16_10-41-00.png"><h3 id="lt-table-gt-1"><a href="#lt-table-gt-1" class="headerlink" title="&lt;table&gt;"></a><code>&lt;table&gt;</code></h3><h4 id="lt-th-gt-表头"><a href="#lt-th-gt-表头" class="headerlink" title="&lt;th&gt;表头"></a><code>&lt;th&gt;</code>表头</h4><h4 id="lt-tr-gt-行"><a href="#lt-tr-gt-行" class="headerlink" title="&lt;tr&gt;行"></a><code>&lt;tr&gt;</code>行</h4><h4 id="lt-td-gt-单元格"><a href="#lt-td-gt-单元格" class="headerlink" title="&lt;td&gt;单元格"></a><code>&lt;td&gt;</code>单元格</h4></li></ul><hr><h2 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h2><ul><li>RWD （Responsive Web Design）</li><li>RWD 能够以可变尺寸传递网页</li><li>RWD 对于平板和移动设备是必需的</li></ul><ol><li>手写</li><li>Bootstrap 是最流行的开发响应式 web 的 HTML, CSS, 和 JS 框架。</li></ol><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ol><li>颜色<code>bgcolor</code><ul><li>属性值可以是十六进制数、RGB 值或颜色名。<ul><li><code>bgcolor=&quot;#000000&quot;</code></li><li><code>bgcolor=&quot;rgb(0,0,0)&quot;</code></li><li><code>bgcolor=&quot;black&quot;</code></li></ul></li></ul></li><li>图像<code>background</code><ul><li>属性值为图像的URL（相对地址、绝对地址）</li><li>如果图像尺寸小于浏览器窗口，那么图像将在整个浏览器窗口进行复制。<ul><li><code>background=&quot;clouds.gif&quot;</code>    </li><li><code>background=&quot;http://www.w3school.com.cn/clouds.gif&quot;</code></li></ul></li><li>背景图片会增加页面加载时间</li></ul></li></ol><hr><h2 id="html脚本"><a href="#html脚本" class="headerlink" title="html脚本"></a>html脚本</h2><ul><li><code>&lt;script&gt;</code></li></ul><hr><h2 id="html文件路径"><a href="#html文件路径" class="headerlink" title="html文件路径"></a>html文件路径</h2><p><img src="https://i.loli.net/2020/11/16/ZA5zYfWCT9mkba1.png" alt="Snipaste_2020-11-16_10-56-54.png"></p><ul><li>绝对路径<br>  指向一个因特网文件的完整url</li><li>相对路径<br>  相对于当前页面的文件</li><li>使用相对路径是个好习惯（如果可能）。</li></ul><hr><h2 id="html头部元素"><a href="#html头部元素" class="headerlink" title="html头部元素"></a>html头部元素</h2><ul><li><h3 id="lt-title-gt-文档标题"><a href="#lt-title-gt-文档标题" class="headerlink" title="&lt;title&gt;文档标题"></a><code>&lt;title&gt;</code>文档标题</h3><ul><li>是必需的</li><li>页面被添加到收藏夹时显示的标题</li><li>搜索引擎结果中的页面标题</li></ul></li><li>有<code>target=&quot;_blank&quot;</code>或没有链接都会在新表签页中打开</li><li><h3 id="lt-meta-gt-文档关键词"><a href="#lt-meta-gt-文档关键词" class="headerlink" title="&lt;meta&gt;文档关键词"></a><code>&lt;meta&gt;</code>文档关键词</h3><ul><li>规定页面的描述、关键词、文档的作者、最后修改时间以及其他元数据</li><li>一些搜索引擎会利用 meta 元素的 name 和 content 属性来索引您的页面<br>例：<code>&lt;meta name=&quot;keywords&quot; content=&quot;HTML, DHTML, CSS, XML, XHTML, JavaScript, VBScript&quot;&gt;</code></li><li>重定向<br>  例：<code>&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;5;url=http://www.w3school&quot; /&gt;</code></li></ul></li><li><h3 id="lt-base-gt"><a href="#lt-base-gt" class="headerlink" title="&lt;base&gt;"></a><code>&lt;base&gt;</code></h3><ul><li>为页面上所有链接提供默认地址<br>例：<code>&lt;base href=&quot;http://www.w3school.com.cn/images/&quot; /&gt;</code></li></ul></li><li><h3 id="lt-link-gt"><a href="#lt-link-gt" class="headerlink" title="&lt;link&gt;"></a><code>&lt;link&gt;</code></h3><ul><li>定义文档与外部资源之间关系</li><li>连接样式表<br>  例：<code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot; /&gt;</code></li></ul></li><li><h3 id="lt-style-gt"><a href="#lt-style-gt" class="headerlink" title="&lt;style&gt;"></a><code>&lt;style&gt;</code></h3><ul><li>定义样式</li></ul></li><li><h3 id="lt-script-gt"><a href="#lt-script-gt" class="headerlink" title="&lt;script&gt;"></a><code>&lt;script&gt;</code></h3><ul><li>脚本</li></ul></li></ul><hr><h2 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h2><ul><li>预留字符必须被替换成字符实体</li><li>并不是所有浏览器都支持字符实体，对字符数字的支持很好<br><img src="https://i.loli.net/2020/11/16/DFEk6SvNVqYuUKL.png" alt="Snipaste_2020-11-16_11-18-56.png"></li></ul><hr><h2 id="html统一资源定位符（url）"><a href="#html统一资源定位符（url）" class="headerlink" title="html统一资源定位符（url）"></a>html统一资源定位符（url）</h2><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><p><code>scheme://host.domain:port/path/filename</code></p><ul><li>scheme - 定义因特网服务的类型。最常见的类型是 http<br><img src="https://i.loli.net/2020/11/16/kshoBFvHxcVw2XM.png" alt="Snipaste_2020-11-16_11-24-20.png"></li><li>host - 定义域主机（http 的默认主机是 www）</li><li>domain - 定义因特网域名，比如 w3school.com.cn</li><li>:port - 定义主机上的端口号（http 的默认端口号是 80）</li><li>path - 定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）。</li><li>filename - 定义文档/资源的名称</li></ul><hr><h2 id="HTML-lt-DOCTYPE-gt"><a href="#HTML-lt-DOCTYPE-gt" class="headerlink" title="HTML &lt;!DOCTYPE&gt;"></a>HTML &lt;!DOCTYPE&gt;</h2><p>html版本声明<br><img src="https://i.loli.net/2020/11/16/NkxhLT4yEKPRSWO.png" alt="Snipaste_2020-11-16_11-29-49.png"></p><hr><h2 id="XHTML"><a href="#XHTML" class="headerlink" title="XHTML"></a>XHTML</h2><p>以xml格式编写的html</p><hr><h2 id="画布Canvas"><a href="#画布Canvas" class="headerlink" title="画布Canvas"></a>画布Canvas</h2><ul><li><p>通过js绘制图像</p></li><li><p><code>&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;100&quot;&gt;&lt;/canvas&gt;</code><br>  赋予<code>id</code>，规定大小</p></li><li><h3 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h3>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> c=<span class="built_in">document</span>.getElementById(<span class="string">&quot;myCanvas&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> cxt=c.getContext(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="javascript">cxt.fillStyle=<span class="string">&quot;#FF0000&quot;</span>;</span></span><br><span class="line">cxt.fillRect(0,0,150,75);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  <img src="https://i.loli.net/2020/11/16/elKnY6oq4hOjWvZ.png" alt="Snipaste_2020-11-16_14-19-42.png"></p><ul><li><code>getContext(&quot;2d&quot;)</code>：内建的html5对象，内含方法</li><li><code>fillStyle</code> 方法将其染成红色</li><li><code>fillRect</code> 方法规定了形状、位置和尺寸。</li></ul></li><li><h3 id="线条"><a href="#线条" class="headerlink" title="线条"></a>线条</h3>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> c=<span class="built_in">document</span>.getElementById(<span class="string">&quot;myCanvas&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> cxt=c.getContext(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line">cxt.moveTo(70,10);</span><br><span class="line">cxt.lineTo(70,70);</span><br><span class="line">cxt.moveTo(90,10);</span><br><span class="line">cxt.lineTo(90,20);</span><br><span class="line">cxt.moveTo(90,30);</span><br><span class="line">cxt.lineTo(90,70);</span><br><span class="line">cxt.stroke()</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  <img src="https://i.loli.net/2020/11/16/sTgSKDJlF6eX8k5.png" alt="Snipaste_2020-11-16_14-27-36.png"></p></li><li><h3 id="图形"><a href="#图形" class="headerlink" title="图形"></a>图形</h3></li><li><h3 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h3></li><li><h3 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h3></li></ul><hr><h2 id="矢量图SVG"><a href="#矢量图SVG" class="headerlink" title="矢量图SVG"></a>矢量图SVG</h2><ul><li>可伸缩矢量图形</li><li><strong>XML格式</strong>定义图形</li><li>改变尺寸的情况下其图形<strong>质量不会有损失</strong></li><li>可通过文本编辑器来创建和修改</li><li>可被搜索、索引、脚本化或压缩<br>例：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">height</span>=<span class="string">&quot;190&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">polygon</span> <span class="attr">points</span>=<span class="string">&quot;100,10 40,180 190,60 10,60 160,180&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;fill:lime;stroke:purple;stroke-width:5;fill-rule:evenodd;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/11/17/JPpj1IQXSE3iTDR.png" alt="Snipaste_2020-11-17_09-14-04.png"></li></ul><hr><h2 id="Canvas-vs-SVG"><a href="#Canvas-vs-SVG" class="headerlink" title="Canvas vs SVG"></a>Canvas vs SVG</h2><ol><li>JS vs XML</li><li>SVG每个元素都可用，都可附加js事件处理器，每个绘制的图形均被视为对象，浏览器能根据属性的改变重现图形 vs Canvas中图形一旦被绘制就不能实时更改<br><img src="https://i.loli.net/2020/11/17/fxEuFsL4WzTU2v6.png" alt="Snipaste_2020-11-17_09-18-10.png"></li></ol><hr><h2 id="html多媒体"><a href="#html多媒体" class="headerlink" title="html多媒体"></a>html多媒体</h2><ul><li>多媒体<ul><li>音效、音乐、视频、动画</li></ul></li><li><h3 id="视频格式"><a href="#视频格式" class="headerlink" title="视频格式"></a>视频格式</h3>  <img src="https://i.loli.net/2020/11/17/mOAbxsUqrCW8gYL.png" alt="Snipaste_2020-11-17_09-20-21.png"></li><li><h3 id="声音格式"><a href="#声音格式" class="headerlink" title="声音格式"></a>声音格式</h3>  <img src="https://i.loli.net/2020/11/17/XIof9q1RDEjCVUw.png" alt="Snipaste_2020-11-17_09-20-56.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="2020/11/08/mysql/"/>
      <url>2020/11/08/mysql/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><h3 id="Mysql-数据"><a href="#Mysql-数据" class="headerlink" title="Mysql_数据"></a><a href="https://www.lileiblog.top/2020/11/11/mysql-shu-ju/">Mysql_数据</a></h3><hr><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><ol><li>表格形式</li><li>行为<strong>记录名称</strong> 列为记录名称对应的<strong>数据域</strong> 行列组成<strong>表单</strong> 表单组成<strong>database</strong></li><li>关系型数据库(Relational Database Management System)</li></ol><hr><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ol><li>数据库：关联表</li><li>数据表：数据的矩阵</li><li>列：相同类型的数据</li><li>行：一组相关的数据</li><li>表头：每一列名称</li><li>冗余：降低性能，提高数据安全性</li><li>主键：唯一，一个表一个，不能重复的，不允许为空<br> <strong>联合主键：就是用多个字段一起作为一张表的主键。</strong></li><li>外键：关联两个表，主键用于<strong>保证数据完整性</strong></li><li>复合键：将多个列组成一个索引键，复合索引</li><li>索引：快速访问特定信息，对一列或多列的值进行排序的一种结构，索引 该字段没有重复值但可以有一个空值，索引用于<strong>提高查询排序的速度</strong>，可以有多个唯一索引</li><li>参照完整性：保证数据一致性 </li></ol><hr><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><ol><li><p>mysql中，结果集满足联结条件，该联接是内连接</p></li><li><p>“HAVING 条件表达式”用来筛选满足条件的分组</p></li><li><p><strong>statement</strong></p><ol><li><p><strong>Statement</strong>:<br>普通的不带参的查询SQL；支持批量更新,批量删除;  </p></li><li><p><strong>PreparedStatement</strong>:<br>可变参数的SQL,编译一次,执行多次,效率高;<br>安全性好，有效防止Sql注入等问题;<br>支持批量更新,批量删除;  </p></li><li><p><strong>CallableStatement</strong>:<br>继承自PreparedStatement,支持带参数的SQL操作;<br>支持调用存储过程,提供了对输出和输入/输出参数(INOUT)的支持;</p><p>PreparedStatement可以阻止常见的SQL注入式攻击</p><p>一个占位符只能对应一个值</p></li></ol></li></ol><hr><h2 id="sql问题"><a href="#sql问题" class="headerlink" title="sql问题"></a>sql问题</h2><ol><li><h3 id="Sql语句中关于如何在LIKE’-’中给？赋值"><a href="#Sql语句中关于如何在LIKE’-’中给？赋值" class="headerlink" title="Sql语句中关于如何在LIKE’%?%’中给？赋值"></a>Sql语句中关于如何在LIKE’%?%’中给？赋值</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ct = <span class="keyword">new</span> ConnDB().getConn();</span><br><span class="line">ps = ct.prepareStatement(<span class="string">&quot;select * from news where keyWords like&#x27;%&quot;</span>+search+<span class="string">&quot;%&#x27;&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">1</span>, search)</span><br></pre></td></tr></table></figure><p> ？它代表的仅仅是一个字符，而不是一个特殊符号</p></li><li><h3 id="重复数据"><a href="#重复数据" class="headerlink" title="重复数据"></a>重复数据</h3><ol><li><h4 id="处理重复数据"><a href="#处理重复数据" class="headerlink" title="处理重复数据"></a>处理重复数据</h4></li></ol><ul><li>primary key（主键）或者unique（唯一）保证数据唯一性，（重点是表中的限制），`insert ignore into 表名 (字段1,字段2…) values(值1,值2…);<br><img src="https://i.loli.net/2020/11/10/dSGo9eZgFuktQ34.png" alt="Snipaste_2020-11-10_10-53-15.png"><br><img src="https://i.loli.net/2020/11/10/gMdb4lvVuhL8pR9.png" alt="Snipaste_2020-11-10_10-47-06_1.png"><br><img src="https://i.loli.net/2020/11/10/SrN71FjYMTRmfO8.png" alt="Snipaste_2020-11-10_10-47-06_2.png"></li><li><code>replace into 表名 (字段1,字段2...) values(值1,值2...);</code>有重复的对象会删除旧的插入新的<br><img src="https://i.loli.net/2020/11/10/UlGYbEPCiRVDqjF.png" alt="Snipaste_2020-11-10_10-50-42.png"></li></ul><ol start="2"><li><h4 id="统计重复记录"><a href="#统计重复记录" class="headerlink" title="统计重复记录"></a>统计重复记录</h4> <code>select count(*) as 别名,字段名1,字段名2... from 表名 group by 字段名1,字段名2,,, having 别名&gt;1;</code><br><img src="https://i.loli.net/2020/11/10/MkT8oDuKpOmIzsh.png" alt="Snipaste_2020-11-10_10-56-06.png"></li><li><h4 id="过滤重复记录"><a href="#过滤重复记录" class="headerlink" title="过滤重复记录"></a>过滤重复记录</h4><ul><li>按重复字段分组</li><li><code>distinct</code><br><img src="https://i.loli.net/2020/11/10/Kzuk5JFRQMar4Nj.png" alt="Snipaste_2020-11-10_13-32-53.png"></li></ul></li><li><h4 id="删除重复记录"><a href="#删除重复记录" class="headerlink" title="删除重复记录"></a>删除重复记录</h4><ul><li>按重复字段分组，重新建表<br><img src="https://i.loli.net/2020/11/10/twi1LG25dvCBZJQ.png" alt="Snipaste_2020-11-10_13-43-21.png"></li><li>在数据表中添加主键和索引</li></ul></li></ol></li></ol><hr><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><ul><li>使字段实现自增<ol><li><code>AUTO_INCREMENT</code>定义列<br><code>id INT UNSIGNED NOT NULL AUTO_INCREMENT,</code>建表时添加<br><img src="https://i.loli.net/2020/11/10/zERlHIbT9fL17VJ.png" alt="Snipaste_2020-11-10_10-06-19.png"></li><li><code>last_insert_id()</code>获取最后的插入表中的自增列的值<br><img src="https://i.loli.net/2020/11/10/kys5vOq2ZGQKXmB.png" alt="Snipaste_2020-11-10_10-07-59.png"></li><li>重置序列<br><img src="https://i.loli.net/2020/11/10/2DOIqWyfHiL3XtG.png" alt="Snipaste_2020-11-10_10-13-32.png"></li><li>设置序列开始值<ul><li><code>auto_increment=初始值</code>建表时<br><img src="https://i.loli.net/2020/11/10/mr4cynobLXG5vfW.png" alt="Snipaste_2020-11-10_10-23-53.png"></li><li><code>ALTER TABLE 表名 AUTO_INCREMENT =  100;</code>建表后</li></ul></li></ol></li></ul><hr><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ol><li><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ul><li><code>create database 数据库名;</code></li><li><code>CREATE DATABASE IF NOT EXISTS 数据库名 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</code>（数据库存在创建否则不创建，设定编码集为utf8）</li></ul></li><li><h3 id="查看所有show-databases"><a href="#查看所有show-databases" class="headerlink" title="查看所有show databases;"></a>查看所有<code>show databases;</code></h3></li><li><h3 id="删除drop-database-数据库名"><a href="#删除drop-database-数据库名" class="headerlink" title="删除drop database 数据库名;"></a>删除<code>drop database 数据库名;</code></h3></li><li><h3 id="选择use-数据库名"><a href="#选择use-数据库名" class="headerlink" title="选择use 数据库名;"></a>选择<code>use 数据库名;</code></h3></li></ol><hr><h2 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h2><ul><li><h3 id="show-status服务器状态"><a href="#show-status服务器状态" class="headerlink" title="show status服务器状态"></a><code>show status</code>服务器状态</h3>  <img src="https://i.loli.net/2020/11/10/Iisy9HJGogmWkKh.png" alt="Snipaste_2020-11-10_09-18-07.png"></li><li><h3 id="SHOW-VARIABLES服务器配置信息"><a href="#SHOW-VARIABLES服务器配置信息" class="headerlink" title="SHOW VARIABLES服务器配置信息"></a><code>SHOW VARIABLES</code>服务器配置信息</h3>  <img src="https://i.loli.net/2020/11/10/XYGPkVwvEl1IHuA.png" alt="Snipaste_2020-11-10_09-18-46.png"></li><li><h3 id="select-version服务器版本信息"><a href="#select-version服务器版本信息" class="headerlink" title="select version服务器版本信息"></a><code>select version</code>服务器版本信息</h3>  <img src="https://i.loli.net/2020/11/10/CikYWDuUASoRaVn.png" alt="Snipaste_2020-11-10_09-20-23.png"></li><li><h3 id="select-database-当前数据库名，没有选择返回null"><a href="#select-database-当前数据库名，没有选择返回null" class="headerlink" title="select database()当前数据库名，没有选择返回null"></a><code>select database()</code>当前数据库名，没有选择返回null</h3>  <img src="https://i.loli.net/2020/11/10/fbYGQ2Fy9PjcO1K.png" alt="Snipaste_2020-11-10_09-21-35.png"></li><li><h3 id="select-user-当前用户名"><a href="#select-user-当前用户名" class="headerlink" title="select user()当前用户名"></a><code>select user()</code>当前用户名</h3>  <img src="https://i.loli.net/2020/11/10/54dqCRgBY3irJ98.png" alt="Snipaste_2020-11-10_09-23-30.png"></li></ul><hr><h2 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h2><ol><li><h3 id="创建create-table-表名-列名-列类型"><a href="#创建create-table-表名-列名-列类型" class="headerlink" title="创建create table 表名(列名 列类型)"></a><strong>创建</strong><code>create table 表名(列名 列类型)</code></h3><ul><li>之前要选择database</li><li>多列之间用<code>,</code>隔开</li><li>字段不为空为<code>NOT NULL</code></li><li><code>AUTO_INCREMENT</code>为自增</li><li><code>PRIMARY KEY</code>关键字定义主键</li><li><code>ENGINE</code>设置存储引擎，<code>CHARSET</code>设置编码。<br>例：<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`runoob_tbl`</span>(</span><br><span class="line">  <span class="string">`runoob_id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> AUTO_INCREMENT,  </span><br><span class="line">  <span class="string">`runoob_title`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,  </span><br><span class="line">  <span class="string">`runoob_author`</span> <span class="built_in">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,  </span><br><span class="line">  <span class="string">`submission_date`</span> <span class="built_in">DATE</span>, PRIMARY <span class="keyword">KEY</span> (<span class="string">`runoob_id`</span>)</span><br><span class="line">    )<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="删除drop-table-表名"><a href="#删除drop-table-表名" class="headerlink" title="删除drop table 表名"></a><strong>删除</strong><code>drop table 表名</code></h3><ul><li>之前要选择database</li></ul></li><li><h3 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h3></li></ol><ul><li>只在当前连接可见，关闭连接自动删除表并释放所有空间</li><li>temporary</li><li>临时表不在数据表列表里，只能select，可以drop<br><img src="https://i.loli.net/2020/11/09/oR67N3fnirCbVKF.png" alt="Snipaste_2020-11-09_17-24-26.png"></li></ul><ol start="4"><li><h3 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h3></li></ol><ul><li><p><code>show create table 表名;</code></p></li><li><p>复制，修改后创建<br><img src="https://i.loli.net/2020/11/09/6igsjnrRdIUoKCf.png" alt="Snipaste_2020-11-09_17-30-40.png"></p></li><li><p><code>create table 新表名 like 表名;</code><br><img src="https://i.loli.net/2020/11/09/NnjJ6ADi9zvGVIx.png" alt="Snipaste_2020-11-09_17-32-22.png"></p></li></ul><hr><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>^</td><td>以输入为开头</td></tr><tr><td>$</td><td>以输入为结尾</td></tr><tr><td>.</td><td>除了<code>\n</code>之外的任何单个字符，[.\n]</td></tr><tr><td>[…]</td><td>匹配包含的任意一个字符</td></tr><tr><td>[^…]</td><td>匹配未包含的任意一个字符</td></tr><tr><td>`p1</td><td>p2</td></tr></tbody></table><ul><li>| 匹配前面的子表达式0-多次</li></ul><ul><li>| 匹配前面的子表达式1-多次<br>{n} | 匹配确定的n次，连续<br>{n,m} | 最少匹配n次最多匹配m次，连续<br><img src="https://i.loli.net/2020/11/09/PWj9Z25bdkhLfiU.png" alt="Snipaste_2020-11-09_14-09-03.png"><br><img src="https://i.loli.net/2020/11/09/3vwWEf82HqKLoSe.png" alt="Snipaste_2020-11-09_14-12-35.png"><br><img src="https://i.loli.net/2020/11/09/tN5CvPxwXAejVpD.png" alt="Snipaste_2020-11-09_14-09-44.png"><br><img src="https://i.loli.net/2020/11/09/w5BGe3gzlH1DxqT.png" alt="Snipaste_2020-11-09_14-10-15.png"><br><img src="https://i.loli.net/2020/11/09/dA63cyTW2eKqLnv.png" alt="Snipaste_2020-11-09_14-11-53.png"><br><img src="https://i.loli.net/2020/11/09/ltzE1Z4Tg2kLjNh.png" alt="Snipaste_2020-11-09_14-22-00.png"><br><img src="https://i.loli.net/2020/11/09/Ya3OucPsU9RoMry.png" alt="Snipaste_2020-11-09_14-13-31.png"><br><img src="https://i.loli.net/2020/11/09/MEJfmbTPpO8WX73.png" alt="Snipaste_2020-11-09_14-24-30.png"></li></ul><hr><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul><li><p>只有使用了 Innodb 数据库引擎的数据库或表才支持事务。</p></li><li><p>维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</p></li><li><p>管理 insert,update,delete 语句</p></li><li><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li><p><strong>原子性</strong><br>  一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态</p></li><li><p><strong>一致性</strong><br>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p></li><li><p><strong>隔离性</strong><br>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</p></li><li><p><strong>持久性</strong><br>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。、</p></li></ul></li><li><h3 id="事务控制语句"><a href="#事务控制语句" class="headerlink" title="事务控制语句"></a>事务控制语句</h3><ul><li><p>BEGIN 或 START TRANSACTION<br>显式地开启一个事务；</p></li><li><p>COMMIT 也可以使用 COMMIT WORK，不过二者是等价的。<br>COMMIT 会提交事务，并使已对数据库进行的所有修改成为永久性的；<br><img src="https://i.loli.net/2020/11/09/5EvHiPwdOU1gMFc.png" alt="Snipaste_2020-11-09_14-44-05.png">    </p></li><li><p>ROLLBACK 也可以使用 ROLLBACK WORK，不过二者是等价的。<br>回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；<br><img src="https://i.loli.net/2020/11/09/JeSr2fbIuciNq3K.png" alt="Snipaste_2020-11-09_14-44-36.png"></p></li><li><p>SAVEPOINT identifier，SAVEPOINT<br>允许在事务中创建一个保存点，一个事务中可以有多个 SAVEPOINT；</p></li><li><p>RELEASE SAVEPOINT identifier<br>删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</p></li><li><p>ROLLBACK TO identifier<br>把事务回滚到标记点；</p></li><li><p>SET TRANSACTION<br>用来设置事务的隔离级别。InnoDB 存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ 和 SERIALIZABLE。</p></li></ul></li></ul><hr><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ul><li>单列索引<br>  只包含一个列，一个表可以有多个单列索引</li><li>组合索引<br>  包含多个列</li><li>包含主键与索引字段以及指向实体表的记录</li><li>降低更新表的速度（更新表时，mysql需要保存数据和索引文件）</li><li>建立索引会占用磁盘空间的索引文件</li></ul><ol><li><h3 id="建立"><a href="#建立" class="headerlink" title="建立"></a>建立</h3><ul><li><code>create index 索引名 on 表名(列名)</code></li><li>修改表结构<code>alter table 表名 add index 索引名(列名)</code></li><li>建表的时候指定<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">username <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">index</span> [索引名] (username(<span class="keyword">length</span>))</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><strong>唯一索引</strong><ul><li><code>create unique index 索引名 on 表名 (username(length))</code></li><li>修改表结构<code>alter table 表名 add unique [索引名] (username(length))</code></li><li>建表的时候指定<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">username <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">unioque [索引名] (username(<span class="keyword">length</span>))</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><ul><li><code>drop index [索引名] on 表名</code></li></ul></li></ol><hr><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ol><li>数值类型<br><img src="https://i.loli.net/2020/11/07/51pU4JkLSGBYsfE.png" alt="Snipaste_2020-11-07_15-57-36.png"></li><li>日期和时间<br><img src="https://i.loli.net/2020/11/07/1c68pRrwLJfE7FA.png" alt="Snipaste_2020-11-07_15-57-49.png"></li><li>字符串<br><img src="https://i.loli.net/2020/11/07/FfMyv1BR9rb7Ll2.png" alt="Snipaste_2020-11-07_15-57-57.png"></li></ol><hr><h2 id="防止sql注入"><a href="#防止sql注入" class="headerlink" title="防止sql注入"></a>防止sql注入</h2><hr><h2 id="导出导入数据"><a href="#导出导入数据" class="headerlink" title="导出导入数据"></a>导出导入数据</h2><hr><h2 id="mysql函数"><a href="#mysql函数" class="headerlink" title="mysql函数"></a>mysql函数</h2><hr><h2 id="mysql运算符"><a href="#mysql运算符" class="headerlink" title="mysql运算符"></a>mysql运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><ul><li><h4 id="加法"><a href="#加法" class="headerlink" title="+加法"></a><code>+</code>加法</h4></li><li><h4 id="减法"><a href="#减法" class="headerlink" title="-减法"></a><code>-</code>减法</h4></li><li><h4 id="乘法"><a href="#乘法" class="headerlink" title="*乘法"></a><code>*</code>乘法</h4></li><li><h4 id="或DIV除法（div是商）"><a href="#或DIV除法（div是商）" class="headerlink" title="/或DIV除法（div是商）"></a><code>/或DIV</code>除法（div是商）</h4>  <img src="https://i.loli.net/2020/11/10/hPq1AZlaVcHMmfb.png" alt="Snipaste_2020-11-10_14-59-05.png"></li><li><h4 id="或MOD取余"><a href="#或MOD取余" class="headerlink" title="%或MOD取余"></a><code>%或MOD</code>取余</h4>  <img src="https://i.loli.net/2020/11/10/16LXnMhQesEz8Aj.png" alt="Snipaste_2020-11-10_15-00-09.png"></li></ul><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>正确为1，错误为0</p><ul><li><h4 id="等于"><a href="#等于" class="headerlink" title="=等于"></a><code>=</code>等于</h4></li><li><h4 id="lt-gt-安全等于，null也可以比较"><a href="#lt-gt-安全等于，null也可以比较" class="headerlink" title="&lt;=&gt;安全等于，null也可以比较"></a><code>&lt;=&gt;</code>安全等于，null也可以比较</h4>  <img src="https://i.loli.net/2020/11/10/YQqO8wTXUEbcZA7.png" alt="Snipaste_2020-11-10_15-11-22.png"></li><li><h4 id="lt-gt-或-不等于"><a href="#lt-gt-或-不等于" class="headerlink" title="&lt;&gt;或!=不等于"></a><code>&lt;&gt;或!=</code>不等于</h4></li><li><h4 id="gt-大于"><a href="#gt-大于" class="headerlink" title="&gt;大于"></a><code>&gt;</code>大于</h4></li><li><h4 id="lt-小于"><a href="#lt-小于" class="headerlink" title="&lt;小于"></a><code>&lt;</code>小于</h4></li><li><h4 id="gt-大于等于"><a href="#gt-大于等于" class="headerlink" title="&gt;=大于等于"></a><code>&gt;=</code>大于等于</h4></li><li><h4 id="lt-小于等于"><a href="#lt-小于等于" class="headerlink" title="&lt;=小于等于"></a><code>&lt;=</code>小于等于</h4></li><li><h4 id="between两值之间（包括两端）"><a href="#between两值之间（包括两端）" class="headerlink" title="between两值之间（包括两端）"></a><code>between</code>两值之间（包括两端）</h4></li><li><h4 id="not-between不在两值之间"><a href="#not-between不在两值之间" class="headerlink" title="not between不在两值之间"></a><code>not between</code>不在两值之间</h4></li><li><h4 id="in在集合中"><a href="#in在集合中" class="headerlink" title="in在集合中"></a><code>in</code>在集合中</h4></li><li><h4 id="not-in不在集合中"><a href="#not-in不在集合中" class="headerlink" title="not in不在集合中"></a><code>not in</code>不在集合中</h4>  <img src="https://i.loli.net/2020/11/10/2FDyJM3S1bprIAg.png" alt="Snipaste_2020-11-10_15-08-07.png"></li><li><h4 id="like模糊匹配"><a href="#like模糊匹配" class="headerlink" title="like模糊匹配"></a><code>like</code>模糊匹配</h4></li><li><h4 id="regexp或rlike正则式匹配"><a href="#regexp或rlike正则式匹配" class="headerlink" title="regexp或rlike正则式匹配"></a><code>regexp或rlike</code>正则式匹配</h4>  <img src="https://i.loli.net/2020/11/10/NPkOIudfR8eJw9E.png" alt="Snipaste_2020-11-10_15-15-05.png"></li><li><h4 id="is-null为空"><a href="#is-null为空" class="headerlink" title="is null为空"></a><code>is null</code>为空</h4>  <img src="https://i.loli.net/2020/11/10/ZhKDNie6oUBHcwr.png" alt="Snipaste_2020-11-10_15-13-56.png"></li><li><h4 id="is-not-null不为空"><a href="#is-not-null不为空" class="headerlink" title="is not null不为空"></a><code>is not null</code>不为空</h4></li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li><h4 id="not或-逻辑非"><a href="#not或-逻辑非" class="headerlink" title="not或!逻辑非"></a><code>not或!</code>逻辑非</h4>  相反</li><li><h4 id="and逻辑与"><a href="#and逻辑与" class="headerlink" title="and逻辑与"></a><code>and</code>逻辑与</h4>  <img src="https://i.loli.net/2020/11/10/H9yFufYsW8bKQZw.png" alt="Snipaste_2020-11-10_15-18-43.png"></li><li><h4 id="or逻辑或"><a href="#or逻辑或" class="headerlink" title="or逻辑或"></a><code>or</code>逻辑或</h4>  <img src="https://i.loli.net/2020/11/10/MzsEOxDqt8Y74yK.png" alt="Snipaste_2020-11-10_15-21-27.png"></li><li><h4 id="xor逻辑异或"><a href="#xor逻辑异或" class="headerlink" title="xor逻辑异或"></a><code>xor</code>逻辑异或</h4>  相同就是0（除了null），有null就是null<br>  <img src="https://i.loli.net/2020/11/10/qF9U32xKzgcuyRN.png" alt="Snipaste_2020-11-10_15-23-56.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> knowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议</title>
      <link href="2020/11/06/http-xie-yi/"/>
      <url>2020/11/06/http-xie-yi/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a><br>感谢：<a href="https://www.cnblogs.com/an-wen/p/11180076.html">https://www.cnblogs.com/an-wen/p/11180076.html</a></p><hr><h2 id="超文本传输协议"><a href="#超文本传输协议" class="headerlink" title="超文本传输协议"></a>超文本传输协议</h2><p><strong>H</strong>yper<strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol</p><p>分布式、协作式和超媒体信息系统的应用层协议</p><hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>客户端终端（用户）和服务器端（网站）请求和应答的标准（TCP）</p><ol><li><p>客户端终端：网页浏览器、网络爬虫或者其它的工具，称为用户代理程序（user agent）</p><p> 发起一个HTTP请求到服务器上指定端口（默认端口为80）</p></li><li><p>服务器端：应答服务器、源服务器（origin server），存储html文件或图像</p></li><li><p>中间层：代理服务器、网关或者隧道（tunnel）</p></li></ol><hr><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ol><li><h3 id="Web（客户端-gt-服务器）如何请求"><a href="#Web（客户端-gt-服务器）如何请求" class="headerlink" title="Web（客户端-&gt;服务器）如何请求"></a>Web（客户端-&gt;服务器）如何请求</h3><p> <strong>请求报文</strong></p><ul><li>请求的方法（开始行）</li><li>URL（开始行）</li><li>协议版本（开始行）</li><li>请求头部（首部行）<ul><li>通用首部字段</li><li>请求首部字段</li><li>响应首部字段</li><li>实体首部字段</li></ul></li><li>请求数据（实体主体）</li></ul></li><li><h3 id="Web（服务器-gt-客户端）如何传送页面"><a href="#Web（服务器-gt-客户端）如何传送页面" class="headerlink" title="Web（服务器-&gt;客户端）如何传送页面"></a>Web（服务器-&gt;客户端）如何传送页面</h3><p> <strong>状态行</strong></p><pre><code> - 协议版本 - 成功或错误代码 - 服务器信息 - 响应头部 - 响应数据</code></pre></li><li><h3 id="http报文格式"><a href="#http报文格式" class="headerlink" title="http报文格式"></a>http报文格式</h3><p> <img src="https://i.loli.net/2020/11/06/XvOQiV3wR1LKxbm.png" alt="2f801c0d7f1b88cee53ee6942983272.png"><br> <img src="https://i.loli.net/2020/11/06/giQwc6ZE74fym8n.jpg" alt="867021-20180322001733298-201433635.jpg"><br> <img src="https://i.loli.net/2020/11/06/PcQ1329Nyk4mUpd.jpg" alt="867021-20180322001744323-654009411.jpg"><br><img src="https://i.loli.net/2020/11/06/bPWupLZkfletESi.png" alt="877318-20180418160914403-902015370.png"><br> <img src="https://i.loli.net/2020/11/06/OUygKavm4LrEMti.png" alt="988061-20190217180939495-1485103656.png"><br> <img src="https://i.loli.net/2020/11/06/rcJQ32gmpIONVyA.png" alt="877318-20180418161014087-738990087.png"><br> <img src="https://i.loli.net/2020/11/09/NPvmUIWAhkeLnsE.png" alt="Snipaste_2020-11-09_13-47-18.png"><br> <img src="https://i.loli.net/2020/11/09/g5q7Gox2lSjZUsM.png" alt="Snipaste_2020-11-09_13-47-39.png"><br> <img src="https://i.loli.net/2020/11/09/kbKTfEmAO7WeSh6.png" alt="IMG_0340.PNG"></p></li><li><h3 id="请求-响应模型"><a href="#请求-响应模型" class="headerlink" title="请求/响应模型"></a><strong>请求/响应模型</strong></h3><p><img src="https://i.loli.net/2020/11/06/E2cz1Q8qbXxSpMt.png" alt="877318-20180418160433297-1726664935.png"></p></li><li><h3 id="基于TCP-IP协议之上的应用层协议"><a href="#基于TCP-IP协议之上的应用层协议" class="headerlink" title="基于TCP/IP协议之上的应用层协议"></a><strong>基于TCP/IP协议之上的应用层协议</strong></h3><p><img src="https://i.loli.net/2020/11/06/4RSbjNDVhMoL63F.png" alt="877318-20180418160227278-698810818.png"></p></li><li><h3 id="无状态保存"><a href="#无状态保存" class="headerlink" title="无状态保存"></a><strong>无状态保存</strong></h3><p><img src="https://i.loli.net/2020/11/06/xEb3olUeIB5Lcg2.png" alt="877318-20180418160546133-1479186889.png"><br> 无状态（stateless）协议，不保存通信状态，对请求和响应不做<strong>持久化处理</strong>，协议本身并不保留之前一切的请求或响应报文的信息（更快地处理大量事务,确保协议的可伸缩性）。<br> 为了实现期望的保持状态功能, 于是引入了<strong>Cookie</strong>技术</p></li><li><h3 id="无连接"><a href="#无连接" class="headerlink" title="无连接"></a><strong>无连接</strong></h3><p> 限制每次连接只处理一个请求<br> 可以节省传输时间，并且可以提高并发性能<br> 新版本的协议会等几秒，如果用户在这几秒钟之内有新的请求，那么还是通过之前的连接通道来收发消息（可以提高效率），建立连接也是耗时的</p></li><li><h3 id="HTTP-请求-响应的步骤："><a href="#HTTP-请求-响应的步骤：" class="headerlink" title="HTTP 请求/响应的步骤："></a>HTTP 请求/响应的步骤：</h3><ol><li><p>客户端连接到Web服务器<br>HTTP客户端与Web服务器的HTTP端口建立TCP<strong>套接字连接</strong><br>例：<a href="http://www.luffycity.com/">http://www.luffycity.com</a></p></li><li><p>发送HTTP请求<br>通过TCP套接字发送请求报文</p></li><li><p>服务器接受请求并返回HTTP响应<br>解析请求，定位请求资源，<strong>服务器将资源复本写到TCP套接字</strong></p></li><li><p>释放TCP连接<br>若connection 模式为<strong>close</strong>，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为<strong>keepalive</strong>，则该连接会保持一段时间，在该时间内可以继续接收请求;</p></li><li><p>客户端浏览器解析HTML内容<br>解析状态行，查看请求的状态代码，解析响应头，响应头告知以下为若干字节的HTML文档和文档的字符集，客户端浏览器读取响应数据HTML。</p><h4 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h4><ol><li>浏览器向dns服务器请求解析对应ip</li><li>建立TCP连接</li><li>浏览器发出HTTP请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;</li><li>服务器响应，发送html文本</li><li>释放TCP连接</li><li>显示内容 </li></ol></li></ol></li></ol><hr><h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><ul><li>方法名称区分<strong>大小写</strong></li><li><strong>405</strong>（Method Not Allowed） 请求的资源不支持对应的请求方法</li><li><strong>501</strong>（Not Implemented）服务器不认识或不支持对应的请求方法</li><li>要求HTTP服务器至少实现GET和HEAD方法</li><li>特定的HTTP服务器还能够扩展自定义的方法。例如PATCH（由 RFC 5789 指定的方法）用于将局部修改应用到资源</li></ul><ol><li>GET<br> ”显示“请求，应该只用在读取数据<br> 例：/test/demo_form.php**?name1=value1&amp;name2=value2**</li><li>HEAD<br> “”请求，不传回资源文本部分，获取资源信息（元信息，元数据）</li><li>POST<br> 提交数据，请求处理，数据包含在请求文本<br> 例：POST /test/demo_form.php HTTP/1.1<br>Host: runoob.com  </li></ol><p><strong>name1=value1&amp;name2=value2</strong><br>4. PUT<br>    指定资源位置上传更新<br>5. DELETE<br>    请求服务器删除Request-URI所标识的资源<br>6. TRACE<br>    回显服务器收到的请求，测试或诊断。<br>7. OPTIONS<br>    服务器传回该资源所支持的所有HTTP请求方法。<code>*</code>代替资源名称，可以测试服务器功能是否正常运作<br>8. CONNECT<br>    HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。</p><h3 id="GET和POST请求区别"><a href="#GET和POST请求区别" class="headerlink" title="GET和POST请求区别"></a>GET和POST请求区别</h3><p>GET请求不适宜处理敏感数据<br>GET请求只应当用于取回数据</p><table><thead><tr><th>/</th><th>GET</th><th>POST</th></tr></thead><tbody><tr><td>数据类型</td><td>只允许ASCLL字符</td><td>没有限制，也允许二进制数据</td></tr><tr><td>书签</td><td>可收藏为书签</td><td>不可</td></tr><tr><td>后退按钮/刷新</td><td>无响应</td><td>后被重新提交（浏览器会通知）</td></tr><tr><td>数据长度</td><td>URL最大长度为2048个字符</td><td>无限制</td></tr><tr><td>缓存</td><td>能被缓存</td><td>不能</td></tr><tr><td>浏览记录</td><td>会被保存在浏览器记录</td><td>不会</td></tr></tbody></table><hr><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><p><img src="https://i.loli.net/2020/11/06/DRFEgVqGj6nldsZ.png" alt="877318-20180418161321986-304902913.png"></p><hr><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><ul><li><strong>传送协议</strong><br>大多数网页浏览器不要求用户输入网页中“http://”的部分，因为绝大多数网页内容是超文本传输协议文件</li><li>层级URL标记符号(为[//],固定不变)</li><li>访问资源需要的凭证信息（可省略）</li><li><strong>服务器</strong>。（通常为域名，有时为IP地址）</li><li><strong>端口号</strong>。（以数字方式表示，若为HTTP的默认值“:80”可省略）<br>“80”是超文本传输协议文件的常用端口号，因此一般也不必写明</li><li><strong>路径</strong>。（以“/”字符区别路径中的每一个目录名称）</li><li><strong>查询</strong>。（GET模式的窗体参数，以“?”字符为起点，每个参数以“&amp;”隔开，再以“=”分开参数名称与数据，通常以UTF8的URL编码，避开字符冲突的问题）</li><li>片段。以“#”字符为起点</li></ul><p>例：<br>以<code>http://www.luffycity.com:80/news/index.html?id=250&amp;page=1</code> 为例, 其中：</p><p><code>http</code>，是协议；<br><code>www.luffycity.com</code>，是服务器；<br><code>80</code>，是服务器上的默认网络端口号，默认不显示；<br><code>/news/index.html</code>，是路径（URI：直接定位到对应的资源）；<br><code>?id=250&amp;page=1</code>，是查询。</p><h3 id="省略www"><a href="#省略www" class="headerlink" title="省略www"></a>省略www</h3><p>由于超文本传输协议允许服务器将浏览器重定向到另一个网页地址，因此许多服务器允许用户省略网页地址中的部分，比如 www。从技术上来说这样省略后的网页地址实际上是一个不同的网页地址，浏览器本身无法决定这个新地址是否通，服务器必须完成重定向的任务。</p>]]></content>
      
      
      <categories>
          
          <category> knowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习</title>
      <link href="2020/10/26/vue-xue-xi/"/>
      <url>2020/10/26/vue-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><p>CDN</p><ul><li><p><strong>Staticfile CDN（国内）</strong>  :  <a href="https://cdn.staticfile.org/vue/2.2.2/vue.min.js">https://cdn.staticfile.org/vue/2.2.2/vue.min.js</a></p></li><li><p><strong>unpkg</strong>：<a href="https://unpkg.com/vue/dist/vue.js">https://unpkg.com/vue/dist/vue.js</a>, 会保持和 npm 发布的最新的版本一致。</p></li><li><p><strong>cdnjs</strong>  :  <a href="https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js">https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js</a></p></li></ul><hr><h2 id="helloword"><a href="#helloword" class="headerlink" title="helloword"></a>helloword</h2><p>每个 Vue 应用都需要通过实例化 Vue 来实现。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">&#x27;Hello Vue.js!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速评教方式</title>
      <link href="2020/10/20/kuai-su-ping-jiao-fang-shi/"/>
      <url>2020/10/20/kuai-su-ping-jiao-fang-shi/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a><br>感谢：<a href="https://www.jianshu.com/p/af277324bfd5">https://www.jianshu.com/p/af277324bfd5</a></p><hr><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> redis=document.getElementsByTagName(<span class="string">&quot;input&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> temp_array=[]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> temp_index=<span class="number">0</span>;temp_index&lt;redis.length;temp_index++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(redis[temp_index].type==<span class="string">&quot;radio&quot;</span>)&#123;</span><br><span class="line">        temp_array.push(redis[temp_index])</span><br><span class="line">        redis[temp_index].<span class="keyword">checked</span>=<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解决所有答案不能一样</span></span><br><span class="line">document.getElementsByName(temp_array[<span class="number">0</span>].name)[<span class="number">0</span>].<span class="keyword">checked</span>=<span class="literal">true</span></span><br><span class="line">document.getElementsByTagName(<span class="string">&quot;textarea&quot;</span>)[<span class="number">0</span>].<span class="keyword">value</span>=<span class="string">&quot;asdasdasd&quot;</span></span><br><span class="line">check()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HtmlEmail实现简单发送邮件</title>
      <link href="2020/10/15/htmlemail-shi-xian-jian-dan-fa-song-you-jian/"/>
      <url>2020/10/15/htmlemail-shi-xian-jian-dan-fa-song-you-jian/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a><br>感谢：<a href="https://www.cnblogs.com/zhang-dongliang/p/10847746.html">https://www.cnblogs.com/zhang-dongliang/p/10847746.html</a></p><hr><ol><li>引入依赖<figure class="highlight"><table><tr><td class="code"><pre><span class="line">`&lt;!--发送邮件引入jar包--&gt;`</span><br><span class="line"></span><br><span class="line">`&lt;dependency &gt;`</span><br><span class="line"></span><br><span class="line">`&lt;groupId &gt;javax.mail &lt;/groupId &gt;`</span><br><span class="line"></span><br><span class="line">`&lt;artifactId &gt;mail &lt;/artifactId &gt;`</span><br><span class="line"></span><br><span class="line">`&lt;version &gt;1.4.6 &lt;/version &gt;`</span><br><span class="line"></span><br><span class="line">`&lt;/dependency &gt;`</span><br><span class="line"></span><br><span class="line">`&lt;dependency &gt;`</span><br><span class="line"></span><br><span class="line">`&lt;groupId &gt;com.sun.mail &lt;/groupId &gt;`</span><br><span class="line"></span><br><span class="line">`&lt;artifactId &gt;javax.mail &lt;/artifactId &gt;`</span><br><span class="line"></span><br><span class="line">`&lt;version &gt;1.5.5 &lt;/version &gt;`</span><br><span class="line"></span><br><span class="line">`&lt;/dependency &gt;`</span><br></pre></td></tr></table></figure></li><li>测试类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">`<span class="keyword">import</span>`  `org.apache.commons.mail.EmailException;`</span><br><span class="line"></span><br><span class="line">`<span class="keyword">import</span>`  `org.apache.commons.mail.HtmlEmail;`</span><br><span class="line"></span><br><span class="line">`<span class="comment">/**`</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">`* <span class="doctag">@author</span> pillar`</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">`* <span class="doctag">@date</span> 2019-05-10`</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">`*/</span>`</span><br><span class="line"></span><br><span class="line">`<span class="keyword">public</span>`  `<span class="class"><span class="keyword">class</span>`  `<span class="title">testMail</span> </span>&#123;`</span><br><span class="line"></span><br><span class="line">`<span class="keyword">public</span>`  `<span class="keyword">static</span>`  `<span class="keyword">void</span>`  `main(String[] args) &#123;`</span><br><span class="line"></span><br><span class="line">`String msg=``<span class="string">&quot;testMail: hello word&quot;</span>``;`</span><br><span class="line"></span><br><span class="line">`testMail.sendMailMessage(msg);`</span><br><span class="line"></span><br><span class="line">`&#125;`</span><br><span class="line"></span><br><span class="line">`<span class="comment">/**`</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">`* 发送邮件实现类`</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">`* <span class="doctag">@param</span> msg`</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">`*/</span>`</span><br><span class="line"></span><br><span class="line">`<span class="keyword">public</span>`  `<span class="keyword">static</span>`  `<span class="keyword">void</span>`  `sendMailMessage(String msg) &#123;`</span><br><span class="line"></span><br><span class="line">`<span class="keyword">try</span>`  `&#123;`</span><br><span class="line"></span><br><span class="line">`<span class="comment">//邮箱服务器地址如：mail.qq.com`</span></span><br><span class="line"></span><br><span class="line">`String hostName =``<span class="string">&quot;139.159.XXX&quot;</span>``;`</span><br><span class="line"></span><br><span class="line">`<span class="comment">// 帐号与密码`</span></span><br><span class="line"></span><br><span class="line">`String userName =``<span class="string">&quot;用户名&quot;</span>``;`</span><br><span class="line"></span><br><span class="line">`String password =` `<span class="string">&quot;密码&quot;</span>``;`</span><br><span class="line"></span><br><span class="line">`<span class="comment">// 发件人`</span></span><br><span class="line"></span><br><span class="line">`String fromAddress =``<span class="string">&quot;用户名@XXX.com&quot;</span>``;`</span><br><span class="line"></span><br><span class="line">`<span class="comment">// 发件人姓名`</span></span><br><span class="line"></span><br><span class="line">`String fromName =` `<span class="string">&quot;pillarzhang&quot;</span>``;`</span><br><span class="line"></span><br><span class="line">`HtmlEmail email=``<span class="keyword">new</span>`  `HtmlEmail();`</span><br><span class="line"></span><br><span class="line">`email.setHostName(hostName);``<span class="comment">// 设置smtp服务器`</span></span><br><span class="line"></span><br><span class="line">`email.setAuthentication(userName, password);``<span class="comment">// 设置授权信息`</span></span><br><span class="line"></span><br><span class="line">`email.setCharset(``<span class="string">&quot;utf-8&quot;</span>``);`</span><br><span class="line"></span><br><span class="line">`email.setFrom(fromAddress, fromName,` `<span class="string">&quot;utf-8&quot;</span>``);``<span class="comment">// 设置发件人信息`</span></span><br><span class="line"></span><br><span class="line">`email.setSubject(``<span class="string">&quot;testMail&quot;</span>``);``<span class="comment">// 设置主题`</span></span><br><span class="line"></span><br><span class="line">`email.setHtmlMsg(msg);``<span class="comment">// 设置邮件内容`</span></span><br><span class="line"></span><br><span class="line">`email.addTo(``<span class="string">&quot;1208699589@qq.com&quot;</span>``,` `<span class="string">&quot;pillarzhang&quot;</span>``,` `<span class="string">&quot;utf-8&quot;</span>``);`</span><br><span class="line"></span><br><span class="line">`System.err.println(email.getSmtpPort());`</span><br><span class="line"></span><br><span class="line">`System.err.println(email.getHostName());`</span><br><span class="line"></span><br><span class="line">`String res = email.send();``<span class="comment">// 发送邮件`</span></span><br><span class="line"></span><br><span class="line">`System.err.println(res);`</span><br><span class="line"></span><br><span class="line">`&#125;` `<span class="keyword">catch</span>`  `(EmailException e) &#123;`</span><br><span class="line"></span><br><span class="line">`System.err.println(``<span class="string">&quot;邮件发送失败&quot;</span>``);`</span><br><span class="line"></span><br><span class="line">`e.printStackTrace();`</span><br><span class="line"></span><br><span class="line">`&#125;`</span><br><span class="line"></span><br><span class="line">`&#125;`</span><br><span class="line"></span><br><span class="line">`&#125;`</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题_java</title>
      <link href="2020/10/14/mian-shi-ti-java/"/>
      <url>2020/10/14/mian-shi-ti-java/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="创建对象实例（四种方法）"><a href="#创建对象实例（四种方法）" class="headerlink" title="创建对象实例（四种方法）"></a>创建对象实例（四种方法）</h2><ol><li>new</li><li>java放射机制</li><li>Cloneable接口利用克隆方法</li><li>java序列化和反序列化</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.<span class="keyword">module</span>;     </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;   </span><br><span class="line"> <span class="keyword">private</span> String userName;  </span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> age;   </span><br><span class="line"> <span class="keyword">private</span> String addr;  </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;&#125;  </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String u,<span class="keyword">int</span> a,String addr)</span></span>&#123;  </span><br><span class="line"> <span class="keyword">this</span>.userName = u;  </span><br><span class="line"> <span class="keyword">this</span>.age = a;  </span><br><span class="line"> <span class="keyword">this</span>.addr = addr;  </span><br><span class="line"> &#125;  </span><br><span class="line">    </span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> userName;  </span><br><span class="line"> &#125;  </span><br><span class="line">    </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">this</span>.userName = userName;  </span><br><span class="line"> &#125;  </span><br><span class="line">    </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> age;  </span><br><span class="line"> &#125;  </span><br><span class="line">    </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">this</span>.age = age;  </span><br><span class="line"> &#125;  </span><br><span class="line">    </span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getAddr</span><span class="params">()</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> addr;  </span><br><span class="line"> &#125;  </span><br><span class="line">    </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddr</span><span class="params">(String addr)</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">this</span>.addr = addr;  </span><br><span class="line"> &#125;  </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> <span class="meta">@Override</span>  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;User [userName=&quot;</span> + userName + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;, addr=&quot;</span> + addr + <span class="string">&quot;]&quot;</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">    </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line"> <span class="comment">//创建对象方式1:使用new关键字  </span></span><br><span class="line"> User u1 = <span class="keyword">new</span> User(<span class="string">&quot;1&quot;</span>,<span class="number">2</span>,<span class="string">&quot;3&quot;</span>);  </span><br><span class="line"> System.err.println(u1.toString());  </span><br><span class="line">    </span><br><span class="line"> <span class="comment">//创建对象方式2:使用反射  </span></span><br><span class="line"> <span class="comment">//发射方式创建对象要求被创建的对象编写空构造  </span></span><br><span class="line"> <span class="keyword">try</span> &#123;  </span><br><span class="line"> User u2 = User.class.newInstance();  </span><br><span class="line"> System.err.println(u2.toString());  </span><br><span class="line"> &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;  </span><br><span class="line"> System.out.println(<span class="string">&quot;反射创建失败&quot;</span>+e.getMessage());  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="comment">//使用clone方法创建对象:要求被创建或者被克隆的对象实现Cloneable接口  </span></span><br><span class="line"> <span class="comment">//(3)是在内存上对已有对象的影印，所以不会调用构造函数   </span></span><br><span class="line"> <span class="keyword">try</span> &#123;  </span><br><span class="line"> User u3 = (User) u1.clone();  </span><br><span class="line"> System.err.println(<span class="string">&quot;u3:&quot;</span>+u3.toString());  </span><br><span class="line"> System.out.println(u1==u3);<span class="comment">//false  </span></span><br><span class="line"> &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;  </span><br><span class="line"> System.out.println(<span class="string">&quot;克隆创建失败&quot;</span>+e.getMessage());  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="comment">//运用反序列化手段，调用java.io.ObjectInputStream对象的 readObject()方法  </span></span><br><span class="line"> <span class="comment">//该方法是从文件中还原类的对象，也不会调用构造函数。  </span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="java与c-的区别"><a href="#java与c-的区别" class="headerlink" title="java与c++的区别"></a>java与c++的区别</h2><ul><li>Java 是纯粹的面向对象语言，所有的对象都继承自 java.lang.Object，C++ 为了兼容 C 即支持面向对象也支持面向过程。</li><li>Java 通过虚拟机从而实现跨平台特性，但是 C++ 依赖于特定的平台。</li><li>Java 没有指针，它的引用可以理解为安全指针，而 C++ 具有和 C 一样的指针。</li><li>Java 支持自动垃圾回收，而 C++ 需要手动回收。</li><li>Java 不支持多重继承，只能通过实现多个接口来达到相同目的，而 C++ 支持多重继承。</li><li>Java 不支持操作符重载，虽然可以对两个 String 对象支持加法运算，但是这是语言内置支持的操作，不属于操作符重载，而 C++ 可以。</li><li>Java 的 goto 是保留字，但是不可用，C++ 可以使用 goto。</li><li>Java 不支持条件编译，C++ 通过 #ifdef #ifndef 等预处理命令从而实现条件编译(<a href="https://www.cnblogs.com/workstudy123/p/3732171.html">详细查看</a>)。</li></ul><hr><h2 id="创建指定日期对象"><a href="#创建指定日期对象" class="headerlink" title="创建指定日期对象"></a>创建指定日期对象</h2><p>java.util.SimpleDateFormat类，构造方法可以指定日期格式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line"><span class="comment">//获得2009年06月bai01日 的Date对象du</span></span><br><span class="line">DateFormat dateFormat1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">Date myDate1 = dateFormat1.parse(<span class="string">&quot;2009-06-01&quot;</span>);</span><br><span class="line">System.out.println(myDate1);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//获得2010年9月13日22点zhi36分dao01秒 的Date对象</span></span><br><span class="line">DateFormat dateFormat2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">Date myDate2 = dateFormat2.parse(<span class="string">&quot;2010-09-13 22:36:01&quot;</span>);</span><br><span class="line">System.out.println(myDate2);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h2><p><a href="https://blog.csdn.net/ytasdfg/article/details/81086118">详细查看</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 其日历字段已由当前日期和时间初始化：</span></span><br><span class="line">Calendar rightNow = Calendar.getInstance(); <span class="comment">// 子类对象</span></span><br><span class="line"><span class="comment">// 获取年</span></span><br><span class="line"><span class="keyword">int</span> year = rightNow.get(Calendar.YEAR);</span><br><span class="line"><span class="comment">// 获取月</span></span><br><span class="line"><span class="keyword">int</span> month = rightNow.get(Calendar.MONTH);</span><br><span class="line"><span class="comment">// 获取日</span></span><br><span class="line"><span class="keyword">int</span> date = rightNow.get(Calendar.DATE);</span><br><span class="line"><span class="comment">//获取几点</span></span><br><span class="line"><span class="keyword">int</span> hour=rightNow.get(Calendar.HOUR_OF_DAY);</span><br><span class="line"><span class="comment">//获取上午下午</span></span><br><span class="line"><span class="keyword">int</span> moa=rightNow.get(Calendar.AM_PM);</span><br><span class="line"><span class="keyword">if</span>(moa==<span class="number">1</span>)</span><br><span class="line">System.out.println(<span class="string">&quot;下午&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">&quot;上午&quot;</span>);</span><br><span class="line"> </span><br><span class="line">System.out.println(year + <span class="string">&quot;年&quot;</span> + (month + <span class="number">1</span>) + <span class="string">&quot;月&quot;</span> + date + <span class="string">&quot;日&quot;</span>+hour+<span class="string">&quot;时&quot;</span>);</span><br><span class="line">rightNow.add(Calendar.YEAR,<span class="number">5</span>);</span><br><span class="line">rightNow.add(Calendar.DATE, -<span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> year1 = rightNow.get(Calendar.YEAR);</span><br><span class="line"><span class="keyword">int</span> date1 = rightNow.get(Calendar.DATE);</span><br><span class="line">System.out.println(year1 + <span class="string">&quot;年&quot;</span> + (month + <span class="number">1</span>) + <span class="string">&quot;月&quot;</span> + date1 + <span class="string">&quot;日&quot;</span>+hour+<span class="string">&quot;时&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间单位字段：</p><p><strong><em>YEAR</em></strong></p><p>年</p><p><strong><em>MINUTE</em></strong></p><p>分</p><p><strong><em>DAY_OF_WEEK_IN_MONTH</em></strong></p><p>某月中第几周</p><p><strong><em>MONTH</em></strong></p><p>月</p><p><em><strong>SECOND/MILLISECOND</strong></em></p><p>秒/毫秒</p><p><strong><em>WEEK_OF_MONTH</em></strong></p><p>日历式的第几周</p><p><strong><em>DATE</em></strong></p><p>日</p><p><strong><em>DAY_OF_MONTH</em></strong></p><p>和DATE一样</p><p><strong><em>DAY_OF_YEAR</em></strong></p><p>一年的第多少天</p><p><strong><em>HOUR_OF_DAY</em></strong></p><p>时</p><p><strong><em>DAY_OF_WEEK</em></strong></p><p>周几</p><p><strong><em>WEEK_OF_YEAR</em></strong></p><p>一年的第多少周</p><p><strong>注意：month是从0开始的，而月份是从1开始的，所以month需要加一。</strong></p><hr><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ol><li>String 不可变性可以保证参数不可变</li><li>String 不可变性天生具备线程安全，可以在多个线程中安全地使用</li></ol><hr><h2 id="String和StringBuilder和StringBuffer"><a href="#String和StringBuilder和StringBuffer" class="headerlink" title="String和StringBuilder和StringBuffer"></a>String和StringBuilder和StringBuffer</h2><p><a href="https://blog.csdn.net/qushaming/article/details/82971901?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase">详细查看</a></p><ol><li><h3 id="运行速度比较："><a href="#运行速度比较：" class="headerlink" title="运行速度比较："></a>运行速度比较：</h3><p> StringBuilder &gt; StringBuffer &gt; String</p><p> String对象一旦创建便不可更改，而后两者是可更改的，且对象被建立以后将在内存中分配内存空间，并初始保存一个null，通过append方法向StringBuffer和StringBuilder中赋值</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">System.out.println(str);</span><br><span class="line">str = str + <span class="string">&quot;de&quot;</span>;</span><br><span class="line"><span class="comment">//第一个创建的str对象被JVM的垃圾回收机制（GC）回收掉</span></span><br><span class="line">System.out.println(str);</span><br></pre></td></tr></table></figure><p> 所以Java中对String对象进行的操作实际上是一个不断创建并回收对象的过程，因此在运行速度上很慢</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">&quot;abc&quot;</span> + <span class="string">&quot;de&quot;</span>;</span><br><span class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder().append(<span class="string">&quot;abc&quot;</span>).append(<span class="string">&quot;de&quot;</span>);</span><br><span class="line">System.out.println(str);</span><br><span class="line">System.out.println(stringBuilder.toString());</span><br></pre></td></tr></table></figure><p> StringBuilder和StringBuffer的对象是变量，对变量的操作是直接对该对象就行更改，因此不会进行反复的创建和回收。所以在运行速度上比较快</p></li><li><h3 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h3><p> String、StringBuilder 非线程安全<br> StringBuffer 线程安全</p></li></ol><hr><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><ul><li>this不能用于static方法，因为此时对象还没有</li><li>在静态方法中，可以调用本类的静态方法，也可以使用【类名.静态方法名】调用其他类的静态方法</li><li>可以调用实例方法，使用【new 类名().实例方法名】调用</li><li>static不能修饰局部变量</li></ul><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><ul><li>用来给对象和方法或者代码块加锁，当它锁定一个方法或者一个代码块的时候，同一时刻最多只有一个线程执行这个段代码。</li></ul><h3 id="volatile和synchronized"><a href="#volatile和synchronized" class="headerlink" title="volatile和synchronized"></a>volatile和synchronized</h3><h4 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h4><ul><li>修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。</li></ul><ol><li><code>volatile</code>只能修改变量<code>synchronized</code>修饰方法和代码块</li><li><code>volatile</code>不会发生阻塞<code>synchronized</code>会</li><li><code>volatile</code>能保证数据的可见性，但不能保证原子性；而<code>synchronized</code>可以保证原子性，也可以间接保证可见性</li><li><code>volatile</code>解决变量在多线程之间的可见性；而<code>synchronized</code>解决多线程之间资源同步问题</li></ol><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><ul><li>用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</li></ul><ol><li>final修饰变量，则等同于常量</li><li>final修饰方法中的参数，称为最终参数。</li><li>final修饰类，则类不能被继承</li><li>final修饰方法，则方法不能被重写。</li><li>final 不能修饰抽象类  </li><li>final修饰的方法可以被重载 但不能被重写</li></ol><h3 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h3><ul><li>用来创建抽象类和抽象方法。</li></ul><h3 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h3><ul><li>序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。</li></ul><hr><h2 id="object类"><a href="#object类" class="headerlink" title="object类"></a>object类</h2><p><img src="https://i.loli.net/2020/10/22/UGacOvAnyVxKD23.png" alt="8207485_1482023299700_17C2F187026D0B45BE3F7CEDF72794A5.png"></p><p><a href="https://blog.csdn.net/u013894427/article/details/53468038">详细查看</a></p><ul><li><h4 id="Java中所有的类共同的祖先"><a href="#Java中所有的类共同的祖先" class="headerlink" title="Java中所有的类共同的祖先"></a>Java中所有的类共同的祖先</h4></li><li><p><strong>hashCode()和equale()</strong><br>  equale()用于确认两个对象是否相同。<br>  hashCode()用于获取对象的哈希值，这个值的作用是检索，具体的作用可以参考<a href="http://www.cnblogs.com/return/archive/2009/11/06/1597611.html">这里</a><br>  哈希值相同的对象不一定equale()<br>  equale()返回true的两个对象一定相同</p></li><li><p><strong>toString()和getClass()</strong></p><p>  toString()返回一个String对象，用来标识自己<br>  getClass()返回一个Class对象，打印出来是如下格式</p>  <figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">class</span> package.<span class="built_in">name</span>.xxx </span><br></pre></td></tr></table></figure><p>  因为返回的是一个class对象,后面可以跟class类的方法。用的是谁的构造函数，那么getClass返回的就是谁的类型。<br>  getClass()经常用于java反射机制</p></li><li><p><strong>wait(),wait(long),wait(long,int),notify(),notifyAll()</strong></p><p>  这几个函数体现的是Java的多线程机制<br>  在使用的时候要求在synchronize语句中使用<br>  wait()用于让当前线程失去操作权限，当前线程进入等待序列<br>  notify()用于随机通知一个持有对象的锁的线程获取操作权限<br>  notifyAll()用于通知所有持有对象的锁的线程获取操作权限<br>  wait(long) 和wait(long,int)用于设定下一次获取锁的距离当前释放锁的时间间隔</p></li></ul><hr><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ol><li>throws关键字可以在方法上声明该方法要抛出的异常。<br> 写在方法上</li><li>throw用于抛出异常对象。<br> 写在方法里</li><li>try是用于检测被包住的语句块是否出现异常，如果有异常，则抛出异常，并执行catch语句。</li><li>finally语句块是不管有没有出现异常都要执行的内容。</li><li>try块中可以抛出异常</li><li>Java中所有错误和异常的父类是<strong>java.lang.Throwable</strong></li><li><strong>运行异常</strong>，可以通过<strong>java虚拟机</strong>来自行处理。<br> <strong>非运行异常</strong>，我们应该<strong>捕获</strong>或者<strong>抛出</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//case 1</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;try&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;catch&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//case 2</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;try&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//case 3</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;try&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;catch&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ol><li>多行注释可以嵌套单行注释，但是不能嵌套多行注释</li></ol><hr><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>1.值传递不可以改变原变量的内容和地址；<br>2.引用传递不可以改变原变量的地址，但可以改变原变量的内容；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">callby_value</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">callby_value test = <span class="keyword">new</span> callby_value();</span><br><span class="line">System.out.println(a);<span class="comment">//5</span></span><br><span class="line">a = add(a);</span><br><span class="line">System.out.println(a);<span class="comment">//1</span></span><br><span class="line">addvoid(a);</span><br><span class="line">System.out.println(a);<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">System.out.println(test.b);<span class="comment">//2</span></span><br><span class="line">callby_value test2 = <span class="keyword">new</span> callby_value();</span><br><span class="line">test2 = callby_valuye_add(test);</span><br><span class="line">System.out.println(test2.b);<span class="comment">//1</span></span><br><span class="line"><span class="keyword">if</span>(test2 == test)</span><br><span class="line">System.out.println(<span class="string">&quot;相同&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">&quot;不同&quot;</span>);</span><br><span class="line">callby_valuye_addvoid(test);</span><br><span class="line">System.out.println(test.b);<span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addvoid</span><span class="params">(<span class="keyword">int</span> a)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> callby_value <span class="title">callby_valuye_add</span><span class="params">(callby_value test)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test.b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> test;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">callby_valuye_addvoid</span><span class="params">(callby_value test)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test.b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">简单类型</th><th align="right">boolean</th><th align="right">byte</th><th align="center">char</th><th align="right">short</th><th align="right">Int</th><th align="center">long</th><th align="right">float</th><th align="right">double</th><th align="right">void</th></tr></thead><tbody><tr><td align="center">二进制位数</td><td align="right">1</td><td align="right">8</td><td align="center">16</td><td align="right">16</td><td align="right">32</td><td align="center">64</td><td align="right">32</td><td align="right">64</td><td align="right">-</td></tr><tr><td align="center">封装器类</td><td align="right">Boolean</td><td align="right">Byte</td><td align="center">Character</td><td align="right">Short</td><td align="right">Integer</td><td align="center">Long</td><td align="right">Float</td><td align="right">Double</td><td align="right">Void</td></tr></tbody></table><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><ol><li>精度丢失只会发生在从大范围到小范围的转换,<strong>由大到小需要强制转换</strong>，由小到大不需要。</li><li>数值型变量在默认情况下为Int型，byte和short型在计算时会自动转换为int型计算，结果也是int 型</li><li>字节型 ： 0 <code>-2^7—-2^7-1</code> byte b=10;<br> 字符型 ： ‘ \u0000′ <code>0—-2^16-1</code> char c=’c’ ;<br> short : 0 <code>-2^15—-2^15-1</code> short s=10;<br> int : 0 <code>-2^31—-2^31-1</code> int i=10;<br> long : 0 <code>-2^63—-2^63-1</code> long o=10L;<br> float : 0.0f <code>-2^31—-2^31-1</code> float f=10.0F<br> double : 0.0d <code>-2^63—-2^63-1</code> double d=10.0;<br> boolean: false <code>true\false</code> boolean flag=true;</li><li><strong>char &lt; short &lt; int &lt; float &lt; double</strong> 不同类型运算结果类型向右边靠齐。</li></ol><h3 id="封装类"><a href="#封装类" class="headerlink" title="封装类"></a>封装类</h3><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ol><li>int与Integer、new Integer()进行==比较时，结果永远为<strong>true</strong></li><li>Integer与new Integer()进行==比较时，结果永远为<strong>false</strong></li><li>Integer与Integer进行==比较时，看范围；在大于等于-128小于等于127的范围内为<strong>true</strong>，在此范围外为<strong>false</strong>。</li></ol><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ol><li>\r表示接受键盘输入，相当于按下了回车键；</li><li>\n表示换行；</li><li>\t表示制表符，相当于Table键；</li><li>\b表示退格键，相当于Back Space键；</li><li>&#39;表示单引号；</li><li>&#39;‘表示双引号；</li><li>\表示一个斜杠\。</li></ol><hr><h2 id="java-lang"><a href="#java-lang" class="headerlink" title="java.lang"></a>java.lang</h2><p>java.lang包是java语言的核心包，lang是language的缩写<br>java.lang包定义了一些基本的类型，包括Integer,String之类的，是java程序必备的包，有解释器自动引入，无需手动导入</p><h3 id="System"><a href="#System" class="headerlink" title="System"></a>System</h3><p>system是属于java.lang.sysytem</p><ol><li>System.out.println()<ul><li>System是java.lang的一个类</li><li>out是System中的一个成员变量，也是java.io.PrintStream类的对象</li><li>println是java.io.PrintStream类的静态方法</li></ul></li></ol><hr><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p><a href="https://www.cnblogs.com/alter888/p/9163612.html">详细查看</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//直接引用</span></span><br><span class="line">        Day day =Day.MONDAY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义枚举类型</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Day</span> </span>&#123;</span><br><span class="line">    MONDAY, TUESDAY, WEDNESDAY,</span><br><span class="line">    THURSDAY, FRIDAY, SATURDAY, SUNDAY</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enum是所有 Java 语言枚举类型的公共基本类（注意Enum是<strong>抽象类</strong>）</p><hr><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><ol><li>不可以定义构造器</li><li>必须继承一个类<strong>或</strong>实现一个接口</li><li>不能存在静态成员变量和静态方法</li><li>不能是抽象的</li></ol><hr><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><ol><li><p>顺序结构</p></li><li><p>选择结构</p><ul><li>if语句</li><li>switch语句<br>int，byte，short，char<br>Integer，Byte，Short，Character<br>Enum（JDK 5+开始支持）<br>String（JDK 7+ 开始支持）</li></ul></li><li><p>循环结构</p><ul><li>while语句</li><li>for语句<br>  for(初始化语句；判断条件语句；控制条件语句){<br>循环体语句；<br>}</li></ul></li></ol><hr><h2 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h2><p>数据和bye的转换</p><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>将数据转为n个 byte序列的过程</p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>将n个 byte转换为数据的过程</p><hr><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ol><li>子类引用父类的静态字段，只会触发子类的加载、父类的初始化，不会导致子类初始化</li><li>通过数组定义来引用类，不会触发此类的初始化</li><li>不会初始化子类的几种<ol><li>调用的是父类的static方法或者字段</li><li>调用的是父类的final方法或者字段</li><li>通过数组来引用</li></ol></li><li>在调用子类构造器之前，会先调用父类构造器，如果父类中包含有参构造器，却没有无参构造器，则在子类构造器中一定要使用“super(参数)”指定调用父类的有参构造器，不然就会报错。</li></ol><hr><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><a href="https://www.runoob.com/java/java-operators.html?_t_t_t=0.3133259497117251">详细查看</a></p><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><ol><li><code>+</code><br> 加法 - 相加运算符两侧的值</li><li><code>-</code><br> 减法 - 左操作数减去右操作数</li><li><code>*</code><br> 乘法 - 相乘操作符两侧的值</li><li><code>/</code><br> 除法 - 左操作数除以右操作数</li><li><code>%</code><br> 取余 - 左操作数除以右操作数的余数</li><li><code>++</code><br> 自增: 操作数的值增加1</li><li><code>--</code><br> 自减: 操作数的值减少1<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">     <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">     <span class="keyword">int</span> c = <span class="number">25</span>;</span><br><span class="line">     <span class="keyword">int</span> d = <span class="number">25</span>;</span><br><span class="line">     System.out.println(<span class="string">&quot;a + b = &quot;</span> + (a + b) );</span><br><span class="line">     System.out.println(<span class="string">&quot;a - b = &quot;</span> + (a - b) );</span><br><span class="line">     System.out.println(<span class="string">&quot;a * b = &quot;</span> + (a * b) );</span><br><span class="line">     System.out.println(<span class="string">&quot;b / a = &quot;</span> + (b / a) );</span><br><span class="line">     System.out.println(<span class="string">&quot;b % a = &quot;</span> + (b % a) );</span><br><span class="line">     System.out.println(<span class="string">&quot;c % a = &quot;</span> + (c % a) );</span><br><span class="line">     System.out.println(<span class="string">&quot;a++   = &quot;</span> +  (a++) );</span><br><span class="line">     System.out.println(<span class="string">&quot;a--   = &quot;</span> +  (a--) );</span><br><span class="line">     <span class="comment">// 查看  d++ 与 ++d 的不同</span></span><br><span class="line">     System.out.println(<span class="string">&quot;d++   = &quot;</span> +  (d++) );</span><br><span class="line">     System.out.println(<span class="string">&quot;++d   = &quot;</span> +  (++d) );</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>a + b = 30<br>a - b = -10<br>a * b = 200<br>b / a = 2<br>b % a = 0<br>c % a = 5<br>a++ = 10<br>a– = 11<br>d++ = 25  </li></ol><p>++d = 27</p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><ol><li><code>==</code><br> 检查如果两个操作数的值是否相等，如果相等则条件为真。</li><li><code>!=</code><br> 检查如果两个操作数的值是否相等，如果值不相等则条件为真。</li><li><code>&gt;</code><br> 检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</li><li><code>&lt;</code><br> 检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</li><li><code>&gt;=</code><br> 检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</li><li><code>&lt;=</code><br> 检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span>  <span class="title">Test</span>  </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[]  args)</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>  a = <span class="number">10</span>; </span><br><span class="line">    <span class="keyword">int</span>  b = <span class="number">20</span>; </span><br><span class="line">    System.out.println(<span class="string">&quot;a == b = &quot;</span> + (a == b)  ); </span><br><span class="line">    System.out.println(<span class="string">&quot;a != b = &quot;</span> + (a != b)  ); </span><br><span class="line">    System.out.println(<span class="string">&quot;a &gt; b = &quot;</span> + (a &gt; b)  ); </span><br><span class="line">    System.out.println(<span class="string">&quot;a &lt; b = &quot;</span> + (a &lt; b)  ); </span><br><span class="line">    System.out.println(<span class="string">&quot;b &gt;= a = &quot;</span> + (b &gt;= a)  ); </span><br><span class="line">    System.out.println(<span class="string">&quot;b &lt;= a = &quot;</span> + (b &lt;= a)  ); </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>a == b =  false<br>a != b =  true<br>a &gt; b =  false<br>a &lt; b =  true<br>b &gt;= a =  true<br>b &lt;= a =  false</li></ol><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><ol><li><code>&amp;</code><br> 如果相对应位都是1，则结果为1，否则为0</li><li><code>|</code><br> 如果相对应位都是 0，则结果为 0，否则为 1</li><li><code>^</code><br> 如果相对应位值相同，则结果为0，否则为1</li><li><code>~</code><br> 按位取反运算符翻转操作数的每一位，即0变成1，1变成0。<br> <code>-n=~n+1可推出~n=-n-1</code></li><li><code>&lt;&lt;</code><br> 按位左移运算符。左操作数按位左移右操作数指定的位数。</li><li><code>&gt;&gt;</code><br> 按位右移运算符。左操作数按位右移右操作数指定的位数。</li><li><code>&gt;&gt;&gt;</code><br> 按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span>  <span class="title">Test</span>  </span>&#123;  </span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[]  args)</span>  </span>&#123;</span><br><span class="line">  <span class="keyword">int</span>  a = <span class="number">60</span>; <span class="comment">/* 60 = 0011 1100 */</span>  </span><br><span class="line">  <span class="keyword">int</span>  b = <span class="number">13</span>; <span class="comment">/* 13 = 0000 1101 */</span>  </span><br><span class="line">  <span class="keyword">int</span>  c = <span class="number">0</span>; </span><br><span class="line">  c = a &amp; b; <span class="comment">/* 12 = 0000 1100 */</span>  </span><br><span class="line">  System.out.println(<span class="string">&quot;a &amp; b = &quot;</span> + c  ); </span><br><span class="line">  c = a | b; <span class="comment">/* 61 = 0011 1101 */</span>  </span><br><span class="line">  System.out.println(<span class="string">&quot;a | b = &quot;</span> + c  ); </span><br><span class="line">  c = a ^ b; <span class="comment">/* 49 = 0011 0001 */</span>  </span><br><span class="line">  System.out.println(<span class="string">&quot;a ^ b = &quot;</span> + c  ); </span><br><span class="line">  c = ~a; <span class="comment">/*-61 = 1100 0011 */</span>  </span><br><span class="line">  System.out.println(<span class="string">&quot;~a = &quot;</span> + c  ); </span><br><span class="line">  c = a &lt;&lt; <span class="number">2</span>; <span class="comment">/* 240 = 1111 0000 */</span>  </span><br><span class="line">  System.out.println(<span class="string">&quot;a &lt;&lt; 2 = &quot;</span> + c  ); </span><br><span class="line">  c = a &gt;&gt; <span class="number">2</span>; <span class="comment">/* 15 = 1111 */</span>  </span><br><span class="line">  System.out.println(<span class="string">&quot;a &gt;&gt; 2 = &quot;</span> + c  ); </span><br><span class="line">  c = a &gt;&gt;&gt; <span class="number">2</span>; <span class="comment">/* 15 = 0000 1111 */</span>  </span><br><span class="line">  System.out.println(<span class="string">&quot;a &gt;&gt;&gt; 2 = &quot;</span> + c  ); </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>a &amp; b =  12<br>a | b =  61<br>a ^ b =  49<br>~a =  -61<br>a &lt;&lt;  2  =  240<br>a &gt;&gt;  2  =  15<br>a &gt;&gt;&gt;  2  =  15</li></ol><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ol><li><code>&amp;&amp;</code><br> 称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。<br> <strong>短路逻辑运算符</strong><br> 当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。</li><li><code>||</code><br> 称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</li><li><code>!</code><br> 称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">boolean</span> a = <span class="keyword">true</span>;</span><br><span class="line">     <span class="keyword">boolean</span> b = <span class="keyword">false</span>;</span><br><span class="line">     System.out.println(<span class="string">&quot;a &amp;&amp; b = &quot;</span> + (a&amp;&amp;b));</span><br><span class="line">     System.out.println(<span class="string">&quot;a || b = &quot;</span> + (a||b) );</span><br><span class="line">     System.out.println(<span class="string">&quot;!(a &amp;&amp; b) = &quot;</span> + !(a &amp;&amp; b));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>a &amp;&amp; b =  false<br>a || b =  true<br>!(a &amp;&amp; b)  =  true</li></ol><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ol><li><code>=</code><br> 简单的赋值运算符，将右操作数的值赋给左侧操作数</li><li><code>+=</code><br> 加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</li><li><code>-=</code><br> 减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</li><li><code>*=</code><br> 乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</li><li><code>/=</code><br> 除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</li><li><code>(%)=</code><br> 取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</li><li><code>&lt;&lt;=</code><br> 左移位赋值运算符</li><li><code>&gt;&gt;=</code><br> 右移位赋值运算符</li><li><code>&amp;=</code><br> 按位与赋值运算符</li><li><code>^=</code><br> 按位异或赋值操作符</li><li><code>|=</code><br>按位或赋值操作符<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">        c = a + b;</span><br><span class="line">        System.out.println(<span class="string">&quot;c = a + b = &quot;</span> + c );</span><br><span class="line">        c += a ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c += a  = &quot;</span> + c );</span><br><span class="line">        c -= a ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c -= a = &quot;</span> + c );</span><br><span class="line">        c *= a ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c *= a = &quot;</span> + c );</span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">        c = <span class="number">15</span>;</span><br><span class="line">        c /= a ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c /= a = &quot;</span> + c );</span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">        c = <span class="number">15</span>;</span><br><span class="line">        c %= a ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c %= a  = &quot;</span> + c );</span><br><span class="line">        c &lt;&lt;= <span class="number">2</span> ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c &lt;&lt;= 2 = &quot;</span> + c );</span><br><span class="line">        c &gt;&gt;= <span class="number">2</span> ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c &gt;&gt;= 2 = &quot;</span> + c );</span><br><span class="line">        c &gt;&gt;= <span class="number">2</span> ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c &gt;&gt;= 2 = &quot;</span> + c );</span><br><span class="line">        c &amp;= a ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c &amp;= a  = &quot;</span> + c );</span><br><span class="line">        c ^= a ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c ^= a   = &quot;</span> + c );</span><br><span class="line">        c |= a ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c |= a   = &quot;</span> + c );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>c = a + b = 30<br>c += a  = 40<br>c -= a = 30<br>c *= a = 300<br>c /= a = 1<br>c %= a  = 5<br>c &lt;&lt;= 2 = 20<br>c &gt;&gt;= 2 = 5<br>c &gt;&gt;= 2 = 1<br>c &amp;= a  = 0<br>c ^= a   = 10<br>c |= a   = 10</li></ol><h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><p><code>?:</code><br>    条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> a , b;</span><br><span class="line">      a = <span class="number">10</span>;</span><br><span class="line">      <span class="comment">// 如果 a 等于 1 成立，则设置 b 为 20，否则为 30</span></span><br><span class="line">      b = (a == <span class="number">1</span>) ? <span class="number">20</span> : <span class="number">30</span>;</span><br><span class="line">      System.out.println( <span class="string">&quot;Value of b is : &quot;</span> +  b );</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 如果 a 等于 10 成立，则设置 b 为 20，否则为 30</span></span><br><span class="line">      b = (a == <span class="number">10</span>) ? <span class="number">20</span> : <span class="number">30</span>;</span><br><span class="line">      System.out.println( <span class="string">&quot;Value of b is : &quot;</span> + b );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Value of b is  :  30<br>Value of b is  :  20</p><h3 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h3><p><code>instanceof</code><br>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      Vehicle a = <span class="keyword">new</span> Car();</span><br><span class="line">      <span class="keyword">boolean</span> result =  a <span class="keyword">instanceof</span> Car;</span><br><span class="line">      System.out.println( result);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>true</p><hr><h2 id="abstract-class和interface的区别"><a href="#abstract-class和interface的区别" class="headerlink" title="abstract class和interface的区别"></a>abstract class和interface的区别</h2><table><thead><tr><th>/</th><th>Abstract class</th><th>Interface</th></tr></thead><tbody><tr><td>实例化</td><td>不能</td><td>不能</td></tr><tr><td>类</td><td>一种继承关系，一个类只能使用一次继承关系。可以通过继承多个接口实现多重继承</td><td>一个类可以实现多个interface</td></tr><tr><td>数据成员</td><td>可有自己的</td><td>静态的不能被修改即必须是static final，一般不在此定义</td></tr><tr><td>方法</td><td>可以私有的，非abstract方法，必须实现</td><td>不可有私有的，默认是public，abstract 类型</td></tr><tr><td>变量</td><td>可有私有的，默认是friendly 型，其值可以在子类中重新定义，也可以重新赋值</td><td>不可有私有的，默认是public static final 型，且必须给其初值，实现类中不能重新定义，不能改变其值。</td></tr><tr><td>设计理念</td><td>表示的是“is-a”关系</td><td>表示的是“like-a”关系</td></tr><tr><td>实现</td><td>需要继承，要用extends</td><td>要用implements</td></tr></tbody></table><hr><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><ol><li>访问文件名相关方法</li></ol><ul><li><p>String getName(); 返回此File对象所表示的文件名和路径名（如果是路径，则返回最后一级子路径名）。</p></li><li><p>String getPath(); 返回此File对象所对应的路径名。</p></li><li><p>File getAbsolutePath(); 返回此File对象所对应的绝对路径名。</p></li><li><p>String getParent(); 返回此File对象所对应目录（最后一级子目录）的父路径名。</p></li><li><p>boolean renameTo(File newName); 重命名此File对象所对应的文件或目录，如果重命名成功，则返回true:否则返回false.</p></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> question </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> tomcat </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub</title>
      <link href="2020/10/14/github/"/>
      <url>2020/10/14/github/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat 部署多个项目</title>
      <link href="2020/10/13/tomcat-bu-shu-duo-ge-xiang-mu/"/>
      <url>2020/10/13/tomcat-bu-shu-duo-ge-xiang-mu/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a><br>感谢：<a href="https://www.cnblogs.com/tudou-22/p/12382886.html">https://www.cnblogs.com/tudou-22/p/12382886.html</a></p><hr><h2 id="修改端口部署多个项目"><a href="#修改端口部署多个项目" class="headerlink" title="修改端口部署多个项目"></a>修改端口部署多个项目</h2><ol><li><p>tomcat下复制webapp目录并重命名<br> 每个webapp目录下只保留一个项目</p></li><li><p>修改tomcat的conf下的server.xml文件<br> 在Server节点下，新增Service节点；第2个Service节点复制第1个Service内容</p> <!-- 第二个项目配置 --><Service name="Catalina1"><!-- 8080为http访问端口，为避免冲突，修改端口 --><p>&lt;Connector port=”8081” protocol=”HTTP/1.1”</p><pre><code>      connectionTimeout=&quot;20000&quot;      redirectPort=&quot;8443&quot; /&gt;</code></pre><!-- 8009为AJP端口，Apache能通过AJP协议访问Tomcat的8009端口，避免冲突,修改 --><Connector port="8010" protocol="AJP/1.3" redirectport="8443"><!-- Engine节点，name修改为Catalina1 --><Engine name="Catalina1" defaulthost="localhost"> <Realm classname="org.apache.catalina.realm.LockOutRealm">   <Realm classname="org.apache.catalina.realm.UserDatabaseRealm" resourcename="UserDatabase"> </Realm> <!-- 修改Host节点，appBase修改为webapps1 --><p> &lt;Host name=”localhost”  appBase=”webapps1”</p><pre><code>   unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</code></pre><p>   &lt;Valve className=”org.apache.catalina.valves.AccessLogValve” directory=”logs”</p><pre><code>      prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;      pattern=&quot;%h %l %u %t &quot;%r&quot; %s %b&quot; /&gt;</code></pre> </Realm></Engine></Connector></Service></li></ol><p>Service的name属性修改为Catelina1<br>http协议访问的Connector port属性修改为8081<br>AJP协议访问的Connector port属性修改为8010<br>Engine的name属性修改为Catelina1<br>Host的appBase属性修改为webapps1</p><hr><h2 id="不修改端口-部署多个项目"><a href="#不修改端口-部署多个项目" class="headerlink" title="不修改端口 部署多个项目"></a>不修改端口 部署多个项目</h2><ol><li><p>多个项目都放在webapp下</p></li><li><p>修改tomcat的conf下的server.xml，新增web应用节点</p> <!-- Access log processes all example.          Documentation at: /docs/config/valve.html          Note: The pattern used is equivalent to using pattern="common" --><pre><code> &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;        prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;        pattern=&quot;%h %l %u %t &quot;%r&quot; %s %b&quot; /&gt; &lt;!-- 配置web应用 --&gt;  &lt;Context docBase=&quot;erp&quot; path=&quot;/erp&quot; reloadble=&quot;true&quot; /&gt; &lt;Context docBase=&quot;ningmengban&quot; path=&quot;/ningmengban&quot; reloadble=&quot;true&quot; /&gt;</code></pre>    </li></ol><p><strong>docBase属性:</strong> 指定Web应用的文件路径，可以是绝对路径，也可以给定相对路径<br><strong>path属性:</strong> 指定访问该Web应用的URL入口<br><strong>reloadable属性:</strong> 若这个属性为true，tomcat服务器在运行状态下会监视WEB-INF/classes和WEB-INF/lib目录下class文件的改动，如果监测到class文件被更新，服务器会自动重新加载Web应用。</p>]]></content>
      
      
      <categories>
          
          <category> question </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
            <tag> 域名 </tag>
            
            <tag> ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat 域名访问</title>
      <link href="2020/10/04/tomcat-yu-ming-fang-wen/"/>
      <url>2020/10/04/tomcat-yu-ming-fang-wen/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a><br>感谢：<a href="https://blog.csdn.net/qq_41570658/article/details/84822981">https://blog.csdn.net/qq_41570658/article/details/84822981</a></p><hr><h2 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h2><ol><li>项目导出war包</li><li>放到tomcat中的webapps下<br> 此时可以过ip地址加端口号加项目名访问项目</li></ol><hr><h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h2><p>安全组中要加80端口</p><hr><h2 id="修改tomcat配置文件"><a href="#修改tomcat配置文件" class="headerlink" title="修改tomcat配置文件"></a>修改tomcat配置文件</h2><ol><li>打开tomcat conf server.xml<br> <img src="https://i.loli.net/2020/10/07/KP7FIfHanvMUREb.png" alt="20181205104903917.png"><br> <img src="https://i.loli.net/2020/10/07/3WaZbHVXcqOpTsv.png" alt="20181205105139229.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> question </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Git Bash</title>
      <link href="2020/10/04/github-git-bash/"/>
      <url>2020/10/04/github-git-bash/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a><br>感谢：<a href="https://blog.csdn.net/qq_36667170/article/details/79085301">https://blog.csdn.net/qq_36667170/article/details/79085301</a></p><hr><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li><strong>git</strong></li><li><strong>github仓库</strong></li></ol><hr><h2 id="进入本地文件夹"><a href="#进入本地文件夹" class="headerlink" title="进入本地文件夹"></a>进入本地文件夹</h2><ol><li><strong>找到文件夹 右键 gitbash</strong></li><li><strong>gitbash cd</strong></li></ol><hr><h2 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h2><p><code>$ git init</code><br>初始化成功后目录名后面会有（master）并且文件根目录会多出.git隐藏文件夹</p><hr><h2 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h2><p><a href="https://blog.csdn.net/qq_36667170/article/details/79094257">https://blog.csdn.net/qq_36667170/article/details/79094257</a></p><p>两种方法</p><ul><li>直接使用https url克隆到本地</li><li>使用SSH url克隆到本地</li></ul><p>区别</p><ul><li>复制https url然后到git Bash里面直接用clone命令克隆到本地，但是每次fetch和push代码都需要输入账号和密码</li><li>使用SSH url需要在只用之前先配置和添加好SSH key。每次fetch和push代码都不需要输入账号和密码，如果你想要每次都输入账号密码才能进行fetch和push也可以另外进行设置。</li></ul><ol><li><p><strong>创建ssh</strong><br> <code>$ ssh-keygen -t rsa -C &quot;你的邮箱&quot;</code><br> ……一系列操作<br> 会得到ssh 复制下来</p></li><li><p><strong>添加ssh到github</strong><br> setting<br> ssh</p><p> 添加成功后会收到邮件</p></li><li><p><strong>测试连接</strong><br> <code>$ ssh -T git@github.com</code><br> ……一系列操作 </p></li><li><p>连接地址<br> 最后会得到ssh地址</p></li></ol><hr><h2 id="连接远程仓库"><a href="#连接远程仓库" class="headerlink" title="连接远程仓库"></a>连接远程仓库</h2><ol><li>本地仓库打开gitbash<br> <code>$ git remote add origin + 连接地址</code></li><li>测试连接<br> <code>$ git remote -v</code></li></ol><hr><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><ol><li><strong>添加文件</strong></li></ol><ul><li><code>$ git add +文件名.文件类型</code>  ，将某个文件加到缓存区</li><li><code>$ git add +文件名.文件类型 ... 文件名.文件类型</code>  ，将n个文件添加到缓存区</li><li><code>$ git add xx文件夹/*.html</code>，将xx文件夹下的所有的html文件添加到缓存区。</li><li><code>$ git add *hhh</code>  ，将以hhh结尾的文件的所有修改添加到暂存区</li><li><code>$ git add Hello*</code>  ，将所有以Hello开头的文件的修改添加到暂存区</li><li><code>git add -u</code>  ，提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)</li><li><code>git add .</code>，提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件</li><li>…</li><li><strong><code>git add -A</code>**，提交</strong>所有变化**。git add前几条都可以记不住，这个必须记住！！！</li></ul><ol start="2"><li><strong>添加描述</strong><br><code>$ git commit -m &quot;修改注释&quot;</code></li><li><strong>推到远程仓库</strong><ul><li><code>$ git push -u origin master</code></li><li>只有第一次推的时候需要加上<code>-u</code>，以后的推送只输入：<br><code>$ git push origin master</code></li><li><code>$ git push origin master -f</code> 这个<code>-f</code>就是force，强制推送</li></ul></li></ol><hr><h2 id="Git冲突：commit-your-changes-or-stash-them-before-you-can-merge"><a href="#Git冲突：commit-your-changes-or-stash-them-before-you-can-merge" class="headerlink" title="Git冲突：commit your changes or stash them before you can merge."></a>Git冲突：commit your changes or stash them before you can merge.</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">stash</span></span><br><span class="line"><span class="attr">git</span> <span class="string">pull</span></span><br><span class="line"><span class="attr">git</span> <span class="string">stash pop</span></span><br></pre></td></tr></table></figure><hr><h2 id="配置不上传的文件"><a href="#配置不上传的文件" class="headerlink" title="配置不上传的文件"></a>配置不上传的文件</h2><p>例：不上传<code>.idea</code>文件</p><ol><li>配置.gitignore文件(新建/编辑）</li><li>将.gitignore文件上传到远程仓库</li><li>删除git的.idea文件</li><li>同步到远程仓库<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;.idea&#39; &gt;&gt; .gitignore</span><br><span class="line"></span><br><span class="line">git pull</span><br><span class="line">git add .gitignore</span><br><span class="line">git commit -m &#39;edit .gitignore&#39;</span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line">git rm --cached -r .idea</span><br><span class="line"></span><br><span class="line">git commit -m &#39;delete .idea&#39;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="GitHub仓库导入Gitee及同步更新"><a href="#GitHub仓库导入Gitee及同步更新" class="headerlink" title="GitHub仓库导入Gitee及同步更新"></a>GitHub仓库导入Gitee及同步更新</h2><ol><li>导入仓库</li><li>同步更新<ol><li><code>git remote -v</code> 查看您要同步的仓库的远程库列表，如果在列表中没有您 Gitee 的远程库地址，您需要新增一个地址<code>git remote add 远程库名 远程库地址</code></li><li>从 GitHub 上拉取最新代码到本地</li><li>推送本地最新代码到 Gitee 上<code>git push</code> 远程库名 分支名</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitalk</title>
      <link href="2020/10/04/gitalk/"/>
      <url>2020/10/04/gitalk/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a><br>感谢：<a href="https://www.cnblogs.com/quanxiaoha/p/10925401.html">https://www.cnblogs.com/quanxiaoha/p/10925401.html</a></p><hr><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p><a href="https://github.com/gitalk/gitalk">https://github.com/gitalk/gitalk</a></p><ol><li>theme中有写好的前端代码</li><li>npm安装<br> <code>npm i --save gitalk</code></li><li>github准备一个存储评论的库</li><li>申请<strong>GitHub Application</strong><ol><li>个人github主页</li><li>setting</li><li>Developer settings</li><li>OAuth Apps</li></ol></li></ol><hr><h2 id="填写参数"><a href="#填写参数" class="headerlink" title="填写参数"></a>填写参数</h2><pre><code>#应用编号clientID: &#39;&#39;# 应用秘钥clientSecret: &#39;&#39;# issue仓库名repo: &#39;&#39;# Github名owner: &#39;&#39;# Github名admin: [&#39;&#39;]# Ensure uniqueness and length less than 50id: location.pathname</code></pre><hr><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>具体问题查看上方链接</p>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题_function</title>
      <link href="2020/10/01/mian-shi-ti-function/"/>
      <url>2020/10/01/mian-shi-ti-function/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><p><strong>方法中的局部变量在**</strong>方法被调用加载时开始入栈时创建**</p><hr><h2 id="list链表"><a href="#list链表" class="headerlink" title="list链表"></a>list链表</h2><p>Arraylist默认数组大小是10，扩容后的大小是扩容前的1.5倍<br><a href="https://www.cnblogs.com/xiaostudy/p/9503199.html">详细查看</a></p><ul><li><p><strong>list.add(E element)</strong><br>向集合<code>尾部</code>中添加对象</p></li><li><p><strong>list.get(int index)</strong><br>指定位置获取</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;保护环境&quot;</span>);     <span class="comment">//向列表中添加数据</span></span><br><span class="line">    list.add(<span class="string">&quot;爱护地球&quot;</span>);     <span class="comment">//向列表中添加数据</span></span><br><span class="line">    list.add(<span class="string">&quot;从我做起&quot;</span>);     <span class="comment">//向列表中添加数据</span></span><br><span class="line">    <span class="comment">//通过循环输出列表中的内容</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">     System.out.println(i+<span class="string">&quot;:&quot;</span>+list.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>list.add(int index,E element)</strong><br>指定位置插入<br>在列表的指定位置插入指定元素,并将当前处于该位置的元素及其后续元素的索引加1</p></li><li><p><strong>boolean  addAll(int index,  Collection&lt;? extends  E&gt; c)</strong><br>指定的位置中插入c集合全部的元素<br>当插入的集合c没有元素，那么就返回false，如果集合c有元素，插入成功，那么就返回true</p></li><li><p><strong>int  indexOf(Object o)</strong><br>返回list集合中第一次出现o对象的索引位置，如果list集合中没有o对象，那么就返回-1</p></li><li><p><strong>ListIterator<E>  listIterator()</E></strong><br>返回此列表元素的列表迭代器（按适当顺序）<br><code>listIterator和iterator的区别是什么呢？</code><br><a href="https://blog.csdn.net/longshengguoji/article/details/41551491">详细查看</a><br>当只需要遍历集合时，两个迭代器的功能都是一样。<br>但是listIterator迭代器只能用于List和他的实现子类，iterator迭代器可以用于所有的集合使用。<br>所不同的就是listIterator迭代器的功能会比iterator迭代器的功能要多。<br>listIterator迭代器可以在遍历集合时添加、修改和删除，而iterator迭代器在遍历集合时只有删除</p></li><li><p><strong>ListIterator<E>  listIterator(int index)</E></strong><br>从指定位置开始，返回此列表元素的列表迭代器（按适当顺序）。<br>和上面那个迭代器不同的就是多了一个参数，就是能控制迭代器开始的位置。</p></li><li><p><strong>List<E>  subList(int fromIndex, int toIndex)</E></strong><br>返回从索引fromIndex到toIndex的元素集合，包左不包右</p></li></ul><hr><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><table><thead><tr><th>Map集合类</th><th>key</th><th>value</th></tr></thead><tbody><tr><td>HashMap</td><td>允许为null</td><td>允许为null</td></tr><tr><td>TreeMap</td><td>不允许为null</td><td>允许为null</td></tr><tr><td>ConcurrentMap</td><td>不允许为null</td><td>不允许为null</td></tr><tr><td>HashTable</td><td>不允许为null</td><td>不允许为null</td></tr></tbody></table><ol><li>HashMap<br> 数组+链表+红黑树<br> 数组是主体，链表为了解决哈希冲突（哈希是通过对数据进行再压缩，提高效率的一种解决方法。但由于通过哈希函数产生的哈希值是有限的，而数据可能比较多，导致经过哈希函数处理后仍然有不同的数据对应相同的值。这时候就产生了哈希冲突。）<a href="https://www.cnblogs.com/higerMan/p/11907117.html">详细查看及解决办法</a></li></ol><hr><h2 id="List、Map、Set区别"><a href="#List、Map、Set区别" class="headerlink" title="List、Map、Set区别"></a>List、Map、Set区别</h2><p><a href="https://blog.csdn.net/jingxin_123/article/details/82348060">详细查看</a></p><ol><li><p><strong>collection</strong><br> Collection是最基本的集合接口，声明了适用于JAVA集合（只包括Set和List）的通用方法<br> Map接口并不是Collection接口的子接口</p><ul><li>List  <ul><li>LinkedList 非同步  </li><li>ArrayList 非同步，实现了可变大小的元素数组  </li><li>Vector 同步  <ul><li>Stack  </li></ul></li></ul></li><li>Set 不允许有相同的元素  </li></ul></li><li><p><strong>list</strong></p><ul><li>List的长度可变。 List集合像一个数组，是有序的。按顺序输入输出。 可以插入多个null元素。 List可以通过index知道元素的位置，它允许元素的重复。ArrayList, LinkedList, Vector可以实现List接口。</li><li>List 是一个<strong>有序集合</strong>，可以存放<strong>重复</strong>的数据 (有序：存进是什么顺序，取出时还是什么顺序)<br>(1).ArrayList 底层是数组适合查询，不适合增删元素。<br>(2).LiskedList 底层是双向链表适合增删元素，不适合查询操作。<br>(3).Vector 底层和ArrayList相同，但是Vector是线程安全的，效率较低很少使用<br><img src="https://i.loli.net/2020/10/22/OKdsSeGQAwaEf5y.png" alt="838837-20190521092648019-983754481.png"></li></ul></li><li><p><strong>set</strong></p><ul><li>HashSet, LinkedHashSet,TreeSet 可以实现Set接口。</li><li>Set 是一个<strong>无序集合</strong>，<strong>不允许放重复</strong>的数据 (无序不可重复，存进和取出的顺序不一样)<br>(1).HashSet 底层是哈希表/散列表<br>(2).TreeSet 继承sartedSet接口（无需不可重复，但存进去的元素可以按照元素的大小自动排序）  </li></ul></li><li><p><strong>map</strong><br> Map不是collection的子接口或者实现类。Map是一个接口。 Map 里你可以拥有随意个 null 值但最多只能有一个 null 键。 Map(interface): 使用键值对(key-value), 值(value)可以重复，键(key)不可以重复。HashMap, LinkedHashMap, Hashtale, TreeMap可以实现Map接口。</p> <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">List</span> = 排成一长队的小猪  </span><br><span class="line"><span class="attr">Map</span> = 放在一个个，有房间号的屋子里面的一群小猪  </span><br><span class="line"><span class="attr">Set</span> = 一群小猪贴上号，然后赶到一个猪圈里</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><ul><li><strong>HashSet是Java集合Set的一个实现类</strong><br>  底层是通过HashMap实现<br>  HashSet的add方法时通过HashMap的put方法实现的，不过HashMap是key-value键值对，而HashSet是集合<br>  HashSet的remove方法通过HashMap的remove方法来实现</li><li><strong>=遍历方法</strong><ul><li>普通for循环<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i;i;i++)</span><br></pre></td></tr></table></figure></li><li>增强for循环<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i:list)</span><br></pre></td></tr></table></figure></li><li>迭代器<br>迭代器是一种模式</li></ul></li></ul><hr><h2 id="HashTable和HashMap的区别"><a href="#HashTable和HashMap的区别" class="headerlink" title="HashTable和HashMap的区别"></a>HashTable和HashMap的区别</h2><p><a href="https://www.cnblogs.com/williamjie/p/9099141.html">详细查看</a></p><ol><li><p><strong>HashMap</strong><br> 基于哈希表实现，每一个元素是一个key-value对，其内部通过单链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长<br> 非线程安全<br> 只适用单线程环境，多线程环境下可以采用concurrent并发包下的concurrentHashMap。</p></li><li><p><strong>HashTable</strong><br> 基于哈希表实现，每一个元素是一个key-value对，其内部通过单链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长<br> 线程安全<br> 能用于多线程环境</p></li><li><p><strong>区别</strong></p></li></ol><ul><li><strong>继承父类不同</strong><br>  Hashtable继承自Dictionary类，而HashMap继承自AbstractMap类。但二者都实现了Map接口。</li><li><strong>线程安全不同</strong></li><li><strong>是否提供contains方法</strong></li><li><strong>key和value是否允许null值</strong><br>  key和value都是对象，并且不能包含重复key，但可以包含重复的value<br>  Hashtable中，key和value都不允许出现null值<br>HashMap中，null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null</li><li><strong>遍历方式内部实现不同</strong></li><li><strong>hash不同</strong><br>  哈希值的使用不同，HashTable直接使用对象的hashCode。而HashMap重新计算hash值。</li><li><strong>内部实现使用的数组初始化和扩容方式不同</strong><br>  HashTable在不指定容量的情况下的默认容量为11，而HashMap为16，Hashtable不要求底层数组的容量一定要为2的整数次幂，而HashMap则要求一定为2的整数次幂。<br>  Hashtable扩容时，将容量变为原来的2倍加1，而HashMap扩容时，将容量变为原来的2倍。</li></ul><hr><h2 id="ArrayList、LinkedList、HashMap、LinkedHashMap区别"><a href="#ArrayList、LinkedList、HashMap、LinkedHashMap区别" class="headerlink" title="ArrayList、LinkedList、HashMap、LinkedHashMap区别"></a>ArrayList、LinkedList、HashMap、LinkedHashMap区别</h2><ul><li><h3 id="ArrayList：无序集合"><a href="#ArrayList：无序集合" class="headerlink" title="ArrayList：无序集合"></a><strong>ArrayList</strong>：无序集合</h3><ul><li>可以看作是能够自动增长容量的数组</li><li>ArrayList的<strong>toArray</strong>方法返回一个数组</li><li>ArrayList的<strong>asList</strong>方法返回一个列表</li></ul></li><li><h3 id="LinkedList：有序集合-LinkedList链表由一系列表项连接而成。一个表项总是包含3个部分：元素内容，前驱表和后驱表"><a href="#LinkedList：有序集合-LinkedList链表由一系列表项连接而成。一个表项总是包含3个部分：元素内容，前驱表和后驱表" class="headerlink" title="LinkedList：有序集合,LinkedList链表由一系列表项连接而成。一个表项总是包含3个部分：元素内容，前驱表和后驱表"></a><strong>LinkedList</strong>：有序集合,LinkedList链表由一系列表项连接而成。一个表项总是包含3个部分：元素内容，前驱表和后驱表</h3><ul><li>LinkList是一个<strong>双链表</strong>,在添加和删除元素时具有比ArrayList更好的性能.但在get与set方面弱于ArrayList.当然,这些对比都是指数据量很大或者操作很频繁。<br><img src="https://i.loli.net/2020/10/07/vCHG62VnIE5YxBT.png" alt="201902241953036.png"><br><img src="https://i.loli.net/2020/10/07/AsjLwmxI7FKGtQr.png" alt="20190224195407413.png"></li></ul></li><li><h3 id="HashMap：无序-lt-key-value-gt-键值对"><a href="#HashMap：无序-lt-key-value-gt-键值对" class="headerlink" title="HashMap：无序&lt;key,value&gt;键值对"></a><strong>HashMap</strong>：无序&lt;key,value&gt;键值对</h3></li><li><h3 id="LinkedHashMap：有序-lt-key-value-gt-键值对"><a href="#LinkedHashMap：有序-lt-key-value-gt-键值对" class="headerlink" title="LinkedHashMap：有序&lt;key,value&gt;键值对"></a><strong>LinkedHashMap</strong>：有序&lt;key,value&gt;键值对</h3></li></ul><hr><h2 id="线程安全和非线程安全"><a href="#线程安全和非线程安全" class="headerlink" title="线程安全和非线程安全"></a>线程安全和非线程安全</h2><p><strong>线程安全(Thread-safe)的集合对象：</strong></p><ul><li>Vector 线程安全：</li><li>HashTable 线程安全：</li><li>StringBuffer 线程安全：</li></ul><p><strong>非线程安全的集合对象：</strong></p><ul><li>ArrayList ：</li><li>LinkedList：</li><li>HashMap：</li><li>HashSet：</li><li>TreeMap：</li><li>TreeSet：</li><li>StringBulider：</li></ul><p><strong>线程安全的类</strong></p><ul><li>线程同步：喂，SHE</li><li>喂（Vector）</li><li>S（Stack）</li><li>H（hashtable）</li><li>E（enumeration）</li></ul><hr><h2 id="三目条件运算符"><a href="#三目条件运算符" class="headerlink" title="三目条件运算符"></a>三目条件运算符</h2><pre><code><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">max</span>=<span class="keyword">a</span>&gt;b?<span class="keyword">a</span>:b  </span><br><span class="line"><span class="built_in">min</span>=<span class="keyword">a</span>&lt;b?<span class="keyword">a</span>:b</span><br></pre></td></tr></table></figure></code></pre><hr><h2 id="equals和"><a href="#equals和" class="headerlink" title="equals和=="></a>equals和==</h2><h3 id="equals等价关系"><a href="#equals等价关系" class="headerlink" title="equals等价关系"></a>equals等价关系</h3><p>（一）自反性</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x.equals(x); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>（二）对称性</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x.equals(y) == y.equals(x); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>（三）传递性</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (x.equals(y) &amp;&amp; y.equals(z))</span><br><span class="line">    x.equals(z); <span class="comment">// true;</span></span><br></pre></td></tr></table></figure><p>（四）一致性</p><p>多次调用 equals() 方法结果不变</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x.equals(y) == x.equals(y); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>（五）与 null 的比较</p><p>对任何不是 null 的对象 x 调用 x.equals(null) 结果都为 false</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x.equals(<span class="keyword">null</span>); <span class="comment">// false;</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_36522306/article/details/80550210">详细查看</a></p><ol><li>Float类和Double类都重写对于的equals方法，在比较之前都会判断是否同属于Float对象或Double对象，如果不是直接返回false，如果是再继续比较对应的数值大小<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> (obj <span class="keyword">instanceof</span> Float) </span><br><span class="line">          &amp;&amp; (floatToIntBits(((Float)obj).value) == floatToIntBits(value)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123; </span><br><span class="line">   <span class="keyword">return</span> (obj <span class="keyword">instanceof</span> Double) </span><br><span class="line">          &amp;&amp; (doubleToLongBits(((Double)obj).value) == doubleToLongBits(value)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>==是判断两个变量或实例是不是指向同一个<strong>内存空间</strong>，equals是判断两个变量或实例所指向的<strong>内存空间的值</strong>是不是相同</p></li><li><p>==是指对<strong>内存地址</strong>进行比较 ， equals()是对<strong>字符串的内容</strong>进行比较  </p></li><li><p>==指<strong>引用</strong>是否相同， equals()指的是<strong>值</strong>是否相同<br><img src="https://i.loli.net/2020/10/07/1pFuqfcKnCI6jkl.png" alt="20180602183200272.png"></p></li><li><p>== 比较的是变量(栈)内存中存放的对象的(堆)内存地址，用来判断两个对象的地址是否相同，即是否是指相同一个对象。比较的是真正意义上的指针操作</p></li><li><p>equals用来比较的是两个对象的内容是否相等，由于所有的类都是继承自java.lang.Object类的，所以适用于所有对象</p></li><li><p>==可用于基本类型和引用类型：当用于基本类型时候，是比较值是否相同；当用于引用类型的时候，是比较对象是否相同。</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer x = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">Integer y = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">System.out.println(x.equals(y)); <span class="comment">// true</span></span><br><span class="line">System.out.println(x == y);      <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="hashcode（）"><a href="#hashcode（）" class="headerlink" title="hashcode（）"></a>hashcode（）</h2><ul><li>返回散列值</li><li>等价的两个对象散列值一定相同，但是散列值相同的两个对象不一定等价</li></ul><p>下面的代码中，新建了两个等价的对象，并将它们添加到 HashSet 中。我们希望将这两个对象当成一样的，只在集合中添加一个对象，但是因为 EqualExample 没有实现 hasCode() 方法，因此这两个对象的散列值是不同的，最终导致集合添加了两个等价的对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EqualExample e1 = <span class="keyword">new</span> EqualExample(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">EqualExample e2 = <span class="keyword">new</span> EqualExample(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(e1.equals(e2)); <span class="comment">// true</span></span><br><span class="line">HashSet&lt;EqualExample&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">set.add(e1);</span><br><span class="line">set.add(e2);</span><br><span class="line">System.out.println(set.size());   <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><hr><h2 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h2><p>clone() 方法并不是 Cloneable 接口的方法，而是 Object 的一个 protected 方法,Cloneable 接口只是<strong>规定</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneExample</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 clone() 方法来拷贝一个对象即复杂又有风险，它会抛出异常，并且还需要类型转换</p><hr><h2 id="重载和重写"><a href="#重载和重写" class="headerlink" title="重载和重写"></a>重载和重写</h2><ol><li><strong>方法的重写（override）两同两小一大原则</strong>：</li></ol><ul><li>方法名相同，参数类型相同</li><li>子类返回类型小于等于父类方法返回类型，</li><li>子类抛出异常小于等于父类方法抛出异常，</li><li>子类访问权限大于等于父类方法访问权限。</li></ul><hr><h2 id="substring（）"><a href="#substring（）" class="headerlink" title="substring（）"></a>substring（）</h2><p>返回字符串的子字符串</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex)</span>  </span></span><br><span class="line"><span class="function">或  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex,  <span class="keyword">int</span> endIndex)</span></span></span><br></pre></td></tr></table></figure><ul><li><p><strong>beginIndex</strong>  – 起始索引（包括）, 索引从 0 开始。</p></li><li><p><strong>endIndex</strong>  – 结束索引（不包括）。</p></li></ul><hr><h2 id="遍历list-三种方法"><a href="#遍历list-三种方法" class="headerlink" title="遍历list(三种方法)"></a>遍历list(三种方法)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(String s : list)&#123;  </span><br><span class="line">System.out.print(s+<span class="string">&quot;/t&quot;</span>);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;list.size();i++)&#123;  </span><br><span class="line">System.out.print(list.get(i)+<span class="string">&quot;/t&quot;</span>);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Iterator item = list.iterator();item.hasNext();)&#123;  </span><br><span class="line">System.out.print(item.next()+<span class="string">&quot;/t&quot;</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Integer的parseInt和valueof和decode"><a href="#Integer的parseInt和valueof和decode" class="headerlink" title="Integer的parseInt和valueof和decode"></a>Integer的parseInt和valueof和decode</h2><p><a href="https://blog.csdn.net/qq_39741730/article/details/105222301">详细查看</a></p><h3 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt"></a>parseInt</h3><p>解析一个string表示的数</p><h3 id="valueof"><a href="#valueof" class="headerlink" title="valueof"></a>valueof</h3><p>可以接受int作为参数，也可以接受string作为参数，当参数为string时，valueOf底层<strong>还是会调用parseInt</strong><br>当参数为int时，若参数在范围<code>-128~127</code>之间，则直接从常量池中取数，若不在这个范围内，则新new一个</p><h3 id="decode"><a href="#decode" class="headerlink" title="decode"></a>decode</h3><p>可以自动解析参数进制,但是不能像parseInt那样自己指定进制</p><p><img src="https://i.loli.net/2020/10/20/5pli3mYTD42udGZ.png" alt="屏幕截图 2020-10-20 200611.png"></p><hr><h2 id="Date类型比较"><a href="#Date类型比较" class="headerlink" title="Date类型比较"></a>Date类型比较</h2><p><a href="https://zhidao.baidu.com/question/29979581.html">详细查看</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String beginTime = <span class="string">&quot;2018-07-28 14:42:32&quot;</span>;</span><br><span class="line">String endTime = <span class="string">&quot;2018-07-29 12:26:32&quot;</span>;</span><br><span class="line"></span><br><span class="line">SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Date date1 = format.parse(beginTime);</span><br><span class="line">Date date2 = format.parse(endTime);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> compareTo = date1.compareTo(date2);</span><br><span class="line">System.out.println(compareTo);</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line">compareTo = date2.compareTo(date1);</span><br><span class="line">System.out.println(compareTo);</span><br><span class="line"><span class="comment">//-1</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Split"><a href="#Split" class="headerlink" title="Split()"></a>Split()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span>  <span class="title">Test</span>  </span>&#123;  </span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String  args[])</span>  </span>&#123;  </span><br><span class="line">String  str = <span class="keyword">new</span>  String(<span class="string">&quot;Welcome-to-Runoob&quot;</span>); </span><br><span class="line">System.out.println(<span class="string">&quot;- 分隔符返回值 :&quot;</span>  ); </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  (String  retval: str.split(<span class="string">&quot;-&quot;</span>))&#123;  </span><br><span class="line">System.out.println(retval); &#125;  </span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>); </span><br><span class="line">System.out.println(<span class="string">&quot;- 分隔符设置分割份数返回值 :&quot;</span>  </span><br><span class="line">); </span><br><span class="line"><span class="keyword">for</span>  (String  retval: str.split(<span class="string">&quot;-&quot;</span>, <span class="number">2</span>))&#123;  </span><br><span class="line">System.out.println(retval); &#125;  </span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>); </span><br><span class="line">String  str2 = <span class="keyword">new</span>  String(<span class="string">&quot;www.runoob.com&quot;</span>); </span><br><span class="line">System.out.println(<span class="string">&quot;转义字符返回值 :&quot;</span>  </span><br><span class="line">);</span><br><span class="line"><span class="keyword">for</span>  (String  retval: str2.split(<span class="string">&quot;\\.&quot;</span>, <span class="number">3</span>))&#123;  </span><br><span class="line">System.out.println(retval); &#125;  </span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>); </span><br><span class="line">String  str3 = <span class="keyword">new</span>  String(<span class="string">&quot;acount=? and uu =? or n=?&quot;</span>); </span><br><span class="line">System.out.println(<span class="string">&quot;多个分隔符返回值 :&quot;</span>  </span><br><span class="line">); </span><br><span class="line"><span class="keyword">for</span>  (String  retval: str3.split(<span class="string">&quot;and|or&quot;</span>))&#123;  </span><br><span class="line">System.out.println(retval); </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>分隔符返回值  :<br>Welcome<br>to<br>Runoob  </li><li>分隔符设置分割份数返回值  :  </li><li>Welcome </li><li>to-Runoob  </li><li>转义字符返回值  :<br>www<br>runoob<br>com<br>多个分隔符返回值  :<br>acount=?<br>uu =?<br>n=?</li></ul><hr><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><h3 id="floor（）-求小于参数的最大整数。返回double类型—–n-地板，地面"><a href="#floor（）-求小于参数的最大整数。返回double类型—–n-地板，地面" class="headerlink" title="floor（）: 求小于参数的最大整数。返回double类型—–n. 地板，地面"></a>floor（）: 求小于参数的最大整数。返回double类型—–n. 地板，地面</h3><p>例如：Math.floor(-4.2) = -5.0  </p><hr><h3 id="ceil（）-求大于参数的最小整数。返回double类型—–vt-装天花板；"><a href="#ceil（）-求大于参数的最小整数。返回double类型—–vt-装天花板；" class="headerlink" title="ceil（）: 求大于参数的最小整数。返回double类型—–vt. 装天花板；"></a>ceil（）: 求大于参数的最小整数。返回double类型—–vt. 装天花板；</h3><p>例如：Math.ceil(5.6) = 6.0  </p><hr><h3 id="round（）-对小数进行四舍五入后的结果。返回int类型"><a href="#round（）-对小数进行四舍五入后的结果。返回int类型" class="headerlink" title="round（）: 对小数进行四舍五入后的结果。返回int类型"></a>round（）: 对小数进行四舍五入后的结果。返回int类型</h3><p>例如：Math.round(-4.6) = -5</p><hr><h2 id="replace-和replaceAll"><a href="#replace-和replaceAll" class="headerlink" title="replace()和replaceAll()"></a>replace()和replaceAll()</h2><p>相同点是都是全部替换,即把源字符串中的某一字符或字符串全部换成指定的字符或字符串,如果只想替换第一次出现的,可以使用 <strong>replaceFirst()</strong></p><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>参数是char和CharSequence,即可以支持字符的替换,也支持字符串的替换</p><h3 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll"></a>replaceAll</h3><p>参数是regex,即基于规则表达式的替换</p><ol><li>“\d”在正则表达式中表示所有数字</li><li>“.”在正则表达式中表示除换行符 \n 之外的任何单字符</li></ol><hr><h2 id="Math-1"><a href="#Math-1" class="headerlink" title="Math"></a>Math</h2><ul><li><code>Math.sqrt()</code>  : 计算平方根</li><li><code>Math.cbrt()</code>  : 计算立方根</li><li><code>Math.pow(a, b)</code>  : 计算a的b次方</li><li><code>Math.max( , )</code>  : 计算最大值</li><li><code>Math.min( , )</code>  : 计算最小值</li><li><code>Math.abs()</code>  : 取绝对值<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(Math.sqrt(<span class="number">16</span>)); <span class="comment">// 4.0</span></span><br><span class="line">System.out.println(Math.cbrt(<span class="number">8</span>)); <span class="comment">// 2.0</span></span><br><span class="line">System.out.println(Math.pow(<span class="number">3</span>, <span class="number">2</span>)); <span class="comment">// 9.0</span></span><br><span class="line">System.out.println(Math.max(<span class="number">2.3</span>, <span class="number">4.5</span>));<span class="comment">// 4.5</span></span><br><span class="line">System.out.println(Math.min(<span class="number">2.3</span>, <span class="number">4.5</span>));<span class="comment">// 2.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * abs求绝对值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.out.println(Math.abs(-<span class="number">10.4</span>)); <span class="comment">// 10.4</span></span><br><span class="line">System.out.println(Math.abs(<span class="number">10.1</span>)); <span class="comment">// 10.1</span></span><br></pre></td></tr></table></figure></li><li><code>Math.ceil()</code>: 天花板的意思，就是逢余进一</li><li><code>Math.floor()</code>  : 地板的意思，就是逢余舍一</li><li><code>Math.rint()</code>: 四舍五入，返回double值。注意.5的时候会取偶数</li><li><code>Math.round()</code>: 四舍五入，float时返回int值，double时返回long值<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* ceil天花板的意思，就是逢余进一</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.out.println(Math.ceil(-<span class="number">10.1</span>)); <span class="comment">// -10.0</span></span><br><span class="line">System.out.println(Math.ceil(<span class="number">10.7</span>)); <span class="comment">// 11.0</span></span><br><span class="line">System.out.println(Math.ceil(-<span class="number">0.7</span>)); <span class="comment">// -0.0</span></span><br><span class="line">System.out.println(Math.ceil(<span class="number">0.0</span>)); <span class="comment">// 0.0</span></span><br><span class="line">System.out.println(Math.ceil(-<span class="number">0.0</span>)); <span class="comment">// -0.0</span></span><br><span class="line">System.out.println(Math.ceil(-<span class="number">1.7</span>)); <span class="comment">// -1.0</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * floor地板的意思，就是逢余舍一</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.out.println(Math.floor(-<span class="number">10.1</span>)); <span class="comment">// -11.0</span></span><br><span class="line">System.out.println(Math.floor(<span class="number">10.7</span>)); <span class="comment">// 10.0</span></span><br><span class="line">System.out.println(Math.floor(-<span class="number">0.7</span>)); <span class="comment">// -1.0</span></span><br><span class="line">System.out.println(Math.floor(<span class="number">0.0</span>)); <span class="comment">// 0.0</span></span><br><span class="line">System.out.println(Math.floor(-<span class="number">0.0</span>)); <span class="comment">// -0.0</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rint 四舍五入，返回double值 注意.5的时候会取偶数 异常的尴尬=。=</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.out.println(Math.rint(<span class="number">10.1</span>)); <span class="comment">// 10.0</span></span><br><span class="line">System.out.println(Math.rint(<span class="number">10.7</span>)); <span class="comment">// 11.0</span></span><br><span class="line">System.out.println(Math.rint(<span class="number">11.5</span>)); <span class="comment">// 12.0</span></span><br><span class="line">System.out.println(Math.rint(<span class="number">10.5</span>)); <span class="comment">// 10.0</span></span><br><span class="line">System.out.println(Math.rint(<span class="number">10.51</span>)); <span class="comment">// 11.0</span></span><br><span class="line">System.out.println(Math.rint(-<span class="number">10.5</span>)); <span class="comment">// -10.0</span></span><br><span class="line">System.out.println(Math.rint(-<span class="number">11.5</span>)); <span class="comment">// -12.0</span></span><br><span class="line">System.out.println(Math.rint(-<span class="number">10.51</span>)); <span class="comment">// -11.0</span></span><br><span class="line">System.out.println(Math.rint(-<span class="number">10.6</span>)); <span class="comment">// -11.0</span></span><br><span class="line">System.out.println(Math.rint(-<span class="number">10.2</span>)); <span class="comment">// -10.0</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * round 四舍五入，float时返回int值，double时返回long值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.out.println(Math.round(<span class="number">10</span>)); <span class="comment">// 10</span></span><br><span class="line">System.out.println(Math.round(<span class="number">10.1</span>)); <span class="comment">// 10</span></span><br><span class="line">System.out.println(Math.round(<span class="number">10.7</span>)); <span class="comment">// 11</span></span><br><span class="line">System.out.println(Math.round(<span class="number">10.5</span>)); <span class="comment">// 11</span></span><br><span class="line">System.out.println(Math.round(<span class="number">10.51</span>)); <span class="comment">// 11</span></span><br><span class="line">System.out.println(Math.round(-<span class="number">10.5</span>)); <span class="comment">// -10</span></span><br><span class="line">System.out.println(Math.round(-<span class="number">10.51</span>)); <span class="comment">// -11</span></span><br><span class="line">System.out.println(Math.round(-<span class="number">10.6</span>)); <span class="comment">// -11</span></span><br><span class="line">System.out.println(Math.round(-<span class="number">10.2</span>)); <span class="comment">// -10</span></span><br></pre></td></tr></table></figure></li><li><code>Math.random()</code>: 取得一个[0, 1)范围内的随机数<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(Math.random()); <span class="comment">// [0, 1)的double类型的数</span></span><br><span class="line">System.out.println(Math.random() * <span class="number">2</span>);<span class="comment">//[0, 2)的double类型的数</span></span><br><span class="line">System.out.println(Math.random() * <span class="number">2</span> + <span class="number">1</span>);<span class="comment">// [1, 3)的double类型的数</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="数组复制的方法"><a href="#数组复制的方法" class="headerlink" title="数组复制的方法"></a>数组复制的方法</h2><ol><li>for</li><li>System.arraycopy</li><li>Array.copyof</li><li>clone<br>从速度上看：System.arraycopy &gt; clone &gt; Arrays.copyOf &gt; for<br>for的速度最慢是因为下标表示法每次都从起点开始寻位到指定下标处（现代编译器应该对其有进行优化，改为指针），另外就是它每一次循环都要判断一次是否达到数组最大长度和进行一次额外的记录下标值的加法运算.<br>Arrays.copyOf本质上是调用了System.arraycopy。</li></ol>]]></content>
      
      
      <categories>
          
          <category> question </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面试 </tag>
            
            <tag> function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题_前端</title>
      <link href="2020/10/01/mian-shi-ti-qian-duan/"/>
      <url>2020/10/01/mian-shi-ti-qian-duan/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="dom操作"><a href="#dom操作" class="headerlink" title="dom操作"></a>dom操作</h2><ol><li>Javascript 操作元素Class属性的问题<br> getElementById().setAttribute(“class”,value)</li></ol><hr><h2 id="html页面加载运行"><a href="#html页面加载运行" class="headerlink" title="html页面加载运行"></a>html页面加载运行</h2><ol><li><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">”text/javascript”</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">”text/javascript”</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="Jquery"><a href="#Jquery" class="headerlink" title="Jquery"></a>Jquery</h2><p>JSON是一种理想的数据传输格式，它能够很好的融合与JavaScript或其他宿主语言，并且可以被JS直接使用<br><a href="https://www.cnblogs.com/dongsh/p/3235487.html">详细查看</a></p><ol><li><h3 id="getJSON"><a href="#getJSON" class="headerlink" title="$.getJSON"></a>$.getJSON</h3> 专门为ajax获取json数据 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$.getJSON( </span><br><span class="line">      url,                 <span class="comment">//请求URL</span></span><br><span class="line">      [data],           <span class="comment">//传参，可选参数,待发送 Key/value 参数</span></span><br><span class="line">      [callback]       <span class="comment">//回调函数，可选参数,载入成功时回调函数</span></span><br><span class="line">  　);</span><br></pre></td></tr></table></figure> 以GET方式提交数据，不能提交过大的数据量</li><li><h3 id="get"><a href="#get" class="headerlink" title="$.get"></a>$.get</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$.get( </span><br><span class="line">url, </span><br><span class="line">[data], </span><br><span class="line">[ callback] </span><br><span class="line"> ;)</span><br></pre></td></tr></table></figure> 基本同上</li><li><h3 id="post"><a href="#post" class="headerlink" title="$.post"></a>$.post</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$.post( </span><br><span class="line">url, </span><br><span class="line">[data], </span><br><span class="line">[callback], </span><br><span class="line">[type] </span><br><span class="line">);</span><br></pre></td></tr></table></figure> 基本同上<br> <strong>type</strong>：type为请求的数据类型，可以是html,xml,json等类型，如果我们设置这个参数为：json，那么返回的格式则是json格式的，如果没有设置，就和$.get()返回的格式一样，都是字符串的</li><li><h3 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax"></a>$.ajax</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//示例</span></span><br><span class="line">.ajax(</span><br><span class="line">           url: <span class="string">&quot;/legalconsult/layer/update-info&quot;</span>,</span><br><span class="line">           datatype:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">           type:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">           beforeSend:function()&#123;</span><br><span class="line">                           <span class="comment">//函数体，数据发送前执行。</span></span><br><span class="line">                    &#125;</span><br><span class="line">                     success：function()&#123;</span><br><span class="line">                           <span class="comment">//函数体，数据发送成功回调</span></span><br><span class="line">                     　　　　&#125;</span><br><span class="line">                     error: function()&#123;</span><br><span class="line">                           <span class="comment">//函数体，数据发送错误时执行</span></span><br><span class="line">                     　　    &#125;</span><br><span class="line">        );</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="input时间类型"><a href="#input时间类型" class="headerlink" title="input时间类型"></a>input时间类型</h2><p><a href="https://blog.csdn.net/wy123123000/article/details/77062404">详细查看</a></p><ol><li><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;input id=<span class="string">&quot;date&quot;</span> name=<span class="string">&quot;date&quot;</span> type=<span class="string">&quot;date&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/10/20/Bdx7wzmqcie1bCp.png" alt="20170810171727918.png"></li><li><h3 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;input id=<span class="string">&quot;time&quot;</span> name=<span class="string">&quot;time&quot;</span> type=<span class="string">&quot;time&quot;</span>/&gt; </span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/10/20/izp7XEdmjlokOtf.png" alt="20170810172009029.png"></li><li><h3 id="Month"><a href="#Month" class="headerlink" title="Month"></a>Month</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;input id=<span class="string">&quot;month&quot;</span> name=<span class="string">&quot;month&quot;</span> type=<span class="string">&quot;month&quot;</span>/&gt; </span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/10/20/NczIsoBwMQCDtdO.png" alt="20170810173244520.png"></li><li><h3 id="Week"><a href="#Week" class="headerlink" title="Week"></a>Week</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;input id=<span class="string">&quot;week&quot;</span> name=<span class="string">&quot;week&quot;</span> type=<span class="string">&quot;week&quot;</span>/&gt; </span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/10/20/3iGreq5NAcj8fQg.png" alt="20170810173451217.png"></li><li><h3 id="DateTime-Local"><a href="#DateTime-Local" class="headerlink" title="DateTime-Local"></a>DateTime-Local</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;input id=<span class="string">&quot;datetime-local&quot;</span> name=<span class="string">&quot;datetime-local&quot;</span> type=<span class="string">&quot;datetime-local&quot;</span>/&gt;  </span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/10/20/RXaJfSYj6GTrwQ9.png" alt="20170810173741491.png"></li></ol><hr><h2 id="html获取页面参数"><a href="#html获取页面参数" class="headerlink" title="html获取页面参数"></a>html获取页面参数</h2><p><a href="https://blog.csdn.net/qq_41485414/article/details/79577879">详细查看</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">GetQueryString</span><span class="params">(name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> RegExp(<span class="string">&quot;(^|&amp;)&quot;</span> + name + <span class="string">&quot;=([^&amp;]*)(&amp;|$)&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> r = window.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line"><span class="keyword">if</span>(r != <span class="keyword">null</span>) <span class="keyword">return</span> decodeURI(r[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> question </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题_ssm</title>
      <link href="2020/10/01/mian-shi-ti-ssm/"/>
      <url>2020/10/01/mian-shi-ti-ssm/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="ssm"><a href="#ssm" class="headerlink" title="ssm"></a>ssm</h2><ul><li><p>通过HttpServletRequest. getParameter获取的参数.<br> 由客户端浏览器和Web容器配置共同决定编码<br> 浏览器根据jsp页面开头声明的编码方式对request中参数编码<br> tomcat默认解码是ISO-8859-1，  但是我们可以显示指定解码格式通过调用  request.setCharacterEncoding(“UTF-8”)，或者修改tomcat的配置文件server.xml中的编码，添加uriEncoding属性</p></li><li><p><strong>依赖</strong><br> 依赖注入能够独立开发各组件，然后根据组件间关系进行组装<br> 依赖注入提供使用接口编程<br> 依赖注入指对象在使用时动态注入<br> 依赖注入的动机就是减少组件之间的耦合度，使开发更为简洁<br> 依赖注入是一种思想，或者说是一种设计模式，在java中是通过反射机制实现，与具体框架无关<br> 依赖注入三种方式：</p><ul><li>接口注入</li><li>setter方法注入</li><li>构造方法注入</li></ul></li></ul><hr><h2 id="servlet生命周期"><a href="#servlet生命周期" class="headerlink" title="servlet生命周期"></a>servlet生命周期</h2><p>Servlet的生命周期分为5个阶段：加载、创建、初始化、处理客户请求、卸载。</p><ol><li><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3> 容器通过类加载器使用servlet类对应的文件加载servlet</li><li><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3> 通过调用servlet构造函数创建一个servlet对象</li><li><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3> 调用init方法初始化</li><li><h3 id="处理客户请求"><a href="#处理客户请求" class="headerlink" title="处理客户请求"></a>处理客户请求</h3> 每当有一个客户请求，容器会创建一个线程来处理客户请求</li><li><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3> 调用destroy方法让servlet自己释放其占用的资源</li></ol><hr><h2 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h2><ul><li>Spring是一系列轻量级Java EE框架的集合</li><li>Spring中包含一个“依赖注入”模式的实现</li><li>使用Spring可以实现声明式事务</li><li>Spring并没有为我们提供日志系统，我们需要使用AOP（面向方面编程）的方式，借助Spring与日志系统log4j实现我们自己的日志系统。</li></ul><h2 id="jsp"><a href="#jsp" class="headerlink" title="jsp"></a>jsp</h2><p><a href="https://blog.csdn.net/weixin_42614447/article/details/86535581">详细查看</a></p><p>JSP会先解释成Servlet源文件，然后编译成Servlet类文件<br>servlet生命周期：init 、service、destory<br>除了init只初始化一次外、其他用户端运行JSP时方法都会运行一次</p><ol><li><h3 id="九大内置对象（隐含对象）"><a href="#九大内置对象（隐含对象）" class="headerlink" title="九大内置对象（隐含对象）"></a>九大内置对象（隐含对象）</h3><p> 不需要预先声明</p><ul><li><p><strong>request 请求对象</strong>　<br>类型 javax.servlet.ServletRequest 作用域 Request<br>javax.servlet.httpServletRequest类型<br>客户端的请求信息，主要用于接受通过HTTP协议传送到服务器的数据（包括头信息、系统信息、请求方式以及请求参数等）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">常用方法：</span><br><span class="line"><span class="number">1.</span> <span class="function">object <span class="title">getAttribute</span><span class="params">(String name)</span> 返回指定属性的属性值（常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2. Enumeration <span class="title">getAttributeNames</span><span class="params">()</span> 返回所有可用属性名的枚举 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">3. String <span class="title">getCharacterEncoding</span><span class="params">()</span> 返回字符编码方式（常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">4. <span class="keyword">int</span> <span class="title">getContentLength</span><span class="params">()</span> 返回请求体的长度（以字节数） </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">5. String <span class="title">getContentType</span><span class="params">()</span> 得到请求体的MIME类型 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">6. ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> 得到请求体中一行的二进制流 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">7. String <span class="title">getParameter</span><span class="params">(String name)</span> 返回name指定参数的参数值（常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">8. Enumeration <span class="title">getParameterNames</span><span class="params">()</span> 返回可用参数名的枚举 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">9. String[] <span class="title">getParameterValues</span><span class="params">(String name)</span> 返回包含参数name的所有值的数组 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">10. String <span class="title">getProtocol</span><span class="params">()</span> 返回请求用的协议类型及版本号 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">11. String <span class="title">getScheme</span><span class="params">()</span> 返回请求用的计划名,如:http.https及ftp等 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">12. String <span class="title">getServerName</span><span class="params">()</span> 返回接受请求的服务器主机名 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">13. <span class="keyword">int</span> <span class="title">getServerPort</span><span class="params">()</span> 返回服务器接受此请求所用的端口号 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">14. BufferedReader <span class="title">getReader</span><span class="params">()</span> 返回解码过了的请求体 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">15. String <span class="title">getRemoteAddr</span><span class="params">()</span> 返回发送此请求的客户端IP地址 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">16. String <span class="title">getRemoteHost</span><span class="params">()</span> 返回发送此请求的客户端主机名 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">17. <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String key,Object obj)</span> 设置属性的属性值（常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">18. String <span class="title">getRealPath</span><span class="params">(String path)</span> 返回一虚拟路径的真实路径</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure></li><li><p><strong>response 响应对象</strong><br>类型 javax.servlet.SrvletResponse 作用域 Page<br>服务器收到客户端请求后做出的响应  </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">常用方法：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="function">String <span class="title">getCharacterEncoding</span><span class="params">()</span> 返回响应用的是何种字符编码 （常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2. ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> 返回响应的一个二进制输出流 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">3. PrintWriter <span class="title">getWriter</span><span class="params">()</span> 返回可以向客户端输出字符的一个对象 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">4. <span class="keyword">void</span> <span class="title">setContentLength</span><span class="params">(<span class="keyword">int</span> len)</span> 设置响应头长度 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">5. <span class="keyword">void</span> <span class="title">setContentType</span><span class="params">(String type)</span> 设置响应的MIME类型 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">6. <span class="title">sendRedirect</span><span class="params">(java.lang.String location)</span> 重新定向客户端的请求 （常用）</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure></li><li><p><strong>pageContext 页面上下文对象</strong><br>类型 javax.servlet.jsp.PageContext 作用域 Page<br>通过它可以获取 JSP页面的out、request、reponse、session、application 等对象<br>供了对JSP页面内所有的对象及名字空间的访问</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">常用方法：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="function">JspWriter <span class="title">getOut</span><span class="params">()</span> 返回当前客户端响应被使用的JspWriter流<span class="params">(out)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2. HttpSession <span class="title">getSession</span><span class="params">()</span> 返回当前页中的HttpSession对象<span class="params">(session)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">3. Object <span class="title">getPage</span><span class="params">()</span> 返回当前页的Object对象<span class="params">(page)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">4. ServletRequest <span class="title">getRequest</span><span class="params">()</span> 返回当前页的ServletRequest对象<span class="params">(request)</span> （常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">5. ServletResponse <span class="title">getResponse</span><span class="params">()</span> 返回当前页的ServletResponse对象<span class="params">(response)</span> （常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">6. Exception <span class="title">getException</span><span class="params">()</span> 返回当前页的Exception对象<span class="params">(exception)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">7. ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> 返回当前页的ServletConfig对象<span class="params">(config)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">8. ServletContext <span class="title">getServletContext</span><span class="params">()</span> 返回当前页的ServletContext对象<span class="params">(application)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">9. <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name,Object attribute)</span> 设置属性及属性值 （常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">10. <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name,Object obj,<span class="keyword">int</span> scope)</span> 在指定范围内设置属性及属性值 （常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">11. <span class="keyword">public</span> Object <span class="title">getAttribute</span><span class="params">(String name)</span> 取属性的值 （常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">12. Object <span class="title">getAttribute</span><span class="params">(String name,<span class="keyword">int</span> scope)</span> 在指定范围内取属性的值 （常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">13. <span class="keyword">public</span> Object <span class="title">findAttribute</span><span class="params">(String name)</span> 寻找一属性,返回起属性值或NULL </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">14. <span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String name)</span> 删除某属性 （常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">15. <span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String name,<span class="keyword">int</span> scope)</span> 在指定范围删除某属性 （常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">16. <span class="keyword">int</span> <span class="title">getAttributeScope</span><span class="params">(String name)</span> 返回某属性的作用范围 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">17. Enumeration <span class="title">getAttributeNamesInScope</span><span class="params">(<span class="keyword">int</span> scope)</span> 返回指定范围内可用的属性名枚举 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">18. <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> 释放pageContext所占用的资源 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">19. <span class="keyword">void</span> <span class="title">forward</span><span class="params">(String relativeUrlPath)</span> 使当前页面重导到另一页面 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">20. <span class="keyword">void</span> <span class="title">include</span><span class="params">(String relativeUrlPath)</span> 在当前位置包含另一文件 </span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure></li><li><p><strong>session 会话对象</strong><br>类型 javax.servlet.http.HttpSession 作用域 Session<br>session对象内部使用Map类来保存数据，因此保存数据的格式为 “Key/value”</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">常用方法：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="function"><span class="keyword">long</span> <span class="title">getCreationTime</span><span class="params">()</span> 返回SESSION创建时间 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2. <span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> 返回SESSION创建时JSP引擎为它设的惟一ID号 （常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">3. <span class="keyword">long</span> <span class="title">getLastAccessedTime</span><span class="params">()</span> 返回此SESSION里客户端最近一次请求时间 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">4. <span class="keyword">int</span> <span class="title">getMaxInactiveInterval</span><span class="params">()</span> 返回两次请求间隔多长时间此SESSION被取消<span class="params">(ms)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">5. String[] <span class="title">getValueNames</span><span class="params">()</span> 返回一个包含此SESSION中所有可用属性的数组 （常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">6. <span class="keyword">void</span> <span class="title">invalidate</span><span class="params">()</span> 取消SESSION，使SESSION不可用 （常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">7. <span class="keyword">boolean</span> <span class="title">isNew</span><span class="params">()</span> 返回服务器创建的一个SESSION,客户端是否已经加入 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">8. <span class="keyword">void</span> <span class="title">removeValue</span><span class="params">(String name)</span> 删除SESSION中指定的属性 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">9. <span class="keyword">void</span> <span class="title">setMaxInactiveInterval</span><span class="params">()</span> 设置两次请求间隔多长时间此SESSION被取消<span class="params">(ms)</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure></li><li><p><strong>application 应用程序对象</strong><br>类型 javax.servlet.ServletContext 作用域 Application </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">常用方法：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="function">Object <span class="title">getAttribute</span><span class="params">(String name)</span> 返回给定名的属性值 （常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2. Enumeration <span class="title">getAttributeNames</span><span class="params">()</span> 返回所有可用属性名的枚举 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">3. <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name,Object obj)</span> 设定属性的属性值 （常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">4. <span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String name)</span> 删除一属性及其属性值 （常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">5. String <span class="title">getServerInfo</span><span class="params">()</span> 返回<span class="title">JSP</span><span class="params">(SERVLET)</span>引擎名及版本号 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">6. String <span class="title">getRealPath</span><span class="params">(String path)</span> 返回一虚拟路径的真实路径 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">7. ServletContext <span class="title">getContext</span><span class="params">(String uripath)</span> 返回指定WebApplication的application对象 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">8. <span class="keyword">int</span> <span class="title">getMajorVersion</span><span class="params">()</span> 返回服务器支持的Servlet API的最大版本号 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">9. <span class="keyword">int</span> <span class="title">getMinorVersion</span><span class="params">()</span> 返回服务器支持的Servlet API的最大版本号 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">10. String <span class="title">getMimeType</span><span class="params">(String file)</span> 返回指定文件的MIME类型 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">11. URL <span class="title">getResource</span><span class="params">(String path)</span> 返回指定资源<span class="params">(文件及目录)</span>的URL路径 （常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">12. InputStream <span class="title">getResourceAsStream</span><span class="params">(String path)</span> 返回指定资源的输入流 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">13. RequestDispatcher <span class="title">getRequestDispatcher</span><span class="params">(String uripath)</span> 返回指定资源的RequestDispatcher对象 （常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">14. Servlet <span class="title">getServlet</span><span class="params">(String name)</span> 返回指定名的Servlet （常用）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">15. Enumeration <span class="title">getServlets</span><span class="params">()</span> 返回所有Servlet的枚举 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">16. Enumeration <span class="title">getServletNames</span><span class="params">()</span> 返回所有Servlet名的枚举 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">17. <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> 把指定消息写入Servlet的日志文件 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">18. <span class="keyword">void</span> <span class="title">log</span><span class="params">(Exception exception,String msg)</span> 把指定异常的栈轨迹及错误消息写入Servlet的日志文件 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">19. <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg,Throwable throwable)</span> 把栈轨迹及给出的Throwable异常的说明信息 写入Servlet的日志文件 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">``` </span></span><br><span class="line"><span class="function">- **out 输出对象** </span></span><br><span class="line"><span class="function">类型 javax.servlet.jsp.JspWriter 作用域 Page  </span></span><br><span class="line"><span class="function">out对象是JspWriter类的实例,是向客户端输出内容常用的对象</span></span><br><span class="line"><span class="function">``` java</span></span><br><span class="line"><span class="function">常用方法：</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">1. <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> 清除缓冲区的内容 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2. <span class="keyword">void</span> <span class="title">clearBuffer</span><span class="params">()</span> 清除缓冲区的当前内容 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">3. <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> 清空流 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">4. <span class="keyword">int</span> <span class="title">getBufferSize</span><span class="params">()</span> 返回缓冲区以字节数的大小，如不设缓冲区则为0 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">5. <span class="keyword">int</span> <span class="title">getRemaining</span><span class="params">()</span> 返回缓冲区还剩余多少可用 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">6. <span class="keyword">boolean</span> <span class="title">isAutoFlush</span><span class="params">()</span> 返回缓冲区满时，是自动清空还是抛出异常 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">7. <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> 关闭输出流 </span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure></li><li><p><strong>config 配置对象</strong><br>类型 javax.servlet.ServletConfig 作用域 Page<br>当一个Servlet 初始化时，容器把某些信息通过 config对象传递给这个 Servlet。 开发者可以在web.xml 文件中为应用程序环境中的Servlet程序和JSP页面提供初始化参数。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> 常用方法：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="function">ServletContext <span class="title">getServletContext</span><span class="params">()</span> 返回含有服务器相关信息的ServletContext对象 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2. String <span class="title">getInitParameter</span><span class="params">(String name)</span> 返回初始化参数的值 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">3. Enumeration <span class="title">getInitParameterNames</span><span class="params">()</span> 返回Servlet初始化所需所有参数的枚举</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure></li><li><p><strong>page 页面对象</strong><br>类型 javax.lang.Object 作用域 Page<br>只有在JSP页面内才是合法的<br>page对象就是指向当前JSP页面本身，有点象类中的this指针，它是java.lang.Object类的实例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">常用方法：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="class"><span class="keyword">class</span> <span class="title">getClass</span> 返回此<span class="title">Object</span>的类 （常用）</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">2. <span class="title">int</span> <span class="title">hashCode</span>() 返回此<span class="title">Object</span>的<span class="title">hash</span>码 </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">3. <span class="title">boolean</span> <span class="title">equals</span>(<span class="title">Object</span> <span class="title">obj</span>) 判断此<span class="title">Object</span>是否与指定的<span class="title">Object</span>对象相等 （常用）</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">4. <span class="title">void</span> <span class="title">copy</span>(<span class="title">Object</span> <span class="title">obj</span>) 把此<span class="title">Object</span>拷贝到指定的<span class="title">Object</span>对象中 </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">5. <span class="title">Object</span> <span class="title">clone</span>() 克隆此<span class="title">Object</span>对象 </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">6. <span class="title">String</span> <span class="title">toString</span>() 把此<span class="title">Object</span>对象转换成<span class="title">String</span>类的对象 （常用）</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">7. <span class="title">void</span> <span class="title">notify</span>() 唤醒一个等待的线程 </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">8. <span class="title">void</span> <span class="title">notifyAll</span>() 唤醒所有等待的线程 </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">9. <span class="title">void</span> <span class="title">wait</span>(<span class="title">int</span> <span class="title">timeout</span>) 使一个线程处于等待直到<span class="title">timeout</span>结束或被唤醒 </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">10. <span class="title">void</span> <span class="title">wait</span>() 使一个线程处于等待直到被唤醒 </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">11. <span class="title">void</span> <span class="title">enterMonitor</span>() 对<span class="title">Object</span>加锁 </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">12. <span class="title">void</span> <span class="title">exitMonitor</span>() 对<span class="title">Object</span>开锁</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure></li><li><p><strong>exception 例外对象</strong><br>类型 javax.lang.Throwable 作用域 page<code>此对象不能在一般JSP文件中直接使用，而只能在使用了“&lt;%@ page isErrorPage=&quot;true &quot;%&gt;”的JSP文件中使用</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="function">String <span class="title">getMessage</span><span class="params">()</span> 返回描述异常的消息 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2. String <span class="title">toString</span><span class="params">()</span> 返回关于异常的简短描述消息 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">3. <span class="keyword">void</span> <span class="title">printStackTrace</span><span class="params">()</span> 显示异常及其栈轨迹 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">4. Throwable <span class="title">FillInStackTrace</span><span class="params">()</span> 重写异常的执行栈轨迹</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="四大作用域"><a href="#四大作用域" class="headerlink" title="四大作用域"></a>四大作用域</h3><ul><li><strong>pageContext</strong><br>变量无法传递</li><li><strong>request</strong><br><code>从http请求发起，到服务器处理结束，返回响应的整个过程</code>刷新页面后重新计算，除非重新提交</li><li><strong>session</strong><br>当前会话<code>从用户打开浏览器开始，到用户关闭浏览器这中间的过程</code></li><li><strong>application</strong><br>整个应用<code>从应用启动，到应用结束</code><br>application里的变量可以被所有用户共用</li></ul></li><li><h3 id="jsp页面对象的使用"><a href="#jsp页面对象的使用" class="headerlink" title="jsp页面对象的使用"></a>jsp页面对象的使用</h3><ol><li>&lt;% String myBean = (String)pageContext.getAttribute(“stringBean”,PageContext.PAGE_SCOPE);<br>%&gt;<br>&lt;%=myBean%&gt;<br>通过 pageContext（PageContext类的实例，提供对JSP页面所有对象以及命名空间的访问） 获取stringBean 的值，赋给 String 类型的变量 myBean，然后通过 Jsp 表达式 处理该值</li><li>&lt;bean:write name=“something”/&gt;</li><li>&lt;%=stringBean%&gt;<br>通过Jsp 表达式 获取变量 stringBean 的值</li></ol></li></ol><hr><h2 id="History对象"><a href="#History对象" class="headerlink" title="History对象"></a>History对象</h2><ul><li><p><strong>History 对象包含用户（在浏览器窗口中）访问过的 URL。</strong></p></li><li><p><strong>History 对象是 window 对象的一部分，可通过 window.history 属性对其进行访问</strong></p></li><li><p><strong>所有浏览器都支持该对象</strong></p></li><li><p><strong>History 对象属性</strong><br><a href="https://www.runoob.com/jsref/prop-his-length.html">length</a>返回历史列表中的网址数</p></li><li><p><strong>History 对象方法</strong><br><a href="https://www.runoob.com/jsref/met-his-back.html">back()</a>加载 history 列表中的前一个 URL<br><a href="https://www.runoob.com/jsref/met-his-forward.html">forward()</a>加载 history 列表中的下一个 URL<br><a href="https://www.runoob.com/jsref/met-his-go.html">go()</a>加载 history 列表中的某个具体页面</p></li></ul><hr><h2 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h2><ul><li>Log4j支持按分钟为间隔生成新的日志文件</li><li>Log4j是一个打印日志用的组件</li><li>Log4j支持按年为间隔生成新的日志文件</li><li>log4j在运行期间是不可以重新设置的</li><li>springboot可以动态修改日志级别</li></ul><hr><h2 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h2><ul><li>加载驱动的方法</li></ul><ol><li>Class.forName(“com.microsoft.sqlserver.jdbc.SQLServerDriver”);</li><li>DriverManager.registerDriver(new com.mysql.jdbc.Driver());</li><li>System.setProperty(“jdbc.drivers”, “com.mysql.jdbc.Driver”);</li></ol><hr><h2 id="PO-VO-DTO-BO-POJO-DAO-区别"><a href="#PO-VO-DTO-BO-POJO-DAO-区别" class="headerlink" title="PO VO  DTO BO POJO DAO 区别"></a>PO VO  DTO BO POJO DAO 区别</h2><p><a href="https://www.cnblogs.com/hunmeng/p/11298680.html">https://www.cnblogs.com/hunmeng/p/11298680.html</a></p><ol><li><h3 id="PO"><a href="#PO" class="headerlink" title="PO"></a>PO</h3></li></ol><ul><li>persistant object：持久层对象</li><li>对应数据库中的字段</li></ul><ol start="2"><li><h3 id="VO"><a href="#VO" class="headerlink" title="VO"></a>VO</h3></li></ol><ul><li>value object：值对象</li><li>通常用于业务层之间的数据传递</li></ul><ol start="3"><li><h3 id="DTO"><a href="#DTO" class="headerlink" title="DTO"></a>DTO</h3></li></ol><ul><li>data transfer object：数据传输对象</li><li>表里字段大于页面需要展示的字段，作为中间bean</li><li>能提高数据传输的速度（减少了传输字段）</li><li>能隐藏后端表结构</li></ul><ol start="4"><li><h3 id="BO"><a href="#BO" class="headerlink" title="BO"></a>BO</h3></li></ol><ul><li>business object：业务对象</li><li>把业务逻辑封装为一个对象</li><li>PO的组合</li></ul><ol start="5"><li><h3 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h3></li></ol><ul><li>plain ordinary java object：简单无规则java对象</li><li>纯的传统意义的java对象，最基本的Java Bean只有属性加上属性的get和set方法。可以转化为PO、DTO、VO</li></ul><ol start="6"><li><h3 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h3></li></ol><ul><li>data access object：数据访问对象</li><li>封装对数据的访问</li></ul><hr><h2 id="Dao层，Mapper层，controller层，service层，model层，entity层"><a href="#Dao层，Mapper层，controller层，service层，model层，entity层" class="headerlink" title="Dao层，Mapper层，controller层，service层，model层，entity层"></a>Dao层，Mapper层，controller层，service层，model层，entity层</h2><ul><li><h3 id="数据持久化操作"><a href="#数据持久化操作" class="headerlink" title="数据持久化操作"></a>数据持久化操作</h3>  把数据放到持久化的介质中，同时提供增删改查操作</li><li><h3 id="model"><a href="#model" class="headerlink" title="model"></a>model</h3>  model层=entity层。存放我们的实体类，与数据库中的属性值基本保持一致。</li><li><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3>  存放业务逻辑处理，也是一些关于数据库处理的操作，但不是直接和数据库打交道，他有接口还有接口的实现方法,在接口的实现方法中需要导入mapper层，mapper层是直接跟数据库打交道的，他也是个接口，只有方法名字，具体实现在mapper.xml文件里，service是供我们使用的方法</li><li><h3 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h3>  mapper层=dao层，现在用mybatis逆向工程生成的mapper层，其实就是dao层。对数据库进行数据持久化操作，他的方法语句是直接针对数据库操作的</li><li><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3>  控制器，导入service层，controller通过接收前端传过来的参数进行业务操作，在返回一个指定的路径或者数据表</li></ul><hr><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><ul><li><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h3><p>  用于请求url映射。</p></li><li><h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody**"></a>@RequestBody**</h3><p>  注解实现接收http请求的json数据，将json转换为java对象。</p><pre><code>  [详细查看](https://blog.csdn.net/justry_deng/article/details/80972817)</code></pre><ol><li>GET方式无请求体，所以使用@RequestBody接收数据时，前端不能使用GET方式提交数据，而是用POST方式进行提交</li><li>@RequestBody与@RequestParam()可以同时使用<br> 一个请求，只有一个RequestBody；一个请求，可以有多个RequestParam<br> RequestBody 接收的是请求体里面的数据；而RequestParam接收的是key-value里面的参数<br> 如果参数时放在请求体中，传入后台的话，那么后台要用@RequestBody才能接收到；如果不是放在请求体中的话，那么后台接收前台传过来的参数时，要用@RequestParam来接收</li><li>请求体格式    <img src="https://i.loli.net/2020/10/15/PWMIDtSGjwaLpRi.png" alt="2018081416513428.png"></li></ol></li><li><h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><p>  <a href="https://blog.csdn.net/originations/article/details/89492884">详细查看</a></p><ul><li>作用在方法上</li><li>将java对象转为json格式的数据</li><li>将controller的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到response对象的body区，通常用来返回JSON数据或者是XML数据</li><li>在使用此注解之后不会再走视图处理器，而是直接将数据写入到输入流中</li><li>返回结果直接写入 HTTP response body<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">后台 Controller类中对应的方法：</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/login.do&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">login</span><span class="params">(String name, String password, HttpSession session)</span> </span>&#123;</span><br><span class="line">user = userService.checkLogin(name, password);</span><br><span class="line">session.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JsonResult(user);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@RequestBody</span>是作用在形参列表上，用于将前台发送过来固定格式的数据【xml格式 或者 json等】封装为对应的 JavaBean 对象，</span><br><span class="line">封装时使用到的一个对象是系统默认配置的 HttpMessageConverter进行解析，然后封装到形参上。</span><br><span class="line">如上面的登录后台代码可以改为：</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/login.do&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">login</span><span class="params">(<span class="meta">@RequestBody</span> User loginUuser, HttpSession session)</span> </span>&#123;</span><br><span class="line">user = userService.checkLogin(loginUser);</span><br><span class="line">session.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JsonResult(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h3><ol><li>test(String name)<br> 没有name 参数不会报错</li><li>test(@RequestParam String name)<br> 没有name 参数会报错，（也可以设置required = false)</li><li>test(@RequestParam(“userName”) String name)<br> name 参数换为userName</li></ol></li><li><h3 id="SuppressWarnings-“unused”"><a href="#SuppressWarnings-“unused”" class="headerlink" title="@SuppressWarnings(“unused”)"></a>@SuppressWarnings(“unused”)</h3><p>  表示该属性在方法或类中没有使用。添加此注解可以去除属性上的黄色警告</p></li></ul><hr><h2 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h2><p>解决<strong>post</strong>请求乱码：我们可以在<strong>web.xml</strong>里边配置一个<strong>CharacterEncodingFilter</strong> 过滤器。设置为<strong>utf-8</strong>。</p><p>解决<strong>get</strong>请求乱码有两种方法个：</p><p>1）修改tomcat配置文件添加编码和工程编码一致；</p><ol start="2"><li><p>另一种方法对参数进行重新编码；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String username = <span class="keyword">new</span> String(Request.getParameter(<span class="string">&quot;userName&quot;</span>).getBytes(<span class="string">&quot;ISO8859-1&quot;</span>),<span class="string">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="springmvc优点"><a href="#springmvc优点" class="headerlink" title="springmvc优点"></a>springmvc优点</h2></li><li><p>可以支持各种视图技术,而不仅仅局限于JSP</p></li><li><p>与Spring框架集成（如IoC容器、AOP等）</p></li><li><p>清晰的角色分配:前端控制器(dispatcherServlet) , 请求到处理器映射（handlerMapping), 处理器适配器（HandlerAdapter), 视图解析器（ViewResolver）</p></li></ol><hr><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><ol><li><h3 id="修改mapper方法返回属性"><a href="#修改mapper方法返回属性" class="headerlink" title="修改mapper方法返回属性"></a>修改mapper方法返回属性</h3> xml中基本类型返回属性的属性名注意<code>resultMap</code>和<code>resultType</code></li><li><h3 id="insertSelective（）"><a href="#insertSelective（）" class="headerlink" title="insertSelective（）"></a>insertSelective（）</h3><ul><li>选择性保存数据</li><li>主键是自动添加的，默认插入为空</li><li>插入成功则返回1，失败返回0</li></ul></li><li><h3 id="updateByPrimaryKeySelective"><a href="#updateByPrimaryKeySelective" class="headerlink" title="updateByPrimaryKeySelective()"></a>updateByPrimaryKeySelective()</h3><ul><li>成功更新几条返回则返回相应的条数</li><li>选择性更新数据</li></ul></li></ol><hr><h2 id="RequestParam和-PathVariable"><a href="#RequestParam和-PathVariable" class="headerlink" title="@RequestParam和@PathVariable"></a>@RequestParam和@PathVariable</h2><ul><li><strong>@RequestParam</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在url中输入:localhost:8080/**/?userName=zhangsan</span></span><br><span class="line"><span class="comment">//请求中包含username参数（如/requestparam1?userName=zhang），则自动传入。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryUserName</span><span class="params">(<span class="meta">@RequestParam</span> String userName)</span></span></span><br></pre></td></tr></table></figure>在传递参数的时候如果是url?userName=zhangsan&amp;userName=wangwu时，即两个同名参数，前台传递了两个一样的参数，可用如下方式:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">requestparam8</span><span class="params">(<span class="meta">@RequestParam(value=&quot;userName&quot;)</span> String []  userNames)</span></span></span><br><span class="line"><span class="function"><span class="comment">//或者是</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">requestparam8</span><span class="params">(<span class="meta">@RequestParam(value=&quot;list&quot;)</span> List&lt;String&gt; list)</span>  </span></span><br></pre></td></tr></table></figure>前端传参的URL： url = “<code>$&#123;ctx&#125;/main/mm/am/edit?Id=$&#123;Id&#125;&amp;name=$&#123;name&#125;</code>” 后端使用集合来接受参数，灵活性较好<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/edit&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">edit</span><span class="params">(Model model, <span class="meta">@RequestParam</span> Map&lt;String, Object&gt; paramMap )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> id = Long.parseLong(paramMap.get(<span class="string">&quot;id&quot;</span>).toString());</span><br><span class="line">        String name = paramMap.get(<span class="string">&quot;name&quot;</span>).toString;</span><br><span class="line">        <span class="keyword">return</span> page(<span class="string">&quot;edit&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>@RequestParam绑定基本数据类型，若required属性为false（默认为true），且设置了defaultValue属性，没有问题；</li></ul><p>@RequestParam绑定基本数据类型，若required属性为false（默认为true），且没有设置defaultValue属性，则当没有传该参数时，会报500（因为无法将null赋值给基本数据类型）</p><ul><li><strong>@PathVariable</strong><br>使用@PathVariable接收参数，参数值需要在url进行占位， 前端传参的URL：url = “<code>$&#123;ctx&#125;/main/mm/am/edit/$&#123;Id&#125;/$&#123;name&#125;</code>”<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/edit/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">edit</span><span class="params">(Model model, <span class="meta">@PathVariable</span> <span class="keyword">long</span> id,<span class="meta">@PathVariable</span> String name)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> page(<span class="string">&quot;edit&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="spring和springboot和springmvc"><a href="#spring和springboot和springmvc" class="headerlink" title="spring和springboot和springmvc"></a>spring和springboot和springmvc</h2></li></ul><p><strong>SpringFrame</strong><br>SpringFramework 最重要的特征是依赖注入。所有 SpringModules（多模块） 不是依赖注入就是 IOC 控制反转。</p><p>当我们恰当的使用 DI 或者是 IOC 的时候，我们可以开发松耦合应用。松耦合应用的单元测试可以很容易的进行。</p><p><strong>SpringMVC</strong><br>Spring MVC 提供了一种分离式的方法来开发 Web 应用。通过运用像 DispatcherServelet，MoudlAndView 和 ViewResolver 等一些简单的概念，开发 Web 应用将会变的非常简单。</p><p><strong>SpringBoot</strong><br>Spring 和 SpringMVC 的问题在于需要配置大量的参数。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt; </span><br><span class="line">&lt;property name=<span class="string">&quot;prefix&quot;</span>&gt; </span><br><span class="line">&lt;value&gt;/WEB-INF/views/&lt;/value&gt; </span><br><span class="line">&lt;/property&gt; </span><br><span class="line">&lt;property name=<span class="string">&quot;suffix&quot;</span>&gt; </span><br><span class="line">&lt;value&gt;.jsp&lt;/value&gt; </span><br><span class="line">&lt;/property&gt; </span><br><span class="line">&lt;/bean&gt; </span><br><span class="line">&lt;mvc:resources mapping=<span class="string">&quot;/webjars/**&quot;</span> location=<span class="string">&quot;/webjars/&quot;</span>/&gt;  </span><br></pre></td></tr></table></figure><p>Spring Boot 通过一个自动配置和启动的项来目解决这个问题。为了更快的构建产品就绪应用程序，Spring Boot 提供了一些非功能性特征。</p><hr><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p><strong>HttpSessionAttributeListener</strong>：可以实现此侦听器接口获取此web应用程序中会话属性列表更改的通知；<br><strong>HttpSessionBindingListener</strong>：当该对象从一个会话中被绑定或者解绑时通知该对象，这个对象由HttpSessionBindingEvent对象通知。这可能是servlet程序显式地从会话中解绑定属性的结果，可能是由于会话无效，也可能是由于会话超时；<br><strong>HttpSessionObjectListener</strong>：没有该接口API；<br><strong>HttpSessionListener</strong>：当web应用程序中的活动会话列表发生更改时通知该接口的实现类，为了接收该通知事件，必须在web应用程序的部署描述符中配置实现类；<br><strong>HttpSessionActivationListener</strong>：绑定到会话的对象可以侦听容器事件，通知它们会话将被钝化，会话将被激活。需要一个在虚拟机之间迁移会话或持久会话的容器来通知所有绑定到实现该接口会话的属性。</p><hr>]]></content>
      
      
      <categories>
          
          <category> question </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
            <tag> java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题_os</title>
      <link href="2020/09/30/mian-shi-ti-os/"/>
      <url>2020/09/30/mian-shi-ti-os/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="os指令"><a href="#os指令" class="headerlink" title="os指令"></a>os指令</h2><p>将a下所有目录和文件复制到b</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> –<span class="built_in">r</span> a b</span><br></pre></td></tr></table></figure><hr><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><ol><li>系统调用把应用程序的请求传输给系统内核执行 </li><li>系统调用中被调用的过程运行在”核心态”中</li><li>利用系统调用能够得到操作系统提供的多种服务</li><li>系统调用是操作系统提供给编程人员的接口</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> question </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面试 </tag>
            
            <tag> os </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题_thread</title>
      <link href="2020/09/30/mian-shi-ti-thread/"/>
      <url>2020/09/30/mian-shi-ti-thread/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><hr><h2 id="内存回收线程GC"><a href="#内存回收线程GC" class="headerlink" title="内存回收线程GC"></a>内存回收线程GC</h2><ol><li>内存回收线程负责释放无用内存</li><li>java的内存回收是自动的，Gc在后台运行，不需要用户手动操作</li><li>内存回收线程可以释放无用的对象内存</li><li><strong>开发人员不能人工参与，虽然可以调用System.gc()，但是这个方法只是一个提醒，具体什么时候GC，还是不知道</strong></li><li>Java垃圾回收器负责回收无用对象占据的内存资源,但对象没有使用new获取了一块特殊区域，这块特殊区域的回收使用<strong>finallize（）</strong></li></ol><hr><h2 id="run-和start"><a href="#run-和start" class="headerlink" title="run()和start()"></a>run()和start()</h2><p>run直接执行代码，按顺序打印代码；</p><p>start是另起线程，与当前线程同时竞争cpu资源，结果存在不确定性</p><hr><h2 id="线程和进程"><a href="#线程和进程" class="headerlink" title="线程和进程"></a>线程和进程</h2><p><a href="https://www.cnblogs.com/guoyu1/p/12161414.html">详细查看</a></p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><ul><li>进程中的一个实例，系统调度和分配的单位</li><li>能完成进程中的一个功能</li><li>所有操作系统的执行功能都是通过创建线程去完成的</li><li>线程在执行时是<strong>同步和互斥</strong>的</li><li>能起多少线程是<strong>受内存限制</strong>的（<strong>不能创造无限数量的线程</strong>）</li><li>线程拥有自己的私有<strong>内存</strong></li></ul><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ul><li>运行中的程序</li><li>操作系统中独立运行，资源分配的基本单位。</li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>一个进程可以包含多个线程，至少有一个线程，一个线程只存在一个进程中</li><li>同一个进程下的所有线程能够<strong>共享</strong>该进程下的资源（系统运行时会为每个进程分配不同的内存区域，但不会为线程分配内存）</li><li>进程结束后，该进程下的所有线程将销毁，而一个线程的结束不会影响同一进程下的其他线程</li></ul><hr><h2 id="线程的五种状态"><a href="#线程的五种状态" class="headerlink" title="线程的五种状态"></a>线程的五种状态</h2><p><a href="https://blog.csdn.net/xingjing1226/article/details/81977129">详细查看</a></p><ol><li>新建new：创建<br> 实现Runnable接口并且继承Thread得到一个线程类<br> new实例</li><li>可运行runnable：调用run或start运行在线程池中，等待被线程调度选中</li><li>运行running：runnable的线程获得cpu时间片timeslice，执行程序代码</li><li>阻塞blocked：某种原因放弃cpu使用权，暂时停止运行<ol><li>等待阻塞：running的线程执行wait，进入等待序列</li><li>同步阻塞：running的线程获取对象的同步锁，该同步锁被别的线程占用，线程进入锁池lock pool</li><li>其他阻塞：running的线程执行是，sleep或join，或发出o/i请求</li></ol></li><li>死亡dead：run或main结束或异常退出run，死亡的线程不可复生<br><img src="https://i.loli.net/2020/10/26/kpnFm8aSUv7busd.jpg" alt="7e76cc17-0ad5-3ff3-954e-1f83463519d1.jpg"></li></ol><hr><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol><li>Thread.sleep(long millis)，当前线程进入<strong>阻塞</strong>，但不释放对象锁，millis后线程自动苏醒进入可运行状态。<br> 作用：给其它线程执行机会的最佳方式。</li><li>Thread.yield()，当前线程放弃获取的cpu时间片，由运行状态变会可运行状态，让OS再次选择线程。<br> 作用：让相同优先级的线程轮流执行，但并不保证一定会轮流执行。实际中无法保证yield()达到<strong>让步</strong>目的，因为让步的线程还有可能被线程调度程序再次选中。Thread.yield()不会导致阻塞。</li><li>t.join()/t.join(long millis)，当前线程里调用其它线程1的join方法，当前线程阻塞，但不释放对象锁，直到线程1执行完毕或者millis时间到，当前线程进入可运行状态。</li><li>obj.wait()，当前线程调用对象的wait()方法，当前线程释放对象锁，进入等待队列。依靠notify()/notifyAll()唤醒或者wait(long timeout)timeout时间到自动唤醒。</li><li>obj.notify()唤醒在此对象监视器上等待的单个线程，选择是任意性的。</li><li>notifyAll()唤醒在此对象监视器上等待的所有线程。</li></ol><hr><h2 id="线程共享和线程私有"><a href="#线程共享和线程私有" class="headerlink" title="线程共享和线程私有"></a>线程共享和线程私有</h2><ul><li>私有<br>  java虚拟机栈<br>  程序计数器<br>  本地方法栈 </li><li>共享<br>  java堆<br>  方法区</li></ul>]]></content>
      
      
      <categories>
          
          <category> question </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面试 </tag>
            
            <tag> thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口</title>
      <link href="2020/09/29/jie-kou/"/>
      <url>2020/09/29/jie-kou/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a><br>感谢 ：<a href="https://blog.csdn.net/weixin_33717298/article/details/92511869">https://blog.csdn.net/weixin_33717298/article/details/92511869</a></p><hr><p>（1）接口用于描述系统对外提供的所有服务,因此接口中的<strong>成员常量和方法都必须是公开(public)类型</strong>的,确保外部使用者能访问它们；</p><p>（2）接口仅仅描述系统能做什么,但不指明如何去做,所以接口中的方法<strong>都是抽象(abstract)方法</strong>；</p><p>（3）接口不涉及和任何具体实例相关的细节,因此接口<strong>没有构造方法,不能被实例化,没有实例变量，只有静态（static）变量</strong>；</p><p>（4）接口的中的变量是所有实现类共有的，既然共有，肯定是不变的东西，因为变化的东西也不能够算共有。所以<strong>变量是不可变(final)类型</strong>，也就是常量了。</p><hr><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>接口的方法默认是public abstract；</p><p>接口中不可以定义变量即只能定义常量(加上final修饰就会变成常量)。所以接口的属性默认是public static final 常量，且必须赋初值。</p><p>注意：final和abstract不能同时出现。</p><hr><h2 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h2><ol><li>抽象类可以有构造方法，接口中不能有构造方法。  </li><li>抽象类中可以有普通成员变量，接口中没有普通成员变量</li><li>抽象类中可以包含非抽象的普通方法，接口中的所有方法必须都是抽象的，不能有非抽象的普通方法。</li><li>抽象类中的抽象方法的访问类型可以是public，protected和（默认类型,虽然<br>eclipse下不报错，但应该也不行），但接口中的抽象方法只能是public类型的，并且默认即为public abstract类型。  </li><li>抽象类中可以包含静态方法，接口中不能包含静态方法  </li><li>抽象类和接口中都可以包含静态成员变量，抽象类中的静态成员变量的访问类型可以任意，但接口中定义的变量只能是public static final类型，并且默认即为public static final类型。  </li><li>一个类可以实现多个接口，但只能继承一个抽象类。</li></ol>]]></content>
      
      
      <categories>
          
          <category> question </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插入排序</title>
      <link href="2020/09/29/cha-ru-pai-xu/"/>
      <url>2020/09/29/cha-ru-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a><br>感谢 ：<a href="https://www.jianshu.com/p/63c20e87f88a">https://www.jianshu.com/p/63c20e87f88a</a></p><hr><p>传送门<br><a href="https://www.lileiblog.top/2020/09/29/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/">插入排序</a><br><a href="https://www.lileiblog.top/2020/09/29/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/">选择排序</a><br><a href="https://www.lileiblog.top/2020/09/29/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/">快速排序</a><br><a href="https://www.lileiblog.top/2020/09/29/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/">冒泡排序</a></p><hr><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>基本思想是在一个<code>有序的序列</code>中找到待排序元素的位置，比如将<code>3</code>插入<code>-1，2，4，6</code>这个有序序列中，先与6和4比较，直到和2比较之后，找到适合插入的位置(2之后)。</p><ul><li>step1 第一个元素默认有序。</li><li>step2 取待排序的元素B，在有序序列上从后往前寻找。</li><li>step3 如果已排序元素A大于待排序的元素B，则将A往后移动一位。</li><li>step4 重复step3，直到找到元素A&lt;=B(待排序)时或者有序序列全部被扫描。将待排序元素A插入。</li><li>重复step2—step4</li></ul><hr><p><img src="/2020/09/29/cha-ru-pai-xu/9916080-07b27d3525f3c32c.gif?v=1&type=image" alt="输入图片描述"></p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 插入排序</span></span><br><span class="line"><span class="comment">  * @param arr</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span>(<span class="params"><span class="keyword">int</span>[] arr</span>)</span> &#123;</span><br><span class="line">     <span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>) </span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     <span class="keyword">int</span> curEle, preIndex; <span class="comment">// 记录当前待排序元素和前一个元素的下标</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">         preIndex = i - <span class="number">1</span>;</span><br><span class="line">         curEle = arr[i];</span><br><span class="line">         <span class="keyword">while</span>(preIndex &gt;=<span class="number">0</span> &amp;&amp; arr[preIndex] &gt; curEle)&#123;</span><br><span class="line">             arr[preIndex + <span class="number">1</span>] = arr[preIndex]; <span class="comment">// 移动元素</span></span><br><span class="line">             preIndex--;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 将待排序元素插入新的位置</span></span><br><span class="line">         arr[preIndex + <span class="number">1</span>] = curEle;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h4><p>时间复杂度：<img src="https://math.jianshu.com/math?formula=O(n%5E2)" alt="O(n^2)"><br>空间复杂度：<img src="https://math.jianshu.com/math?formula=O(1)" alt="O(1)"><br>稳定性：稳定</p>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择排序</title>
      <link href="2020/09/29/xuan-ze-pai-xu/"/>
      <url>2020/09/29/xuan-ze-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a><br>感谢 ：<a href="https://www.jianshu.com/p/51100da14cc2">https://www.jianshu.com/p/51100da14cc2</a></p><hr><p>传送门<br><a href="https://www.lileiblog.top/2020/09/29/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/">插入排序</a><br><a href="https://www.lileiblog.top/2020/09/29/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/">选择排序</a><br><a href="https://www.lileiblog.top/2020/09/29/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/">快速排序</a><br><a href="https://www.lileiblog.top/2020/09/29/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/">冒泡排序</a></p><hr><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>每一次遍历待排序的序列，记录最小（大）值的下标，和待排序第一个元素进行比较，如果小（大）与待排序第一个元素，交换</p><hr><p><img src="https://i.loli.net/2020/10/07/E7hVPN1i2uB6FQL.gif" alt="9916080-105a90fe3d1e56d6.gif"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: fanjiajia</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/3/1 下午9:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:选择排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        selectSort(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; arr.length; i++)&#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选择排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>,k =<span class="number">0</span>; i &lt; arr.length; i++, k = i)&#123;</span><br><span class="line">            <span class="comment">// 这一层查找后面最小值的下标</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt;arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[k] &gt; arr[j]) &#123;  <span class="comment">// 这个改为小与符合即为从大到小</span></span><br><span class="line">                    k = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 交换值</span></span><br><span class="line">            <span class="keyword">if</span>( i != k) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                arr[i] = arr[k];</span><br><span class="line">                arr[k] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li>时间复杂度：<img src="https://math.jianshu.com/math?formula=O(N%5E2)" alt="O(N^2)"></li><li>空间复杂度:  <img src="https://math.jianshu.com/math?formula=O(1)" alt="O(1)"></li><li>稳定性： 不稳定</li></ul>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="2020/09/29/kuai-su-pai-xu/"/>
      <url>2020/09/29/kuai-su-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a><br>感谢 ：<a href="https://www.jianshu.com/p/c1a05c50a75c">https://www.jianshu.com/p/c1a05c50a75c</a></p><hr><p>传送门<br><a href="https://www.lileiblog.top/2020/09/29/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/">插入排序</a><br><a href="https://www.lileiblog.top/2020/09/29/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/">选择排序</a><br><a href="https://www.lileiblog.top/2020/09/29/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/">快速排序</a><br><a href="https://www.lileiblog.top/2020/09/29/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/">冒泡排序</a></p><hr><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序每一趟排序，都会寻找一个基准元素，有的采用第一个元素，有的会随机生成一个，但是基本思想是不变的，一趟排序结束，会形成以基准元素为分界点的两部分，其中左边比基准元素小（假设从小到大排序），右边比基准元素大。然后再以相同的方法处理左边和右边两部分，即递归。</p><hr><p><img src="/2020/09/29/kuai-su-pai-xu/9916080-1669e9bcc4f5bb45.gif?v=1&type=image" alt="输入图片描述"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.jiajia.ArrayUtil.ArrayUtil;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: QucikSortMain</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: fanjiajia</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/3/6 下午9:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 快速排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QucikSortMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">2</span>,<span class="number">35</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        ArrayUtil.print(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) &#123;    <span class="comment">// 必须加</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> temp = arr[left]; <span class="comment">// 以左边的元素为基准元素</span></span><br><span class="line">        <span class="keyword">int</span> i = left, j = right; <span class="comment">// i,j为两个游标</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= temp)&#123; <span class="comment">// 右边先走</span></span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= temp) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                swap(arr, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[left] = arr[i]; <span class="comment">// 注意，这一步必须要，填上最左边的坑</span></span><br><span class="line">        arr[i] = temp; <span class="comment">// 基准元素就位</span></span><br><span class="line">        quickSort(arr, left, i - <span class="number">1</span>);    <span class="comment">// 递归操作左边部分</span></span><br><span class="line">        quickSort(arr, i + <span class="number">1</span>, right);   <span class="comment">// 递归操作右边部分</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换两个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="2020/09/29/mou-pao-pai-xu/"/>
      <url>2020/09/29/mou-pao-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a><br>感谢 ：<a href="https://www.jianshu.com/p/1458abf81adf">https://www.jianshu.com/p/1458abf81adf</a></p><hr><p>传送门<br><a href="https://www.lileiblog.top/2020/09/29/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/">插入排序</a><br><a href="https://www.lileiblog.top/2020/09/29/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/">选择排序</a><br><a href="https://www.lileiblog.top/2020/09/29/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/">快速排序</a><br><a href="https://www.lileiblog.top/2020/09/29/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/">冒泡排序</a></p><hr><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>类似于水中冒泡，较大的数沉下去，较小的数慢慢冒起来，假设从小到大，即为较大的数慢慢往后排，较小的数慢慢往前排</p><hr><ul><li>比较相邻的元素，如果前一个比后一个大，交换之。</li><li>第一趟排序第1个和第2个一对，比较与交换，随后第2个和第3个一对比较交换，这样直到倒数第2个和最后1个，将最大的数移动到最后一位。</li><li>第二趟将第二大的数移动至倒数第二位<br><img src="/2020/09/29/mou-pao-pai-xu/9916080-f0605d250bd43468.gif?v=1&type=image" alt="输入图片描述"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: BubbleSortMain</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Numen_fan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/3/4 下午9:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 冒泡排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jiajia.ArrayUtil.*;  <span class="comment">// 按包名导入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSortMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        bubbleSort(arr);</span><br><span class="line"></span><br><span class="line">        ArrayUtil.print(arr);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冒泡排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr==<span class="keyword">null</span> || arr.length &lt; <span class="number">2</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i -<span class="number">1</span>; j++) &#123;   <span class="comment">// 这里说明为什么需要-1</span></span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h4></li></ul><blockquote><p>时间复杂度:  <img src="https://math.jianshu.com/math?formula=O(N%5E2)" alt="O(N^2)"><br>空间复杂度:  <img src="https://math.jianshu.com/math?formula=O(1)" alt="O(1)"><br>稳定性：稳定</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分法查找</title>
      <link href="2020/09/29/er-fen-fa-cha-zhao-suan-fa/"/>
      <url>2020/09/29/er-fen-fa-cha-zhao-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a><br>感谢 ：<a href="https://www.cnblogs.com/kyoner/p/11080078.html">https://www.cnblogs.com/kyoner/p/11080078.html</a></p><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>寻找一个数、寻找左侧边界、寻找右侧边界</p><hr><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> binarySearch(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> target) &#123;</span><br><span class="line"><span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">0</span>, <span class="built_in">right</span> = ...;</span><br><span class="line"><span class="keyword">while</span>(...) &#123;</span><br><span class="line"><span class="built_in">int</span> <span class="built_in">mid</span> = (<span class="built_in">right</span> + <span class="built_in">left</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (nums[<span class="built_in">mid</span>] == target) &#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">else</span>  <span class="keyword">if</span> (nums[<span class="built_in">mid</span>] &lt; target) &#123;</span><br><span class="line"><span class="built_in">left</span> = ...</span><br><span class="line">&#125; <span class="keyword">else</span>  <span class="keyword">if</span> (nums[<span class="built_in">mid</span>] &gt; target) &#123;</span><br><span class="line"><span class="built_in">right</span> = ...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件体系结构—B/S和C/S架构</title>
      <link href="2020/09/29/ruan-jian-ti-xi-jie-gou-bs-he-cs-jia-gou/"/>
      <url>2020/09/29/ruan-jian-ti-xi-jie-gou-bs-he-cs-jia-gou/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a><br>感谢 ：<a href="https://blog.csdn.net/cdye_1234/article/details/79556047">https://blog.csdn.net/cdye_1234/article/details/79556047</a></p><hr><h2 id="C-S结构"><a href="#C-S结构" class="headerlink" title="C/S结构"></a>C/S结构</h2><p>C/S架构是客户端/服务器端交互模式，是Client/Server的简称<br>用户的电脑上安装客户端程序<br><img src="https://i.loli.net/2020/10/07/jpHFkoVE4ItfUGz.png" alt="20180314161512925.png"></p><hr><h2 id="B-S结构"><a href="#B-S结构" class="headerlink" title="B/S结构"></a>B/S结构</h2><p>B/S架构是浏览器/服务器交互模式，是Browser/Server的简称<br>不需要在用户的电脑上安装任何客户端程序，只需要在用户的电脑上安装浏览器即可<br>使用浏览器通过web服务器和数据库做交互，交互的结果将会以网页的形式显示在浏览器端<br><img src="https://i.loli.net/2020/10/07/51TimfXkwnjZQIx.png" alt="20180314161843185.png"></p><hr><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>C/S的优点与缺点：<br>优点：安全性比较好<br>缺点：软件更新时需要同时更新客户端和服务器，较麻烦</p><p>B/S的优点与缺点<br>优点：安全性较差<br>缺点：不需要维护客户端，主需要关注服务器即可</p><hr><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ol><li>B/S属于C/S，浏览器只是特殊的客户端 C/S可以使用任何通信协议</li><li>而B/S这个特殊的C/S架构规定必须实现HTTP协议</li><li>C/S架构的劣势还有高昂的维护成本且投资大</li></ol>]]></content>
      
      
      <categories>
          
          <category> question </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件开发 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题</title>
      <link href="2020/09/29/mian-shi-ti/"/>
      <url>2020/09/29/mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a></p><hr><h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><p>java编译器会将java程序转换为字节码</p><hr><ol><li><p><strong>静态static方法可以用类名直接调用</strong><br> public方法必须实例化类<br> protected方法同public 外部class protected变为private<br> 抽象abstract方法必须被子类继承并重写，然后调用的方式同public</p></li><li><p> 插入排序：最佳O（N）<br> 快速排序：最佳O（NlogN）<br> 堆 排序：最佳O（NlogN）<br> 归并排序：最佳O（NlogN<img src="https://i.loli.net/2020/10/27/P5R1kLm2TcMwSHU.png" alt="5227440_1564208997208_C0C78CE31C2575E39A0EE7AE31E20FB8.png"></p></li><li><p>java不允许单独的方法，过程或函数存在,需要隶属于某一类中</p></li><li><p>java编译成的是字节码，再被各系统的jvm翻译成本系统可以识别的机器码，这就是java一次编程多平台应用的跨平台性</p></li><li><p>java源文件生成的是class文件，与系统无关<br>.java文件是源文件，通过javac命令编译后生成.class文件<br>.class文件是字zhi码结文件，即.java文件编译后的代码。</p></li></ol><p>件编译后的代码。</p><ol start="6"><li><p>java程序在运行时字节码才会被jvm翻译成机器码，所以说java是解释性语言</p></li><li><p>jvm有版本区分</p></li><li><p><strong>面向对象</strong></p><ul><li>三大特征<br>封装、继承、多态</li><li>四大特征<br>抽象、封装、继承、多态</li><li>五大基本原则<br>单一职责原则（SRP）<br><code>一个类，最好只做一件事，只有一个引起它的变化。单一职责原则可以看做是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。</code><br>开放封闭原则（OCP）<br><code>软件实体应该是可扩展的，而不可修改的。也就是，对扩展开放，对修改封闭的。</code><br>里氏替换原则（LSP）<br><code>子类必须能够替换其基类。这一思想体现为对继承机制的约束规范，只有子类能够替换基类时，才能保证系统在运行期内识别子类，这是保证继承复用的基础。</code><br>依赖倒置原则（DIP）<br><code>依赖于抽象。具体而言就是高层模块不依赖于底层模块，二者都同依赖于抽象；抽象不依赖于具体，具体依赖于抽象。</code><br>接口隔离原则（ISP）<br><code>使用多个小的专门的接口，而不要使用一个大的总接口</code></li></ul></li><li><p>java的基本编程单元是类，基本存储单元是变量</p></li><li><p><strong>构造方法</strong></p><ul><li>构造方法必须和类名相同</li><li>普通方法也可以和类名相同 但是必须有返回值 </li><li>一个类可以有多个构造方法</li><li>构造方法在对象创建时就被调用，用于初始化，初始化的动作只执行一次</li><li>可以在创建对象时为成员变量赋值</li><li>可以进行重载，但是参数列表必须不相同，不以返回值和访问级别进行区分</li></ul></li><li><p>*<em>流媒体</em><br>可以使音频，视频和其他多媒体信息在  Internet  及  Intranet  上以实时的，无需下载等待的方式进行播放的技术</p></li><li><p><strong>访问控制符</strong></p><ul><li>public</li><li>private</li><li>default<br>不能修饰变量</li><li>protected</li><li>访问权限<br>public&gt;protected&gt;默认(包访问权限)&gt;private<br>因为protected除了可以被同一包访问，还可以被包外的子类所访问</li></ul></li><li><p><strong>数组</strong></p><ul><li>数组是一个对象</li><li>数组不是原生类</li><li>数组大小不变</li><li>java中，数组存储在堆中连续内存空间里</li><li>“[]” 是数组运算符的意思，在声明一个数组时，数组运算符可以放在数据类型与变量之间，也可以放在变量之后。</li><li>Arrays.equals(array1, array2)：</li></ul></li><li><p>一个java文件里可以有多个class,但是只能有一个public class外部类，并且类名必须和.java文件名相同</p></li><li><p><strong>Java  提供的事件处理模型是一种人机交互模型</strong><br>面向对象的语言里没有“过程”<br>面向过程的语言里没有“对象”<br>三个基本要素：</p><ul><li>事件源</li><li>事件对象</li><li>事件监听器</li></ul></li><li><p>stream结尾都是字节流，reader和writer结尾都是字符流</p></li><li><p>Java跨平台是因为有JVM的存在，Java的三个版本的运行需要各自不同的环境。</p></li><li><p>先执行所有的静态代码块，再执行主方法</p></li></ol><hr><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ol><li><p>子类只能继承父类的非私有成员</p></li><li><p>多态是同一个行为具有多个不同表现形式或形态的能力。<br> 多态就是同一个接口，使用不同的实例而执行不同操作</p><ul><li><p>消除类型之间的耦合关系</p></li><li><p>可替换性</p></li><li><p>可扩充性</p></li><li><p>接口性</p></li><li><p>灵活性</p></li><li><p>简化</p><p><strong>存在条件</strong></p></li><li><p>继承</p></li><li><p>重写</p></li><li><p>父类引用指向子类对象</p><p>虚函数的存在是为了多态<br>Java 中其实没有虚函数的概念<br>想调用父类中被重写的方法，则必须使用关键字 <strong>super</strong></p><p>在子类构造方法中使用super()显示调用父类的构造方法，super()必须写在子类构造方法的第一行，否则编译不通过，会造成初始化两次</p><p>this用于调用重载的构造器，super用于调用父类被子类重写的方法</p></li></ul><p> <strong>多态的实现方式</strong></p><ol><li>重写</li><li>接口implement</li><li>抽象类 抽象方法</li></ol></li><li><h4 id="方法重载可以修改参数个数，参数类型，参数顺序"><a href="#方法重载可以修改参数个数，参数类型，参数顺序" class="headerlink" title="方法重载可以修改参数个数，参数类型，参数顺序"></a>方法重载可以修改参数个数，参数类型，参数顺序</h4></li></ol><hr><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>abstract class<br>extends</p><ul><li>抽象类可以包括抽象方法和非抽象方法</li><li><strong>声明抽象方法</strong><br> 如果类里面有抽象方法的话，那么类一定要声明为抽象的！<br> 任何子类必须重写父类的抽象方法，或者声明自身为抽象类</li><li>不能实例化对象</li><li>成员变量、成员方法和构造方法的访问方式和普通类一样</li><li>抽象类必须被继承，才能被使用</li><li>一个类只能继承一个抽象类，而一个类却可以实现多个接口</li><li>Abstract 关键字同样可以用来声明抽象方法，抽象方法只包含一个方法名，而没有方法体</li><li>构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法</li></ul><hr><h2 id="jvm"><a href="#jvm" class="headerlink" title="jvm"></a>jvm</h2><ol><li><strong>内存分为堆内存跟栈内存</strong><br> 当我们创建一个对象（new Object）时，就会调用对象的构造函数来开辟空间，将对象数据存储到<code>堆内存</code>中<br> 与此同时在<code>栈内存</code>中生成对应的引用，当我们在后续代码中调用的时候用的都是<code>栈内存</code>中的引用<br> 基本数据类型是存储在栈内存中</li></ol><hr><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><ol><li><strong>字符界面下输入时字符流的传输</strong><br> 导入<code>java.io</code><br> 控制台输入<br> 导入<code>java.util</code></li><li><strong>GUI图形用户界面</strong><br> java.awt是一个软件包，包含用于创建用户界面和绘制图形图像的所有分类。功能：包含用于创建用户界面和绘制图形图像的所有类。</li><li><strong>java.sql</strong><br> 提供使用 Java 编程语言访问并处理存储在数据源中的数据的 API。此 API 包括一个框架，凭借此框架可以动态地安装不同驱动程序来访问不同数据源</li><li><strong>java.rmi</strong><br> 提供 RMI 包。RMI 指的是远程方法调用 (Remote Method Invocation)。它是一种机制，能够让在某个 Java虚拟机上的对象调用另一个 Java 虚拟机中的对象上的方法。</li></ol><hr><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul><li><strong>标识符由数字，字母和下划线（_），美元符号（$）或人民币符号（￥）组成</strong></li><li><strong>区分大小写</strong></li><li><strong>首位不能是数字</strong></li><li><strong>关键字不能当标识符</strong></li></ul><p>java关键字</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">default</span> <span class="keyword">if</span> <span class="keyword">private</span> <span class="keyword">this</span>  </span><br><span class="line"><span class="keyword">boolean</span> <span class="keyword">do</span> implements <span class="keyword">protected</span> <span class="keyword">throw</span>  </span><br><span class="line"><span class="keyword">break</span> <span class="keyword">double</span> <span class="keyword">import</span> <span class="keyword">public</span> <span class="keyword">throws</span>  </span><br><span class="line"><span class="keyword">byte</span> <span class="keyword">else</span> <span class="keyword">instanceof</span> <span class="keyword">return</span> <span class="keyword">transient</span>  </span><br><span class="line"><span class="keyword">case</span> extends <span class="keyword">int</span> <span class="keyword">short</span> <span class="keyword">try</span>  </span><br><span class="line"><span class="keyword">catch</span> <span class="keyword">final</span> <span class="class"><span class="keyword">interface</span> <span class="title">static</span> <span class="title">void</span>  </span></span><br><span class="line"><span class="class"><span class="title">char</span> <span class="title">finally</span> <span class="title">long</span> <span class="title">strictfp</span> <span class="title">volatile</span>  </span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">float</span> <span class="title">native</span> <span class="title">super</span> <span class="title">while</span>  </span></span><br><span class="line"><span class="class"><span class="title">const</span> <span class="title">for</span> <span class="title">new</span> <span class="title">switch</span>  </span></span><br><span class="line"><span class="class"><span class="title">continue</span> <span class="title">goto</span> <span class="title">package</span> <span class="title">synchronized</span></span></span><br></pre></td></tr></table></figure><hr><h2 id="Applet"><a href="#Applet" class="headerlink" title="Applet"></a>Applet</h2><p>浏览器类库，所有  JAVA  小应用程序的基本类</p><ol><li><p><strong>声明周期</strong><br> 一个  Applet  应用程序从开始运行到结束时所经历的过程被称为  Applet  的生命周期</p></li><li><p><strong>public void init()</strong><br> init()方法是  Applet  运行的起点。当启动  Applet  程序时，系统首先调用此方法，以执行初始化任务。</p></li><li><p><strong>public void start()</strong><br>start()方法是表明  Applet  程序开始执行的方法。当含有此  Applet  程序的  Web  页被再次访问时调用此方法。因此，如果每次访问  Web  页都需要执行一些操作的话，就需要在  Applet  程序中重载该方法。在  Applet  程序中，系统总是先调用  init()  方法，后调用  start()  方法。</p></li><li><p><strong>public void stop()</strong><br> stop()方法使  Applet  停止执行，当含有该  Applet  的  Web  页被其他页代替时也要调用该方法。</p></li><li><p><strong>public void destroy()</strong><br> destroy()方法收回  Applet  程序的所有资源，即释放已分配给它的所有资源。在  Applet  程序中，系统总是先调用  stop()  方法，后调用  destroy()  方法。</p></li><li><p><strong>paint(Graphics g)</strong><br> paint(Graphics g)方法可以使  Applet  程序在屏幕上显示某些信息，如文字、色彩、背景或图像等。参数  g  是  Graphics  类的一个对象实例，实际上可以把  g  理解为一个画笔。对象  g  中包含了许多绘制方法，如  drawstring()  方法就是输出字符串。</p></li></ol><hr><h2 id="计算题"><a href="#计算题" class="headerlink" title="计算题"></a>计算题</h2><ol><li><img src="https://i.loli.net/2020/10/22/pK16SnB8XtyCAlO.png" alt="屏幕截图 2020-10-22 185022.png"><br><img src="https://i.loli.net/2020/10/22/vzKqLMEtiRTNUXS.png" alt="屏幕截图 2020-10-22 185043.png"></li><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = -<span class="number">5</span>;</span><br><span class="line">i =  ++(i++);</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译错误</li></ol><p>解答：++（）括号里必须是变量，而i++是字面量</p><hr><h2 id="编译题"><a href="#编译题" class="headerlink" title="编译题"></a>编译题</h2><ol><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">String name = <span class="string">&quot;No name&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String nm)</span> </span>&#123;</span><br><span class="line">name = nm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">String empID = <span class="string">&quot;0000&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">empID = id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">Employee e = <span class="keyword">new</span> Employee(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">System.out.println(e.empID);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类的构造方法总是<strong>先调用父类的构造方法</strong>，如果子类的构造方法没有明显地指明使用父类的哪个构造方法，子类就<strong>调用父类不带参数的构造方法</strong>。<br>而父类没有无参的构造函数，所以子类需要在自己的构造函数中<strong>显示的调用父类的构造函数</strong>。</p></li><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;I am a cat&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Cat cat=<span class="keyword">new</span> Cat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Animal能编译，Cat不能编译</p></li></ol><p>解答：没有实现抽象方法</p><ol start="3"><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    String str=<span class="keyword">new</span> String(<span class="string">&quot;tarena&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span>[]ch=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Example ex=<span class="keyword">new</span> Example();</span><br><span class="line">        ex.change(ex.str,ex.ch);</span><br><span class="line">        System.out.print(ex.str+<span class="string">&quot; and &quot;</span>);</span><br><span class="line">        System.out.print(ex.ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String str,<span class="keyword">char</span> ch[])</span></span>&#123;</span><br><span class="line">   <span class="comment">//引用类型变量，传递的是地址，属于引用传递。</span></span><br><span class="line">        str=<span class="string">&quot;test ok&quot;</span>;</span><br><span class="line">        ch[<span class="number">0</span>]=<span class="string">&#x27;g&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>tarena and gbc</li></ol><p>解答：String是特殊引用类型 String值是不变的</p><ol start="4"><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">byte</span> a = (<span class="keyword">byte</span>)<span class="number">127</span>;</span><br><span class="line">       <span class="keyword">byte</span> b = (<span class="keyword">byte</span>)<span class="number">128</span>;</span><br><span class="line">       <span class="keyword">byte</span> c = (<span class="keyword">byte</span>)<span class="number">129</span>;</span><br><span class="line">       System.out.println(a);</span><br><span class="line">       System.out.println(b);</span><br><span class="line">       System.out.println(c);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>127</li></ol><p>-128<br>-127<br>解答：这是个<strong>环</strong><code>-128到127</code></p><ol start="5"><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">int_add inc = <span class="keyword">new</span> int_add(); </span><br><span class="line">       <span class="keyword">int</span> i = <span class="number">0</span>; </span><br><span class="line">       System.out.println(i);</span><br><span class="line">       <span class="comment">//0</span></span><br><span class="line">       inc.fermin(i); </span><br><span class="line">       System.out.println(i);</span><br><span class="line">       <span class="comment">//0</span></span><br><span class="line">       i= i ++; </span><br><span class="line">       System.out.println(i);</span><br><span class="line">       <span class="comment">//0</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fermin</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123; </span><br><span class="line">       i++; </span><br><span class="line">    &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p>解答：jvm里面有两个存储区，一个是暂存区（是一个堆栈，以下称为堆栈），另一个是变量区。jvm会这样运行这条语句，　JVM把count值（其值是0）拷贝到临时变量区。 步骤2　count值加1，这时候count的值是1。 步骤3　返回临时变量区的值，注意这个值是0，没修改过。 步骤4　返回值赋值给count，此时count值被重置成0。**  **c/c++中没有另外设置一个临时变量或是临时空间来保存i，所有操作都是在一个内存空间中完成的，所以在c/c++中是1。</p><ol start="6"><li><img src="https://i.loli.net/2020/10/27/oCbRmO3VNTjnhUy.png" alt="5994168_1502781283025_4B0322EFF530C8D1FB43F444D6BDBAD6.png"><br>可能的答案：0012314 01223344**</li></ol><p>解答：每个线程输出0，1，2，3，4，’空格， 输出空格前必有线程输出了0-4 </p><ol start="7"><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="keyword">return</span> a+b;</span><br><span class="line">         &#125; </span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch语句块&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">finally</span>&#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;finally语句块&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argv[])</span></span>&#123; </span><br><span class="line">         Test test =<span class="keyword">new</span> Test(); </span><br><span class="line">         System.out.println(<span class="string">&quot;和是：&quot;</span>+test.add(<span class="number">9</span>, <span class="number">34</span>)); </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>finally语句块<br>和是：43</li></ol><p>解答：要返回的结果存储到一个临时栈中，然后程序不会立即返回，而是去执行finally{}中的程序</p><ol start="8"><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (m = <span class="number">0</span>, n = -<span class="number">1</span>; n = <span class="number">0</span>; m++, n++)</span><br><span class="line">n++;</span><br></pre></td></tr></table></figure><p>循环结束判断条件不合法<br>解答：for 循环的结束判定条件 是 boolean型 n = 0 是 int 类型 会有编译异常</p></li><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>((++i&gt;<span class="number">0</span>)||(++j&gt;<span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打印出i和j的值。</span></span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line">i=<span class="number">1</span>;j=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">解答：|| 判断时右侧短路</span><br><span class="line"></span><br><span class="line"><span class="number">10.</span> </span><br><span class="line">```java</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">20</span>, y=<span class="number">5</span></span><br><span class="line">System.out.println(x+y +<span class="string">&quot;&quot;</span>+(x+y)+y);</span><br></pre></td></tr></table></figure><p>25255</p></li></ol><p>解答：“”后变为字符串，之后的<code>x+y +&quot;&quot;+25+y</code>也按字符串相加</p><ol start="11"><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal_Dog</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;动物可以移动&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Animal_Dog a = <span class="keyword">new</span> Animal_Dog();</span><br><span class="line">Animal_Dog b = <span class="keyword">new</span> Dog();</span><br><span class="line">a.move();</span><br><span class="line">b.move();</span><br><span class="line"><span class="comment">//b.bark();//编译错误，方法未定义</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal_Dog</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;狗可以跑和走&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;狗可以吠叫&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">func0</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">btye i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">func1</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">func2</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">short</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">func3</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">func4</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>byte不能定义Byte可以，第二个没有返回值，最后一个从大到小需要强制转换</p></li></ol><hr><h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><p><strong>jar</strong> 将许多文件组合成一个jar文件</p><p><strong>javac</strong>  编译</p><p><strong>javadoc</strong> 它从程序源代码中抽取类、方法、成员等注释形成一个和源代码配套的API帮助文档。</p><p><strong>javah</strong> 把java代码声明的JNI方法转化成C\C++头文件。</p>]]></content>
      
      
      <categories>
          
          <category> question </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssm controller 携参跳转页面</title>
      <link href="2020/09/29/ssm-controller-xi-can-tiao-zhuan-ye-mian/"/>
      <url>2020/09/29/ssm-controller-xi-can-tiao-zhuan-ye-mian/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a><br>感谢 ：<a href="https://blog.csdn.net/dianshanguo5388/article/details/102049302">https://blog.csdn.net/dianshanguo5388/article/details/102049302</a></p><hr><p>使用modelAndView完成跳转，然后可以将数据放入addObject传入跳转页面，然后页面上使用js直接获取数据，直接通过el表达式获取数据</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">index</span><span class="params">()</span></span>&#123;  </span><br><span class="line">     ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;/user/index&quot;</span>);  </span><br><span class="line">     modelAndView.addObject(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;xxx&quot;</span>);  </span><br><span class="line">     <span class="keyword">return</span> modelAndView;  </span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//js获取</span></span><br><span class="line">  <span class="keyword">var</span> name = $&#123;name &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring里用@RequestParam接受Date类型的url参数</title>
      <link href="2020/09/29/spring-jie-shou-date-lei-xing/"/>
      <url>2020/09/29/spring-jie-shou-date-lei-xing/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a><br>感谢 ：<a href="https://blog.csdn.net/dianshanguo5388/article/details/102049302">https://blog.csdn.net/dianshanguo5388/article/details/102049302</a></p><hr><p>引入joda-time包 maven的dependency：</p><pre><code>    &lt;dependency&gt;        &lt;groupId&gt;joda-time&lt;/groupId&gt;        &lt;artifactId&gt;joda-time&lt;/artifactId&gt;        &lt;version&gt;2.4&lt;/version&gt;    &lt;/dependency&gt;</code></pre><p>Controller层<br>public String testMethod(@RequestParam @DateTimeFormat(pattern=”yyyy-MM-dd”) Date testdate){<br>}</p>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解@RequestMapping</title>
      <link href="2020/09/29/requestmapping-xiang-jie/"/>
      <url>2020/09/29/requestmapping-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a><br>感谢 ：<a href="https://blog.csdn.net/zalan01408980/article/details/82904126">https://blog.csdn.net/zalan01408980/article/details/82904126</a></p><hr><h2 id="RequestMapping-使用须知"><a href="#RequestMapping-使用须知" class="headerlink" title="@RequestMapping 使用须知"></a>@RequestMapping 使用须知</h2><h3 id="使用-RequestMapping-注解映射请求路径"><a href="#使用-RequestMapping-注解映射请求路径" class="headerlink" title="使用@RequestMapping 注解映射请求路径"></a>使用@RequestMapping 注解映射请求路径</h3><p>你可以使用@RequestMapping注解来将请求URL映射到整个类上或某个特定的方法上，即@RequestMapping 既可以定义在类上，也可以定义方法上</p><p>一般来说，类级别的注解负责将一个特定（或符合某种模式）的请求路径映射到一个控制器上，同时通过方法级别的注解来细化映射，即根据特定的HTTP请求方法（GET、POST 方法等）、HTTP请求中是否携带特定参数等条件，将请求映射到匹配的方法上</p><hr><h2 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h2><p>（1）映射单个URL<br>@RequestMapping(“”) 或 @RequestMapping(value=””)</p><p>（2）映射多个URL<br>@RequestMapping({“”,””}) 或 @RequestMapping(value={“”,””})<br>路径开头是否加斜杠/均可，建议加上， @RequestMapping(“/hello”)</p><hr><h2 id="映射方式"><a href="#映射方式" class="headerlink" title="映射方式"></a>映射方式</h2><p>1、标准URL 映射</p><p>标准URL 映射是最简单的一种映射，<br>@RequestMapping(“/hello”)<br>或<br>@RequestMapping({“/hello”,”/world”})</p><p>2、Ant 风格的 URL 映射<br>通配符  | 说明<br>–|–<br> ？ | 匹配任何单字符<br>*|匹配任意数量的字符（含0个）<br>*<em>|匹配任意数量的目录（含0个）<br>例如：<br>（1）@RequestMapping(“/?/hello/“)<br>（2）@RequestMapping(“/</em>/hello”)<br>（3）@RequestMapping(“/**/hello”)</p><p>3、占位符URL 映射<br>URL 中可以通过一个或多个 {} 占位符映射<br> @RequestMapping(“/user/{userId}/show”)</p><hr><p>可以通过@PathVariable(“”) 注解将占位符中的值绑定到方法参数上<br><img src="https://i.loli.net/2020/10/07/ive7LfnVTdx2UKc.png" alt="20180228234248012.png"></p><hr><p>4、限制请求方法的URL 映射<br>在HTTP 请求中最常用的请求方法是 GET、POST，还有其他的<br>一些方法，DELET、PUT、HEAD 等<br>限制请求方法<br>@RequestMapping(value=”/hello”, method=RequestMethod.POST)<br>如需限制多个请求方法，以大括号包围，逗号隔开即可，例如：<br>method={RequestMethod.GET,RequestMethod.POST}</p><p>5、限制请求参数的URL 映射<br>限制请求参数来映射URL<br>@RequestMapping(value=”/user/show”, params=”userId”)<br>即请求中必须带有userId 参数</p><p>参数的限制规则如下<br>（1）params=”userId” 请求参数中必须包含 userId<br>（2）params=”!userId” 请求参数中不能包含 userId<br>（3）params=”userId!=1” 请求参数中必须包含 userId，但不能为 1<br>（4）params={“userId”,”userName”} 必须包含 userId 和 userName 参数</p><hr><p>可以通过@RequestParam(“”) 注解将请求参数绑定到方法参数上<br><img src="https://i.loli.net/2020/10/07/wqgPscD8ukFyo1i.png" alt="20180228234249857.png"></p><hr><p>要注意@PathVariable(“”) 和 @RequestParam(“”) 的不同<br>@PathVariable(“”) 是将 URL 中占位符处的值绑定到方法参数上<br>@RequestParam(“”) 是将 URL 后的请求参数绑定到方法参数上</p><hr>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring常用注解</title>
      <link href="2020/09/29/spring-chang-yong-zhu-jie/"/>
      <url>2020/09/29/spring-chang-yong-zhu-jie/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a><br>感谢：<a href="https://blog.csdn.net/m0_37995707/article/details/77447764">https://blog.csdn.net/m0_37995707/article/details/77447764</a></p><h2 id="1、对比"><a href="#1、对比" class="headerlink" title="1、对比"></a>1、对比</h2><ol><li>利用注解 ：隐式配置 通过注解简化xml文件</li><li>利用java文件：显示配置 具备类型安全</li><li>利用xml文件</li></ol><h2 id="2、注解"><a href="#2、注解" class="headerlink" title="2、注解"></a>2、注解</h2><ol><li><p>@ResponseBody<br> 用在函数上<br> 函数会将结果直接填充到HTTP的响应体中</p></li><li><p>@Controller<br> 定义控制器类 spring 项目中由控制器负责将用户发来                        的URL请求转发到对应的服务接口（service层）</p></li><li><p>@RestController<br><code>@ResponseBody</code>和@<code>Controller</code>的合集</p></li><li><p>@RequestMapping<br>提供路由信息，负责URL到Controller中的具体函数的映射。</p></li></ol><ol start="5"><li><p>@EnableAutoConfiguration<br> Spring Boot自动配置（auto-configuration）：尝试根据你添加的jar依赖自动配置你的Spring应用。例如，如果你的classpath下存在HSQLDB，并且你没有手动配置任何数据库连接beans，那么我们将自动配置一个内存型（in-memory）数据库”。你可以将<code>@EnableAutoConfiguration</code>或者<code>@SpringBootApplication</code>注解添加到一个<code>@Configuration</code>类上来选择自动配置。如果发现应用了你不想要的特定自动配置类，你可以使<code>@EnableAutoConfiguration</code>注解的排除属性来禁用它们。</p></li><li><p>@ComponentScan<br>表示将该类自动发现（扫描）并注册为Bean，可以自动收集所有的Spring组件，包括<code>@Configuration</code>类。我们经常使用<code>@ComponentScan</code>注解搜索beans，并结合<code>@Autowired</code>注解导入。</p></li><li><p>@Configuration<br>相当于传统的xml配置文件，如果有些第三方库需要用到xml文件，建议仍然通过@Configuration类作为项目的配置主类 ——可以使用<code>@ImportResource</code>注解加载xml配置文件。</p></li><li><p>@SpringBootApplication<br>相当于<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code>和<code>@Configuration</code>的合集。</p></li><li><p>@Import<br>用来导入其他配置类。</p></li><li><p>@ImportResource<br>用来加载xml配置文件。</p></li><li><p>@Autowired<br>自动导入依赖的bean。</p></li><li><p>@Service<br>一般用于修饰service层的组件。</p></li><li><p>@Repository<br>使用<code>@Repository</code>注解可以确保DAO或者repositories提供异常转译，这个注解修饰的DAO或者repositories类会被ComponetScan。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO绑定域名</title>
      <link href="2020/09/29/hexo-bang-ding-yu-ming/"/>
      <url>2020/09/29/hexo-bang-ding-yu-ming/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a><br>感谢：<a href="https://blog.csdn.net/heimu24/article/details/81159099">https://blog.csdn.net/heimu24/article/details/81159099</a></p><h2 id="1、购买域名"><a href="#1、购买域名" class="headerlink" title="1、购买域名"></a>1、购买域名</h2><h2 id="2、域名解析"><a href="#2、域名解析" class="headerlink" title="2、域名解析"></a>2、域名解析</h2><ul><li>cmd指令输入<code>ping Yourname.github.io</code>获取ip地址</li><li>配置两条</li><li>1：www CANME Youename.github.io</li><li>2：@ A ip </li></ul><hr><h2 id="3、保存域名"><a href="#3、保存域名" class="headerlink" title="3、保存域名"></a>3、保存域名</h2><ul><li>找到博客目录中的source文件夹</li><li>创建记事本名字为CANME</li><li>记事本中输入<a href="http://www.lileiblog.top(个人域名)/">www.lileiblog.top(个人域名)</a></li></ul><hr><h2 id="4、设置域名"><a href="#4、设置域名" class="headerlink" title="4、设置域名"></a>4、设置域名</h2><ul><li>进入github找到博客仓库</li><li>setting最下方GitHub Pages中的Custom domain设置域名</li><li>注意查看设置之后的状态（会在GitHub Pages中显示）</li></ul><hr><h2 id="5、访问"><a href="#5、访问" class="headerlink" title="5、访问"></a>5、访问</h2><p>浏览器输入域名即可访问</p><hr>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> aliyun </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO从零搭建</title>
      <link href="2020/09/28/hexo/"/>
      <url>2020/09/28/hexo/</url>
      
        <content type="html"><![CDATA[<p>作者 ： <a href="http://www.lilei.host/">我有一把小榔头丶</a><br>感谢：<a href="https://www.cnblogs.com/visugar/p/6821777.html">https://www.cnblogs.com/visugar/p/6821777.html</a></p><h2 id="1、安装git"><a href="#1、安装git" class="headerlink" title="1、安装git"></a>1、安装git</h2><h2 id="2、安装node-js"><a href="#2、安装node-js" class="headerlink" title="2、安装node js"></a>2、安装node js</h2><h2 id="3、安装hexo"><a href="#3、安装hexo" class="headerlink" title="3、安装hexo"></a>3、安装hexo</h2><ul><li>使用npm工具安装</li><li>创建一个文件夹存放hexo文件</li><li><code> cd</code> 到文件夹下</li><li><code>npm i -g hexo</code> 安装hexo</li><li><code>hexo -v</code>查看版本</li><li><code> hexo init</code>初始化，初始化之后可以看到新建的文件夹下有文件生成<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-   node_modules：是依赖包</span></span><br><span class="line"><span class="deletion">-   public：存放的是生成的页面</span></span><br><span class="line"><span class="deletion">-   scaffolds：命令生成文章等的模板</span></span><br><span class="line"><span class="deletion">-   source：用命令创建的各种文章</span></span><br><span class="line"><span class="deletion">-   themes：主题</span></span><br><span class="line"><span class="deletion">-   _config.yml：整个博客的配置</span></span><br><span class="line"><span class="deletion">-   db.json：source解析所得到的</span></span><br><span class="line"><span class="deletion">-   package.json：项目所需模块项目的配置信息</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="4、搭桥到github"><a href="#4、搭桥到github" class="headerlink" title="4、搭桥到github"></a>4、搭桥到github</h2><ul><li>创建新仓库名称为<code>yourname.github.io </code></li><li><code>youname</code>是<code>github</code>名称</li></ul><hr><h2 id="5、配置github账户信息"><a href="#5、配置github账户信息" class="headerlink" title="5、配置github账户信息"></a>5、配置github账户信息</h2><ul><li>回到gitbash</li><li>回到根目录（创建的目录）</li><li><code>$ git config --global user.name &quot;YourName&quot;</code></li><li><code>$ git config --global user.email&quot;YourEmail&quot;</code></li></ul><hr><h2 id="6、ssh"><a href="#6、ssh" class="headerlink" title="6、ssh"></a>6、ssh</h2><ul><li><code>ssh-keygen -t rsa -C &quot;youremail@example.com</code></li><li>获取ssh</li><li><code>$ cd ~/.ssh</code></li><li><code>$ cat -d_rsa.pub</code></li><li>粘贴到1：github 2：setting 3：ssh keys</li><li>回到gitbash</li><li><code>ssh -T git@github.com</code>验证是否成功</li></ul><hr><h2 id="7、测试"><a href="#7、测试" class="headerlink" title="7、测试"></a>7、测试</h2><ul><li><p>找到根目录中的<code>_config.yml</code>文件</p></li><li><p>修改其中配置</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span> </span><br><span class="line"><span class="attr">type:</span> git </span><br><span class="line"><span class="attr">repo:</span><span class="attr">https:</span><span class="comment">//github.com/YourgithubName/YourgithubName.github.io.git  </span></span><br><span class="line"><span class="attr">branch:</span> master</span><br></pre></td></tr></table></figure></li><li><p>回到gitbash</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo <span class="keyword">generate</span> </span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></li><li><p>hexo 3.0把服务器独立成个别模块，需要单独安装：<code>npm i hexo-server</code></p></li><li><p>打开浏览器输入：<code>http://localhost:4000</code></p><h2 id="8、上传github"><a href="#8、上传github" class="headerlink" title="8、上传github"></a>8、上传github</h2></li><li><p>回到gitbash 根目录</p></li><li><p>安装<code>npm install hexo-deployer-git --save</code></p></li><li><p>执行命令</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo <span class="keyword">generate</span> </span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></li><li><p>首次上传需要输入账户、密码</p></li><li><p>在浏览器中输入<code>http://yourgithubname.github.io</code>就可以看到个人博客</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
